SELECT COUNT(*) FROM singer;
SELECT;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Min_Age, MAX(Age) AS Max_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT s.Name, s."Song_Name", s."Song_release_year" FROM "singer" s INNER JOIN "singer_in_concert" sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age = (SELECT MIN(s2.Age) FROM "singer" s2) ORDER BY s.Name;
SELECT s.Name, s.Song_Name FROM singer s WHERE s.Age = ( SELECT MIN(Age) FROM singer );
SELECT DISTINCT T.Country FROM singer AS T WHERE T.Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT DISTINCT T2.`Song_Name` FROM `singer` AS T1 INNER JOIN `concert` AS T3 ON T1.`Singer_ID` = T3.`Stadium_ID` INNER JOIN `singer_in_concert` AS T4 ON T1.`Singer_ID` = T4.`Singer_ID` INNER JOIN `concert` AS T5 ON T3.`concert_ID` = T5.`concert_ID` INNER JOIN `stadium` AS T6 ON T3.`Stadium_ID` = T6.`Stadium_ID` INNER JOIN (SELECT Singer_ID, AVG(Age) as avg_age FROM singer GROUP BY Singer_ID) AS T7 ON T1.`Singer_ID` = T7.Singer_ID AND T1.Age > T7.avg_age WHERE T4.concert_ID = 3;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS max_capacity, AVG(Average) AS avg_average FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium );
SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name;
SELECT s.Stadium_ID, COUNT(c.concert_ID) AS Num_Concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID;
SELECT s.Name, s.Capacity, COUNT(c.concert_ID) AS Num_Concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY Num_Concerts DESC;
SELECT s.Name, s.Capacity FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer si ON sic.Singer_ID = si.Singer_ID JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(concert_ID) as Number_of_Concerts FROM concert GROUP BY Year ORDER BY Number_of_Concerts DESC;
SELECT Year, COUNT(concert_ID) as Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert );
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert );
SELECT DISTINCT T2.Country FROM singer AS T1 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID JOIN singer AS T2 ON T3.concert_ID = T2.Singer_ID WHERE (T1.Age > 40 OR T2.Age < 30);
SELECT DISTINCT T1.Name FROM stadium AS T1 WHERE T1.Stadium_ID NOT IN ( SELECT T3.Stadium_ID FROM concert AS T2 JOIN stadium AS T3 ON T2.Stadium_ID = T3.Stadium_ID WHERE T2.Year = '2014' );
SELECT DISTINCT T1.Name FROM stadium AS T1 WHERE T1.Stadium_ID NOT IN ( SELECT T3.Stadium_ID FROM concert AS T2 INNER JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T2.Year = '2014' );
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Num_Singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(si.Singer_ID) AS Number_of_singers FROM concert c JOIN singer_in_concert si ON c.concert_ID = si.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name AS Singer_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name;
SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name, s.Country FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE sic.concert_ID IN ( SELECT concert_id FROM singer_in_concert JOIN concert c ON sic.concert_id = c.concert_ID WHERE c.concert_Name LIKE '%Hey%' )
SELECT s.Name, s.Country FROM singer s WHERE EXISTS ( SELECT 1 FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID JOIN singer si ON sic.Singer_ID = si.Singer_ID WHERE c.Theme = 'Hey Oh' AND s.Singer_ID != si.Singer_ID );
SELECT s.Location, s.Name FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Location, s.Name HAVING COUNT(DISTINCT c.concert_Name) > 0;
SELECT s.Location, s.Name FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE YEAR IN ('2014', '2015') GROUP BY s.Location, s.Name HAVING COUNT(DISTINCT c.Year) > 1;
SELECT COUNT(concert.concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 );
SELECT COUNT(PetID) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = ( SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog' );
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT COUNT(DISTINCT hp.StuID) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(DISTINCT p.StuID) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(*) FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN (2001, 2002) );
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'));
SELECT DISTINCT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN (2001, 2002) );
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) );
SELECT S.Major, S.Age FROM Student AS S LEFT JOIN Has_Pet AS HP ON S.StuID = HP.StuID LEFT JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType != 'cat';
SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID = 2001);
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID = 2001 );
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID = (SELECT PetID FROM Pets WHERE PetType = 'cat') );
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID WHERE EXISTS ( SELECT * FROM Pets P WHERE P.PetID = HP.PetID AND P.PetType = 'dog' ) AND NOT EXISTS ( SELECT * FROM Pets P WHERE P.PetID IN (SELECT PetID FROM Has_Pet WHERE StuID = S.StuID) AND P.PetID <> 2001 AND P.PetType = 'cat' );
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING SUM(CASE WHEN PetType = 'dog' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN PetType = 'cat' THEN 1 ELSE 0 END) = 0 )
SELECT PetType, weight FROM Pets ORDER BY pet_age LIMIT 1;
SELECT p.PetType, p.weight FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age = (SELECT MIN(Age) FROM Student);
SELECT p.PetID, p.weight FROM Pets p WHERE p.pet_age > 1;
SELECT P.PetID, P.weight FROM Pets P WHERE P.pet_age > 1;
SELECT P.petType, AVG(S.Age) AS avg_age, MAX(S.Age) AS max_age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID GROUP BY P.petType;
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) as avg_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet );
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) GROUP BY Fname, Age;
SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith';
SELECT T2.PetID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith';
SELECT StuID, COUNT(PetID) AS NumPets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID;
SELECT StuID, COUNT(PetID) AS num_pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID;
SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 )
SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 );
SELECT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.pet_age = 3;
SELECT LName FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID = ( SELECT PetID FROM Pets WHERE pet_age = 3 ) )
SELECT AVG(Age) FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet );
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM "continents";
SELECT COUNT(*) FROM "continents";
SELECT c.Continent AS 'Continent', COUNT(*) AS 'Number of Countries' FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.Continent;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c JOIN countries co ON c.ContId = co.Continent;
SELECT COUNT(CountryName) FROM "countries";
SELECT COUNT(*) FROM "countries";
SELECT C.Maker AS "Full Name", C.Id AS "Car Maker ID", COUNT(M.Model) AS "Number of Models" FROM car_makers C JOIN model_list M ON C.Id = M.Maker GROUP BY C.Maker, C.Id;
SELECT cm.Id, cm.Maker, COUNT(cm2.ModelId) AS NumberOfModels, cm.FullName FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker, cm.FullName;
SELECT Model FROM car_names WHERE Horsepower = ( SELECT MIN(Horsepower) FROM car_names );
SELECT T.Model FROM car_names AS T ORDER BY CAST(Horsepower AS INTEGER) ASC LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < ( SELECT AVG(T3.Weight) FROM cars_data AS T3 )
SELECT T.Model FROM ( SELECT C.Model, AVG(C.Weight) AS AverageWeight FROM car_names N JOIN cars_data C ON N.MakeId = C.Id GROUP BY C.Model ) T WHERE T.AverageWeight > (SELECT AVG(Weight) FROM cars_data);
SELECT DISTINCT T2.Maker FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1970;
SELECT DISTINCT T2.Maker FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.Country = T2.Id WHERE T1.Year = 1970;
SELECT T1.Make, T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.MakeId IN ( SELECT T3.Id FROM cars_data AS T3 GROUP BY T3.Year ORDER BY T3.Year ASC LIMIT 1 );
SELECT T2.Maker, T3.Year FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T3.Id = T1.MakeId WHERE T3.Year = (SELECT MIN(Year) FROM cars_data);
SELECT DISTINCT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE CountryId IN ( SELECT CountryId FROM countries WHERE Continent IN ( SELECT ContId FROM continents WHERE Continent = 'Asia' -- Assuming you want to filter by Asia, adjust this based on the actual continent you're interested in ) ) ) AND Year > 1980;
SELECT DISTINCT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE Country IN ( SELECT CountryId FROM countries WHERE Continent = 'North America' ) AND Year > 1980 );
SELECT C.Continent, COUNT(DISTINCT CM.Maker) AS CarMakersCount FROM countries C JOIN car_makers CM ON C.CountryId = CM.Country GROUP BY C.Continent;
SELECT c.Continent, COUNT(cm.Maker) AS "Number of Car Makers" FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT CountryName FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(Country) DESC LIMIT 1 );
SELECT T1.CountryName, COUNT(T3.Maker) AS TotalCarMakers FROM countries T1 JOIN car_makers T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY TotalCarMakers DESC LIMIT 1;
SELECT COUNT(T1.Model), T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName;
SELECT cm.Maker, cm.FullName, COUNT(DISTINCT cm.Model) AS NumCarModels FROM car_makers cm GROUP BY cm.Maker;
SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'AMC Hornet Sportabout (SW)';
SELECT;
SELECT COUNT(*) FROM car_makers AS cm JOIN countries AS c ON cm.Country = c.CountryName WHERE c.CountryName = 'France';
SELECT COUNT(T2.Maker) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T1.CountryName = 'France';
SELECT COUNT(DISTINCT ml.Model) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA';
SELECT COUNT(DISTINCT M.Maker) FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE C.Country = 'United States';
SELECT AVG(T1.MPG) FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T2.Model IN ( SELECT T3.Model FROM model_list T3 WHERE T3.Cylinders = 4 );
SELECT AVG(T1.MPG) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4;
SELECT MIN(T1.Weight) FROM cars_data T1 JOIN model_list T2 ON T1.MakeId = T2.ModelId JOIN car_names T3 ON T2.ModelId = T3.MakeId WHERE T2.Maker = ( SELECT Maker FROM car_makers WHERE FullName LIKE 'USA%' ) AND T1.Cylinders = 8 AND T1.Year = 1974;
SELECT MIN(T2.Weight) FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 AND T1.Year = 1974;
SELECT DISTINCT Maker, Model FROM model_list;
SELECT T2.Maker, T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id;
SELECT CountryName, CountryId FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 0 );
SELECT CountryName, CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName;
SELECT COUNT(Id) FROM cars_data WHERE Horsepower > '150'
SELECT COUNT(*) FROM "cars_data" WHERE "Horsepower" > '150';
SELECT AVG(Weight) AS Average_Weight, Year FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight), AVG(Id) AS "Average Year" FROM cars_data GROUP BY Year;
SELECT DISTINCT T2.CountryName FROM countries AS T2 JOIN continents AS T1 ON T2.Continent = T1.ContId WHERE T1.Continent = 'Europe' AND (SELECT COUNT(*) FROM car_makers AS T3 WHERE T2.CountryId = T3.Country) >= 3;
SELECT T3.CountryName FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN ( SELECT Country, COUNT(DISTINCT Maker) as count FROM car_makers GROUP BY Country ) AS T3 ON T2.CountryId = T3.Country WHERE T2.Continent = 1 AND T3.count >= 3;
SELECT MAX(T2.Horsepower), T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3;
SELECT MAX(T1.Horsepower), T2.Make, T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3;
SELECT Model FROM model_list WHERE ModelId IN ( SELECT MakeID FROM car_names ORDER BY MPG DESC LIMIT 1 )
SELECT Model FROM car_names WHERE MPG = ( SELECT MAX(MPG) FROM car_names );
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(T1. Edispl ) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model LIKE 'volvo';
SELECT AVG(T2.EDISPL) AS Average_Edispl FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.MAKER = 'Volvo';
SELECT MAX(accelerate) as max_accelerate, "Cylinders" FROM cars_data GROUP BY "Cylinders" ORDER BY "Cylinders" ASC;
SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;
SELECT Model, COUNT(*) AS NumVersions FROM car_names GROUP BY Model ORDER BY NumVersions DESC;
SELECT Model, COUNT(DISTINCT Make) as MostVersions FROM car_names GROUP BY Model ORDER BY MostVersions DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS "Number of cars" FROM `cars_data` WHERE Cylinders > 4;
SELECT COUNT(Id) AS TotalCarsProduced FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM "cars_data" WHERE YEAR = 1980;
SELECT;
SELECT;
SELECT T1.FullName, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName HAVING COUNT(T2.Model) > 3;
SELECT Maker, Id FROM car_makers GROUP BY Maker, Id HAVING COUNT(DISTINCT `Model`) > 3;
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE C.FullName = 'General Motors' OR C.Country IN ( SELECT Country FROM countries WHERE Id IN ( SELECT T2.CountryId FROM cars_data AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.Weight > 3500 ) )
SELECT DISTINCT M.Model FROM model_list AS M INNER JOIN car_makers AS C ON M.Maker = C.Id WHERE (C.Maker = 'General Motors' AND C.FullName IS NOT NULL) OR M.Model IN ( SELECT Model FROM cars_data WHERE Weight > 3500 );
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM `cars_data` WHERE Weight < 4000 OR Weight > 3000;
SELECT T2.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Accelerate = ( SELECT MAX(Accelerate) FROM cars_data );
SELECT DISTINCT T1.Horsepower FROM cars_data AS T1 WHERE T1.Accelerate = ( SELECT MAX(Accelerate) FROM cars_data );
SELECT T2.Cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo' ORDER BY T2.Accelerate ASC LIMIT 1;
SELECT T4.Cylinders FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T2.Maker = T3.Id JOIN cars_data AS T4 ON T1.MakeId = T4.Id WHERE T3.Maker = 'Volvo' AND T4.Accelerate = ( SELECT MIN(Accelerate) FROM cars_data );
SELECT COUNT(*) AS NumCars FROM `cars_data` WHERE `Accelerate` > ( SELECT `Horsepower` FROM `car_names` ORDER BY `Horsepower` DESC LIMIT 1 );
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT Horsepower FROM cars_data ORDER BY Horsepower DESC LIMIT 1 );
SELECT COUNT(DISTINCT T1.CountryName) AS CountryCount FROM countries T1 JOIN car_makers T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(T2.Id) > 2;
SELECT COUNT(T1.CountryId) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(DISTINCT T2.Maker) > 2;
SELECT COUNT(*) FROM "cars_data" WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT T2.Model, T1.Horsepower FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.Cylinders = 4 AND T1.Horsepower = ( SELECT MAX(T3.Horsepower) FROM cars_data AS T3 WHERE T3.Id = T1.MakeId AND T3.Cylinders = 4 );
SELECT Model, Horsepower FROM cars_data WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;
SELECT c.MakeId, cn.Make FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower <> (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3;
SELECT cn.MakeId, cn.Model FROM car_names AS cn WHERE cn.MakeId IN ( SELECT cd.Id FROM cars_data AS cd WHERE cd.Horsepower = 'Unknown' OR cd.Horsepower LIKE '%N/A%' ) AND cd.Cylinders < 4;
SELECT MAX(C.MPG) FROM cars_data C WHERE C.Cylinders = 8 OR C.Year < 1980;
SELECT MAX(T1.MPG) FROM cars_data AS T1 WHERE T1.`Year` < 1980 OR T1.Cylinders = 8;
SELECT T2.Model, T1.Maker FROM cars_data AS T1 JOIN model_list AS T2 ON T1.MakeId = T2.ModelId WHERE T1.Weight < 3500 AND T2.Maker NOT LIKE 'Ford Motor Company';
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE C.FullName != 'Ford Motor Company' AND M.Model NOT IN ( SELECT Model FROM car_names WHERE Make LIKE '%Ford%' );
SELECT CountryName FROM countries WHERE CountryId NOT IN ( SELECT Country FROM car_makers );
SELECT CountryName FROM countries WHERE CountryId NOT IN ( SELECT Country FROM car_makers );
SELECT Maker, Id FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) >= 2 ) AND Id NOT IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Model) <= 3 );
SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.Model) >= 2 AND (SELECT COUNT(*) FROM cars_data WHERE MakeId = T1.Id) > 3;
SELECT c.CountryName, cm.Id AS CarMakerId, COUNT(*) AS Count FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, cm.Id HAVING COUNT(*) > 3 OR (cm.Maker = 'fiat' AND c.CountryId IN ( SELECT Maker FROM model_list WHERE Model = 'fiat' )) ;
SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN ( SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3 ) OR c.CountryId IN ( SELECT m.country FROM model_list m WHERE m.Model = 'Fiat' );
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(uid) AS Total_Airlines FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM 'flights';
SELECT COUNT(*) AS num_flights FROM 'flights';
SELECT * FROM airlines WHERE Abbreviation = 'UAL';
SELECT * FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA';
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE Airline = 'JetBlue Airways';
SELECT COUNT(DISTINCT FlightNo) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Abbreviation = 'UA' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'Aberdeen';
SELECT COUNT(DestAirport) FROM flights WHERE Airline = 'United' AND DestAirport = 'Aberdeen';
SELECT a.City, COUNT(f.DestAirport) as TotalArrivingFlights FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY TotalArrivingFlights DESC;
SELECT a.City, COUNT(DISTINCT f.DestAirport) AS Frequency FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY Frequency DESC;
SELECT a.City, COUNT(f.FlightNo) AS NumberOfDepartingFlights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY NumberOfDepartingFlights DESC;
SELECT City, COUNT(*) AS Frequency FROM flights JOIN airports ON SourceAirport = AirportCode GROUP BY City ORDER BY Frequency DESC;
SELECT DestAirport AS 'Airport with most flights' FROM flights GROUP BY DestAirport ORDER BY COUNT(DestAirport) DESC LIMIT 1;
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(DestAirport) DESC LIMIT 1;
SELECT AirportCode, COUNT(*) as count FROM flights GROUP BY SourceAirport HAVING COUNT(*) = ( SELECT MIN(count) FROM ( SELECT AirportCode, COUNT(*) as count FROM flights GROUP BY SourceAirport ) t );
SELECT SourceAirport, DestAirport FROM flights GROUP BY SourceAirport, DestAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Airline, COUNT(*) FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC;
SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC;
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 WHERE T1.uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT T2.Abbreviation, T1.Country FROM airlines AS T1 JOIN ( SELECT Airline, COUNT(*) as num_flights FROM flights GROUP BY Airline ) AS T2 ON T1.uid = T2.Airline ORDER BY T2.num_flights ASC LIMIT 1;
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD';
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD';
SELECT Airline, Abbreviation FROM airlines WHERE EXISTS ( SELECT 1 FROM flights WHERE SourceAirport = 'AHD' AND Airline IN (SELECT uid FROM airlines) );
SELECT DISTINCT T1.Abbreviation FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD';
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE (T2.SourceAirport = 'APG' OR T2.DestAirport = 'APG') AND (T2.SourceAirport = 'CVO' OR T2.DestAirport = 'CVO');
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE (T2.SourceAirport = 'APG' OR T2.SourceAirport = 'CVO') AND T2.DestAirport != 'APG' AND T2.DestAirport != 'CVO';
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND DestAirport != 'APG';
SELECT Airline, Abbreviation FROM flights AS f1 WHERE SourceAirport = 'CVO' AND NOT EXISTS ( SELECT * FROM flights AS f2 WHERE f1.Airline = f2.Airline AND DestAirport = 'APG' );
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) >= 10;
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT Airline FROM 'flights' GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT DISTINCT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT DISTINCT T2.FlightNo FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT DISTINCT T2.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen';
SELECT DISTINCT FlightNo FROM flights WHERE DestAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT AirportName FROM airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights );
SELECT AirportCode, AirportName FROM airports WHERE AirportCode NOT IN ( SELECT DestAirport FROM flights UNION ALL SELECT SourceAirport FROM flights );
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name, Age FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS Number_of_employees FROM employee GROUP BY City;
SELECT City, COUNT(*) as Employee_Count FROM employee GROUP BY City;
SELECT;
SELECT T.city FROM ( SELECT City, COUNT(*) as count FROM employee WHERE Age < 30 GROUP BY City ) AS T WHERE T.count > 1;
SELECT Location, COUNT(*) as num_shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) as Num_Shop FROM shop GROUP BY Location;
SELECT;
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products) AS Min_Prod, MAX(Number_products) AS Max_Prod FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT;
SELECT;
SELECT E.Name, COUNT(E1."Employee_ID") as count FROM "employee" AS E JOIN "evaluation" AS E1 ON E."Employee_ID" = E1."Employee_ID" GROUP BY E.Name ORDER BY count DESC;
SELECT;
SELECT e.Name FROM employee AS e JOIN evaluation AS ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = ( SELECT MAX(Bonus) FROM evaluation );
SELECT e.Name FROM evaluation ev JOIN employee e ON ev.Employee_ID = e.Employee_ID WHERE (ev.Bonus, ev.Employee_ID) IN ( SELECT MAX(Bonus), Employee_ID FROM evaluation GROUP BY Employee_ID );
SELECT e.Name FROM employee AS e WHERE e.Employee_ID NOT IN ( SELECT ev.Employee_ID FROM evaluation AS ev );
SELECT;
SELECT s.Name, COUNT(h.Employee_ID) AS num_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY num_employees DESC LIMIT 1;
SELECT;
SELECT T2.Name FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name HAVING COUNT(T2.Employee_ID) = 0;
SELECT;
SELECT T1.Name AS Shop_Name, COUNT(DISTINCT T2.Employee_ID) AS Number_of_Employees FROM shop T1 JOIN hiring T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT;
SELECT DISTINCT T2.District FROM shop AS T1 JOIN shop AS T2 ON T1.Location = T2.Location AND T1.District = T2.District WHERE (T1.Number_products < 3000 AND T2.Number_products > 10000);
SELECT;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT;
SELECT COUNT(*) AS Document_Count, t.Template_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY t.Template_Name;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT T1.Template_ID, T2.Type_Code FROM Templates AS T1 JOIN Document_Types AS T2 ON T1.Template_ID = T2.Document_Type_ID GROUP BY T1.Template_ID, T2.Type_Code ORDER BY COUNT(T1.Template_ID) DESC LIMIT 1;
SELECT;
SELECT;
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )
SELECT;
SELECT;
SELECT;
SELECT;
SELECT Template_ID, Version, Type_Code FROM Templates;
SELECT;
SELECT;
SELECT;
SELECT `Template_ID` FROM Templates WHERE `Template_Name` IN ('PP', 'PPT');
SELECT;
SELECT;
SELECT Template_Version, Template_Type_Code FROM Templates WHERE Template_Version > 5;
SELECT T2.Version_Number, T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_ID NOT IN ( SELECT Document_ID FROM Paragraphs ) AND CAST(T2.Version_Number AS INT) > 5;
SELECT;
SELECT Template_ID, COUNT(*) as Count FROM Documents GROUP BY Template_ID;
SELECT;
SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT;
SELECT;
SELECT;
SELECT MIN(Template_Version) AS Lowest_Version, Template_Type_Code FROM Templates;
SELECT;
SELECT;
SELECT;
INSERT INTO Templates (`Template_ID`, `Other_Details`) VALUES (10, 'BK'); INSERT INTO Templates (`Template_ID`, `Other_Details`) VALUES (8, 'BK');
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT DISTINCT Template_ID AS Unused_Template_Type_Code FROM Documents WHERE Document_ID NOT IN ( SELECT Document_ID FROM Paragraphs )
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT COUNT(*) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT;
SELECT;
SELECT;
INSERT INTO Paragraphs (`Paragraph_ID`, `Document_ID`, `Paragraph_Text`, `Other_Details`) VALUES (16615, 80, 'Japan', NULL);
SELECT;
SELECT;
SELECT;
SELECT d.`Document_ID`, COUNT(p.`Paragraph_ID`) AS `Number_of_Paragraphs` FROM Documents d JOIN Paragraphs p ON d.`Document_ID` = p.`Document_ID` GROUP BY d.`Document_ID` ORDER BY d.`Document_ID`;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT d.Document_Name FROM Documents d INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN ( SELECT Document_ID, COUNT(*) as cnt FROM Paragraphs GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID ORDER BY p.cnt DESC LIMIT 1;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT Name, Age FROM teacher ORDER BY Age ASC;
SELECT;
SELECT T2.Age, T2.Hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID;
SELECT "Name", "Age" AS Teacher_Age, "Hometown" FROM "teacher";
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT "Name" FROM "teacher" WHERE "Age" = '32' OR "Age" = '33';
SELECT;
SELECT;
SELECT;
SELECT Hometown, COUNT(*) as Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(Teacher_ID) as Num_Teachers FROM teacher GROUP BY Hometown;
SELECT;
SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC;
SELECT;
SELECT;
SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID;
SELECT t.Name, c.Course FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM course_arrange ca JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID ORDER BY t.Name ASC;
SELECT t.Name AS TeacherName, c.Course AS CourseName FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT T2.Name FROM `course` AS T1 JOIN `teacher` AS T2 ON T1.`Course_ID` = 2 JOIN `course_arrange` AS T3 ON T3.`Course_ID` = T1.`Course_ID` WHERE T1.`Course` = 'Math';
SELECT t.Name FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID JOIN course AS c ON ca.Course_ID = c.Course_ID WHERE c."Course" = 'Math';
SELECT T.Name, COUNT(CA.Course_ID) AS Number_of_Courses FROM teacher T LEFT JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Name;
SELECT T.Name, COUNT(CA.Course_ID) AS Number_of_Courses FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Name;
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(T1.Course_ID) >= 2;
SELECT;
SELECT;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
-- Step 1: Find the minimum staff number of all museums opened after 2010. SELECT MIN(Num_of_Staff) AS min_staff FROM museum WHERE Open_Year > "2010"; -- Step 2: Identify the museum IDs of the museums with more staff than that minimum. SELECT Museum_ID FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > "2010" ); -- Step 3: Find the names of museums which have those IDs SELECT Name FROM museum WHERE Museum_ID IN ( SELECT Museum_ID FROM museum WHERE Num_of_Staff > ( SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > "2010" ) );
SELECT v.ID, v.Name, v.Age FROM visitor v WHERE (SELECT COUNT(*) FROM visit WHERE visitor_ID = v.ID) > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vi.Total_spent) DESC LIMIT 1;
SELECT;
SELECT;
SELECT;
SELECT AVG(T1.Num_of_Ticket) AS avg_tickets, MAX(T1.Num_of_Ticket) AS max_tickets FROM visit T1;
SELECT;
SELECT;
SELECT;
SELECT COUNT(*) FROM museum WHERE Open_Year BETWEEN '2008' AND '2013';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(l_loser_age) AS avg_loser_age, AVG(w_winner_age) AS avg_winner_age FROM matches;
SELECT AVG(l.l_1stIn) AS avg_loser_age, AVG(w.w_1stIn) AS avg_winner_age FROM qualifying_matches l JOIN matches w ON l.match_num = w.match_num;
SELECT AVG(winner_rank) AS avg_winner_rank FROM matches;
SELECT AVG(winner_rank) AS avg_winner_rank FROM matches;
SELECT MAX(loser_rank) AS highest_losers_rank FROM matches;
SELECT MAX(l.lose_rank) AS best_rank_of_losers FROM matches l;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT l_name) FROM qualifying_matches;
SELECT COUNT(DISTINCT l_name) FROM qualifying_matches;
SELECT DISTINCT T.tourney_name FROM matches AS M JOIN tours ON M.tourney_id = T.tourney_id WHERE M.match_num > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.year IN (2013, 2016);
SELECT DISTINCT p.first_name, p.last_name FROM players p WHERE (p.player_id IN ( SELECT winner_id FROM matches WHERE year = 2013 )) AND (p.player_id IN ( SELECT winner_id FROM matches WHERE year = 2016 ));
SELECT COUNT(*) FROM matches WHERE YEAR(tourney_date) = 2013 OR YEAR(tourney_date) = 2016;
SELECT COUNT(*) FROM matches WHERE YEAR(tourney_date) = 2013 OR YEAR(tourney_date) = 2016;
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.loser_id OR p.player_id = m.winner_id WHERE (m.tourney_name IN ('WTA Championships', 'Australian Open') AND m.score LIKE '%win%') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) > 1;
SELECT p.first_name, p.country_code, q.winner_name AS "WTA_Champ", m.winner_name AS "Australian_Open" FROM players p JOIN qualifying_matches q ON p.player_id = q.loser_id JOIN matches m ON p.player_id = m.loser_id WHERE (q.tourney_name = 'WTA Championships' AND m.tourney_name = 'Australian Open') OR (q.tourney_name = 'Australian Open' AND m.tourney_name = 'WTA Championships')
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name AS full_name FROM players ORDER BY birth_date;
SELECT p.first_name, p.last_name FROM players p WHERE p.hand = 'L' ORDER BY p.birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM rankings r JOIN players p ON r.player_id = p.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings) ORDER BY p.first_name;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, MAX(qm.winner_rank_points) as max_winner_rank_points FROM players p JOIN qualifying_matches qm ON p.player_id = qm.loser_id OR p.player_id = qm.winner_id GROUP BY p.player_id HAVING SUM(CASE WHEN qm.score LIKE '%w/%' THEN 1 ELSE 0 END) > SUM( CASE WHEN qm.score LIKE '%l/%' THEN 1 ELSE 0 END ) ORDER BY max_winner_rank_points DESC;
SELECT p.first_name, p.last_name, MAX(qm.winner_rank_points) AS max_rank_points FROM qualifying_matches qm JOIN players p ON qm.loser_id = p.player_id OR qm.loser_id = p.player_id GROUP BY p.first_name, p.last_name ORDER BY MAX(qm.winner_rank_points) DESC;
SELECT p.first_name, p.last_name FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC;
SELECT winner_name FROM qualifying_matches AS qm JOIN matches m ON qm.loser_id = m.loser_id OR qm.winner_id = m.winner_id WHERE qm.tourney_name LIKE '%Australian Open%' ORDER BY qm.winner_rank_points DESC LIMIT 1;
SELECT T1.first_name, T1.last_name AS "loser_name", T2.first_name, T2.last_name AS "winner_name" FROM matches AS T1 JOIN players AS T2 ON T1.loser_id = T2.player_id WHERE (T1.loser_id, T1.winner_id) IN ( SELECT loser_id, winner_id FROM matches GROUP BY loser_id, winner_id ORDER BY COUNT(minutes) DESC LIMIT 1 )
SELECT qm.winner_name AS "Winner Name", qm.l_1stWon AS "Loser Name" FROM qualifying_matches qm INNER JOIN matches m ON qm.loser_id = m.loser_id AND qm.tourney_date = m.tourney_date AND qm.match_num = m.match_num ORDER BY minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM rankings r JOIN players p ON r.player_id = p.player_id GROUP BY p.first_name;
SELECT p.first_name AS Player_First_Name, AVG(r.ranking) AS Average_Ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, COALESCE(SUM(r.ranking_points), 0) AS total_ranking_points FROM players p LEFT JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT COUNT(p.player_id) AS num_players, p.country_code FROM players p GROUP BY p.country_code;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.country_code, COUNT(T2.player_id) AS num_players FROM players T2 JOIN (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(player_id) DESC LIMIT 1) AS most_common_player ON T2.player_id = most_common_player.player_id GROUP BY T1.country_code;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT YEAR(tourney_date) AS year, COUNT(*) AS num_matches FROM matches GROUP BY YEAR(tourney_date);
SELECT YEAR(tourney_date) AS year, COUNT(*) AS num_matches FROM matches GROUP BY YEAR(tourney_date);
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY p.birth_date DESC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.loser_age DESC LIMIT 3;
SELECT;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE surface = 'Hard' AND tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) ORDER BY winner_rank_points DESC;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN (SELECT w_id, MAX(w_rank_points) AS max_w_rank_points FROM matches GROUP BY w_id) AS most_points ON p.player_id = most_points.w_id;
SELECT T1.hand AS Hand_Type, COUNT(T1.player_id) AS Number_of_Players FROM players T1 GROUP BY T1.hand;
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT `ship`.name, `ship`.tonnage FROM `ship` ORDER BY `ship`.name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_deaths, MIN(killed) AS min_deaths FROM "death";
SELECT AVG(injured) FROM death;
SELECT d.killed AS deaths, d.injured AS injuries FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig' GROUP BY b.id, b.name;
SELECT b.id, b.name, SUM(d.killed) AS total_killed FROM battle b JOIN death d ON b.id = d.caused_by_ship_id OR b.id = d.caused_by_ship_id -- assuming you want to count deaths from all ships in a battle GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT ship.id, ship.name, SUM(death.injured) AS total_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY total_injuries DESC;
SELECT DISTINCT name FROM "battle" WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle AS b WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')
SELECT T1.name, T1.date FROM "battle" AS T1 INNER JOIN "ship" AS T2 ON T1.id = T2.lost_in_battle WHERE (T2.name = 'Lettice' OR T2.name = 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT note FROM "death" WHERE note LIKE '%East%';
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT d.`department_name`, d.department_id, COUNT(tc.student_course_id) as num_degrees FROM Transcript_Contents tc JOIN Student_Courses sc ON tc.student_course_id = sc.student_course_id JOIN Courses c ON sc.course_id = c.course_id JOIN Departments d ON c.department_id = d.department_id GROUP BY d.`department_name`, d.department_id ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT;
SELECT COUNT(DISTINCT `course_id`) FROM Courses;
SELECT;
SELECT COUNT(DISTINCT course_id) AS num_degrees FROM Courses;
SELECT;
SELECT;
SELECT * FROM Course; -- assuming there's a 'Course' table
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT s.name AS course_name, c.course_id AS course_id, COUNT(tc.student_course_id) AS total_students FROM Student_Enrolment_Courses sec JOIN Courses c ON sec.course_id = c.course_id JOIN Students s ON sec.student_enrolment_id = s.student_enrolment_id JOIN Transcript_Contents tc ON sec.student_course_id = tc.student_course_id GROUP BY course_name, course_id ORDER BY total_students DESC;
SELECT;
SELECT;
WITH Enrolment_Transcripts AS ( SELECT T1.student_course_id, T2.transcript_date FROM Transcript_Contents T1 INNER JOIN Transcripts T2 ON T1.transcript_id = T2.transcript_id ) SELECT DISTINCT E1.student_course_id AS Student_Course_ID_1, E1.student_course_id AS Student_Course_ID_2, E1.student_course_id AS Student_Course_ID, E2.student_course_id AS Other_Course_ID, E1.transcript_date AS Transcript_Date_1, E2.transcript_date AS Transcript_Date_2 FROM Enrolment_Transcripts E1 INNER JOIN Enrolment_Transcripts E2 ON E1.student_course_id <> E2.student_course_id AND E1.transcript_date = E2.transcript_date;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT SC.course_id AS Program_ID, COUNT(SE.student_enrolment_id) AS Total_Enrolled FROM Student_Enrolment SE JOIN Student_Enrolment_Courses SEC ON (SE.student_enrolment_id = SEC.student_enrolment_id) GROUP BY SEC.course_id;
SELECT;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id AS id, COUNT(sec.course_id) AS num_enrollments FROM Students s JOIN Student_Enrolment_Courses sec ON s.student_id = sec.student_enrolment_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT;
SELECT;
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id;
SELECT;
SELECT SC.course_id, COUNT(SEC.student_enrolment_id) as total_enrollments FROM Student_Enrolment_Courses SEC JOIN Student_Courses SC ON SEC.student_course_id = SC.student_course_id GROUP BY SC.course_id ORDER BY total_enrollments DESC;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
INSERT INTO Transcripts (`transcript_id`, `transcript_date`, `other_details`) VALUES (1, '1988-04-30 01:19:47', NULL);
SELECT;
INSERT INTO Transcripts (`transcript_id`, `transcript_date`, `other_details`) VALUES (2, '1975-10-28 15:16:51', NULL);
SELECT MIN(`transcript_date`) FROM Transcripts;
SELECT;
SELECT;
CREATE TABLE Addresses ( address_id INT, street_line1 VARCHAR(255), street_line2 VARCHAR(255), city VARCHAR(100), state VARCHAR(50), zip_code CHAR(10) );
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
INSERT INTO Student_Enrolment_Courses (`student_course_id`, `course_id`, `student_enrolment_id`) VALUES (70882679, 13, 9); -- This line is for a Master's course enrollment. INSERT INTO Student_Enrolment_Courses (`student_course_id`, `course_id`, `student_enrolment_id`) VALUES (45105806, 13, 14); -- This line is also for a Master's course enrollment.
SELECT;
SELECT;
SELECT;
-- Select relevant columns and sort by 'name' in descending order (reversed lexicographical) SELECT Student.id, Student.name, Enrolment.student_id, Transcripts.transcript_date, Transcript_Contents.student_course_id FROM Student JOIN Enrolment ON Student.id = Enrolment.student_id JOIN Student_Enrolment_Courses ON Enrolment.id = Student_Enrolment_Courses.enrolment_id JOIN Transcript_Contents ON Student_Enrolment_Courses.student_enrolment_id = Transcript_Contents.student_course_id JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Student.name DESC;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT * FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT title FROM Cartoon WHERE directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 ORDER BY T1.`Original_air_date` ASC;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(id) AS NumberOfChannels FROM "TV_Channel" GROUP BY Country ORDER BY NumberOfChannels DESC;
SELECT Country, COUNT(*) AS num_channels FROM "TV_Channel" GROUP BY Country ORDER BY COUNT(*) DESC;
SELECT COUNT(DISTINCT "series_name") AS Different_Series_Names, COUNT(DISTINCT "Content") AS Different_Contents FROM "TV_Channel";
SELECT COUNT(DISTINCT series_name) AS DifferentSeries, COUNT(DISTINCT Content) AS DifferentContents FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE id = 700;
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT T2.Package_Option FROM "TV_series" AS T1 JOIN "TV_Channel" AS T2 ON T1.Channel = T2.id WHERE T1.series_name = 'Sky Radio';
SELECT COUNT(*) FROM "TV_Channel" WHERE "Language" = 'English';
SELECT COUNT(*) FROM "TV_Channel" WHERE Language = 'English';
SELECT Language, COUNT(*) as Number_of_TV_Channel FROM "TV_Channel" GROUP BY Language ORDER BY Number_of_TV_Channel ASC;
SELECT Language, COUNT(*) as Count FROM "TV_Channel" GROUP BY Language HAVING COUNT(*) = ( SELECT MIN(Count) FROM ( SELECT Language, COUNT(*) as Count FROM "TV_Channel" GROUP BY Language ) t );
SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) as num_channels FROM TV_Channel GROUP BY Language;
SELECT T2.Series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = 'The Rise of the Blue Beetle!';
SELECT T2.`series_name` FROM `TV_Channel` AS T1 INNER JOIN `Cartoon` AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Title` = 'The Rise of the Blue Beetle!';
SELECT T2.Title FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T2.id = T1.Channel WHERE T2.series_name = 'Sky Radio';
SELECT Series_name, id, Episode FROM TV_series ORDER BY Rating DESC;
SELECT * FROM "TV_series" ORDER BY Rating DESC;
SELECT T1.Series_name, T2.Episode, T2.Rating FROM "TV_Channel" AS T1 INNER JOIN "TV_series" AS T2 ON T2.Channel = T1.id ORDER BY T2.Rating DESC LIMIT 3;
SELECT Episode, Rating FROM ( SELECT Episode, Rating, ROW_NUMBER() OVER (ORDER BY CAST(REPLACE(REPLACE(Rating, '.', ''), ',', '') AS REAL) DESC) as row_num FROM TV_series ) AS subquery WHERE row_num <= 3;
SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM "TV_series";
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM "TV_series";
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Episode FROM TV_series WHERE series_name = 'A Love of a Lifetime';
SELECT T2.Weekly_Rank FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T2.Channel = T1.id WHERE T2.Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT T2.series_name FROM "TV_series" AS T1 INNER JOIN "TV_Channel" AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime';
SELECT T2.`series_name` FROM `TV_series` AS T1 JOIN `TV_Channel` AS T2 ON T2.id = T1.Channel WHERE T1.Episode = 'A Love of a Lifetime';
SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T2.Channel = T1.id WHERE T1.series_name = 'Sky Radio';
SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT T1.Directed_by, COUNT(T2.id) AS num_cartoons FROM Cartoon T1 JOIN TV_Channel T2 ON T1.Channel = T2.id GROUP BY T1.Directed_by;
SELECT "Production_code", "Channel" FROM "Cartoon" WHERE "Original_air_date" = ( SELECT MAX("Original_air_date") FROM "Cartoon" );
SELECT Production_code, Channel FROM Cartoon WHERE id = ( SELECT MAX(id) FROM Cartoon );
SELECT T1."Package_Option", T2."series_name" FROM "TV_Channel" AS T1 JOIN "TV_series" AS T2 ON T2.Channel = T1.id WHERE T1.Hight_definition_TV = 'yes';
SELECT T2.Package_Option, T1.series_name FROM "TV_Channel" AS T1 JOIN "TV_series" AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'yes';
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey';
SELECT T2.Country FROM Cartoon AS T1 JOIN "TV_Channel" AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey';
SELECT DISTINCT T3.`Country` FROM `TV_Channel` AS T1 JOIN `Cartoon` AS T2 ON T1.`id` = T2.`Channel` JOIN `Cartoon` AS T3 ON T3.id IN (SELECT id FROM Cartoon WHERE Written_by = 'Todd Casey') WHERE T2.id NOT IN (SELECT id FROM Cartoon WHERE Written_by = 'Todd Casey');
SELECT DISTINCT Country FROM TV_Channel AS T1 WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' );
SELECT T1.series_name, T2.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T3 ON T1.id = T3.Channel WHERE T3.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT T2.series_name, T2.Country, COUNT(T1.Title) AS Count FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE (T1.Directed_by = 'Ben Jones' AND T1.Directed_by IS NOT NULL) OR (T1.Directed_by = 'Michael Chang' AND T1.Directed_by IS NOT NULL) GROUP BY T2.series_name, T2.Country;
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT T1.id FROM TV_Channel AS T1 GROUP BY T1.Country HAVING COUNT(*) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;
SELECT id FROM "TV_Channel" WHERE id NOT IN ( SELECT Channel FROM "Cartoon" WHERE Directed_by = 'Ben Jones' );
SELECT id FROM "TV_Channel" WHERE id NOT IN ( SELECT Channel FROM "Cartoon" WHERE Directed_by = 'Ben Jones' );
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );
SELECT DISTINCT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by NOT LIKE 'Ben Jones' AND T2.Title IS NULL;
SELECT COUNT("Poker_Player_ID") FROM "poker_player";
SELECT COUNT(Poker_Player_ID) FROM poker_player;
SELECT Earnings FROM "poker_player" ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT DISTINCT Money_Rank FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT;
SELECT MAX(Final_Table_Made) FROM "poker_player" WHERE Earnings < 200000;
SELECT p.Name, pp.Poker_Player_ID FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID;
SELECT P.Name FROM people AS P JOIN poker_player AS PP ON P.People_ID = PP.People_ID WHERE PP.Earnings > 300000;
SELECT p.Name FROM people AS p JOIN poker_player AS pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000;
SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Final_Table_Made ASC;
SELECT p.Name FROM "people" AS p INNER JOIN "poker_player" AS pp ON p."People_ID" = pp."People_ID" ORDER BY pp."Final_Table_Made" ASC;
SELECT p.Name, pp.People_ID, p2.Birth_Date FROM people p JOIN people p2 ON p.People_ID = p2.People_ID JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT T2.Name, T1."Birth_Date" FROM "poker_player" AS T1 JOIN "people" AS T2 ON T1."People_ID" = T2."People_ID" WHERE T1.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT Money_Rank FROM poker_player WHERE People_ID = ( SELECT People_ID FROM people WHERE Height = ( SELECT MAX(Height) FROM people ) );
SELECT T2."Money_Rank" FROM "people" AS T1 JOIN "poker_player" AS T2 ON T1."People_ID" = T2."People_ID" WHERE T1.Height = ( SELECT MAX(T1.Height) FROM "people" AS T1 );
SELECT AVG(Earnings) FROM poker_player WHERE Height > 200;
SELECT AVG(T2.Earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC;
SELECT Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY Earnings DESC;
SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player );
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT;
SELECT ContestantNumber, Name FROM Contenders -- assuming this is the table where the information resides ORDER BY Name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT;
SELECT MAX(date) AS last_date FROM votes WHERE state = 'CA';
SELECT name FROM contestants WHERE name != 'Jessie Alloway';
SELECT;
SELECT;
SELECT contestant_number, name FROM contestants ORDER BY votes ASC LIMIT 1;
SELECT COUNT(*) FROM vote WHERE state IN ('NY', 'CA');
SELECT COUNT(*) as non_voted_contestants FROM contests;
SELECT area_code FROM voters ORDER BY total_votes DESC LIMIT 1;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT name FROM nation WHERE founding_year > 1950;
SELECT;
SELECT;
SELECT SUM(surface_area) AS total_surface_area FROM countries WHERE region_id = 3;
SELECT SUM(surface_area) AS total_surface_area FROM Countries WHERE region = 'Caribbean';
SELECT;
SELECT CONTINENT FROM continents WHERE country = 'Anguilla';
SELECT city_info.region FROM city_info WHERE city_info.city = 'Kabul';
SELECT city FROM cities WHERE city = 'Kabul';
SELECT name FROM country_languages cl JOIN country c ON cl.country_code = c.code WHERE cl.percentage > 50 AND c.name = 'Aruba';
SELECT;
SELECT population, life_expectancy FROM your_table_name -- Replace with actual table name WHERE country = 'Brazil';
CREATE TABLE country ( id INT PRIMARY KEY, name VARCHAR(255) ); CREATE TABLE demographics ( id INT PRIMARY KEY, country_id INT, population BIGINT, life_expectancy DECIMAL(3,1), FOREIGN KEY (country_id) REFERENCES country(id) );
SELECT;
SELECT c.name AS country_name, r.name AS region_name, c.population FROM countries c JOIN regions r ON c.region_id = r.id WHERE c.name = 'Angola';
SELECT AVG(expected_life_expectancy) FROM countries WHERE region = 'Central Africa';
SELECT AVG(life_expectancy) AS average_life_expectancy FROM life_expectancy WHERE region = 'Central Africa';
SELECT;
SELECT c.name, le.average_life_expectancy FROM countries AS c JOIN continents AS co ON c.continent_id = co.id JOIN life_expectancy AS le ON c.country_name = le.country_name WHERE co.name = 'Asia' ORDER BY le.average_life_expectancy ASC LIMIT 1;
SELECT SUM(population) AS total_population, MAX(gnp) AS max_gnp FROM countries WHERE continent = 'Asia';
CREATE TABLE People ( id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(50) ); CREATE TABLE Country_GNP ( id INT PRIMARY KEY, country_name VARCHAR(50), gnp DECIMAL(10,2) -- Example GNP value for each country );
SELECT AVG(le.life_expectancy) FROM life_expectancy le JOIN countries co ON le.country_id = co.id JOIN republics rp ON co.id = rp.country_id WHERE co.continent = 'Africa';
SELECT AVG(life_expectancy) FROM world WHERE continent = 'Africa' AND government_form LIKE '%Republic%';
SELECT SUM(surface_area) AS 'Total Surface Area' FROM continents WHERE name IN ('Asia', 'Europe');
SELECT SUM(area) AS total_surface_area FROM countries WHERE continent IN ('Asia', 'Europe');
SELECT;
SELECT SUM(population) FROM cities WHERE city IN ('Arnhem', 'Nijmegen', 'Zwolle');
SELECT;
SELECT AVG(gnp) AS avg_gnp, SUM(population) / COUNT(*) AS mean_population FROM nation WHERE status = 'US Territory';
SELECT COUNT(DISTINCT language) FROM (SELECT 'English' AS language UNION SELECT 'Spanish' UNION SELECT 'Mandarin Chinese' UNION SELECT 'Arabic' UNION SELECT 'French') AS T;
SELECT;
SELECT;
SELECT COUNT(DISTINCT government_form) AS num_government_forms FROM world_bank.governance; WHERE region = 'Africa';
SELECT COUNT(*) FROM language WHERE country = 'Aruba';
CREATE TABLE countries ( country_name VARCHAR(255), num_languages INT );
SELECT;
SELECT;
SELECT;
SELECT;
SELECT c.name, COUNT(l.num_languages) as "language_count" FROM Continents c JOIN Africa a ON c.id = a.id GROUP BY c.name UNION ALL SELECT c.name, COUNT(l.num_languages) as "language_count" FROM Continents c JOIN Asia a ON c.id = a.id GROUP BY c.name UNION ALL SELECT c.name, COUNT(l.num_languages) as "language_count" FROM Continents c JOIN Europe a ON c.id = a.id GROUP BY c.name UNION ALL SELECT c.name, COUNT(l.num_languages) as "language_count" FROM Continents c JOIN NorthAmerica a ON c.id = a.id GROUP BY c.name UNION ALL SELECT c.name, COUNT(l.num_languages) as "language_count" FROM Continents c JOIN SouthAmerica a ON c.id = a.id GROUP BY c.name UNION ALL SELECT c.name, COUNT(l.num_languages) as "language_count" FROM Continents c JOIN Australia a ON c.id = a.id GROUP BY c.name;
-- Let's assume our tables are as follows: CREATE TABLE continents ( id INT PRIMARY KEY, name VARCHAR(50) ); CREATE TABLE languages_by_continent ( language_id INT, continent_id INT, FOREIGN KEY (language_id) REFERENCES languages(id), FOREIGN KEY (continent_id) REFERENCES continents(id) ); -- Now, let's calculate which continent speaks the most languages. SELECT c.name AS 'Continent', COUNT(lbc.continent_id) AS 'Number of Languages' FROM continents c JOIN languages_by_continent lbc ON c.id = lbc.continent_id GROUP BY c.id ORDER BY COUNT(lbc.continent_id) DESC LIMIT 1;
SELECT COUNT(*) FROM countries_languages AS cl1 JOIN countries_languages AS cl2 ON cl1.country = cl2.country WHERE cl1.language = 'English' AND cl2.language = 'Dutch';
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT region FROM your_table WHERE language = 'English' OR language = 'Dutch';
SELECT region_name FROM language WHERE spoken_language = 'Dutch' OR spoken_language = 'English';
SELECT;
SELECT;
SELECT language FROM language_popularity WHERE continent = 'Asia' ORDER BY popularity DESC LIMIT 1;
SELECT;
SELECT;
SELECT;
SELECT city, MAX(population) as max_population FROM cities WHERE language = 'English';
SELECT c.city, c.population FROM cities c JOIN languages l ON c.id = l.city_id -- Assuming language info is linked to city by id in the 'languages' table. WHERE l.language = 'English' ORDER BY c.population DESC LIMIT 1;
CREATE TABLE countries ( name VARCHAR(255), population INT, expected_life_length INT, area INT );
CREATE TABLE countries ( name VARCHAR(255), population INTEGER, life_expectancy REAL, land_area INTEGER );
SELECT AVG(life_expectancy) FROM countries c WHERE c.is_official_language = 'no' AND c.language IS NULL;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT c.name AS african_country, p.population AS african_population FROM countries c JOIN population p ON c.name = p.country WHERE c.region = 'Africa' ORDER BY african_population;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT DISTINCT city FROM table_name -- replace with actual table name WHERE country = 'Asian' AND language = 'Chinese';
SELECT;
SELECT;
SELECT Name, CASE WHEN Year_of_Independence IS NULL THEN 'Not Available' ELSE Year_of_Independence END AS Year_of_Independence, Surface_Area FROM Countries ORDER BY Population ASC LIMIT 1;
SELECT;
CREATE TABLE countries ( name VARCHAR(255), population INT, head_of_state VARCHAR(255), area INT );
SELECT country_name, COUNT(language) AS num_languages FROM countries GROUP BY country_name HAVING COUNT(language) >= 3;
SELECT name, COUNT(language) AS num_languages FROM countries GROUP BY name HAVING COUNT(language) > 2;
SELECT d.name AS district_name, COUNT(c.id) AS num_cities_above_avg_pop FROM cities c JOIN districts d ON c.district_id = d.id GROUP BY d.name HAVING AVG(c.population) > (SELECT AVG(population) FROM cities);
SELECT d.`District Name`, COUNT(c.`City`) AS count FROM cities c JOIN districts d ON c.`District ID` = d.`District ID` GROUP BY d.`District Name` HAVING AVG(c.Population) > (SELECT AVG(Population) FROM cities);
SELECT;
SELECT Government_Form, COUNT(DISTINCT Population) AS Total_Population FROM Your_Table_Name WHERE Average_Life_Expectancy > 72 GROUP BY Government_Form;
SELECT AVG(life_expectancy) AS avg_life_expectancy, SUM(population) AS total_population, continent FROM your_table_name (replace with the actual name of your table) GROUP BY continent HAVING AVG(life_expectancy) < 72;
SELECT continent, COUNT(*) AS population_count, AVG(life_expectancy) AS avg_life_expectancy FROM world_population GROUP BY continent HAVING AVG(life_expectancy) < 72;
SELECT name, area FROM countries ORDER BY area DESC LIMIT 5;
SELECT name, surfacearea FROM world ORDER BY surfacearea DESC LIMIT 5;
SELECT country_name, population FROM countries ORDER BY population DESC LIMIT 3;
SELECT name FROM countries ORDER BY population DESC LIMIT 3;
SELECT;
SELECT name FROM world ORDER BY population ASC LIMIT 3;
CREATE TABLE countries ( id INT PRIMARY KEY, name VARCHAR(50), continent VARCHAR(20) );
SELECT;
SELECT;
SELECT name FROM countries WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(population) AS total_population, AVG(area) AS average_area FROM countries WHERE continent = 'North America' AND area > 3000;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT l.LanguageName, COUNT(DISTINCT lc.CountryCode) AS NumberOfCountries FROM Languages l JOIN Language_Countries lc ON l.LanguageID = lc.LanguageID GROUP BY l.LanguageName ORDER BY NumberOfCountries DESC;
SELECT c.name AS Country, l.name AS Language, COUNT(p.id) / COUNT(DISTINCT c.id) AS Percentage FROM countries c JOIN languages l ON ST_Intersects(c.geometry, l.geometry) JOIN place_language pl ON ST_Intersects(c.geometry, pl.geometry) JOIN language_percentage p ON l.id = p.language_id AND ST_Intersects(c.geometry, p.geometry) GROUP BY c.name, l.name ORDER BY c.name;
SELECT country_code, language FROM world ORDER BY population DESC;
SELECT COUNT(country) AS total_countries FROM world WHERE spanish_percentage > 50;
SELECT;
SELECT;
SELECT;
SELECT COUNT(*) AS Total_Conductors FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT T2.Record_Company, T1.Year_of_Founded FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Orchestra_ID IN (SELECT Orchestra_ID FROM performance) ORDER BY T1.Year_of_Founded DESC;
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(T2.Attendance) FROM show AS T1 INNER JOIN performance AS T2 ON T1.Performance_ID = T2.Performance_ID;
SELECT AVG(Attendance) FROM show;
SELECT;
SELECT MAX(Official_ratings_(millions)) AS max_share, MIN(Official_ratings_(millions)) AS min_share FROM performance WHERE Type != 'Live final';
SELECT;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT;
SELECT c.Name AS Conductor_Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT DISTINCT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1;
SELECT Name FROM conductor c JOIN ( SELECT Conductor_ID, COUNT(*) as num_orchestras FROM orchestra GROUP BY Conductor_ID ORDER BY num_orchestras DESC ) o ON c.Conductor_ID = o.Conductor_ID WHERE num_orchestras = ( SELECT MAX(num_orchestras) FROM ( SELECT COUNT(*) as num_orchestras FROM orchestra GROUP BY Conductor_ID ) t );
SELECT;
SELECT Name FROM conductor WHERE Conductor_ID IN ( SELECT Conductor_ID FROM orchestra WHERE Year_of_Founded > 2008 );
SELECT T1.`Record_Company`, COUNT(T2.`Orchestra_ID`) AS Number_of_Orchestras FROM `orchestra` T1 JOIN `performance` T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` GROUP BY T1.`Record_Company`;
SELECT T2.Record_Company AS Record_Company, COUNT(T2.Orchestra_ID) AS Number_Of_Orchestras FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Record_Company;
SELECT;
SELECT;
SELECT Record_Company, COUNT(*) as Count FROM orchestra GROUP BY Record_Company ORDER BY Count DESC;
SELECT;
SELECT T2.Orchestra FROM performance AS T1 RIGHT JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Performance_ID IS NULL;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance );
SELECT DISTINCT T2.Record_Company FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE YEAR(T1.Year_of_Founded) < 2003 AND T1.Orchestra IN ( SELECT Orchestra FROM orchestra WHERE YEAR(Year_of_Founded) >= 2003 )
SELECT T.record_company FROM ( SELECT DISTINCT orchestra, Record_Company AS record_company, CASE WHEN Year_of_Founded < 2003 THEN 'Before 2003' ELSE 'After 2003' END AS group_year FROM "orchestra" ) T GROUP BY group_year;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT;
SELECT;
SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Orchestra_ID IN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(Performance_ID) > 1 )
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) AS num_highschoolers FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(ID) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT grade, COUNT(*) as num_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) as num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC;
SELECT grade, COUNT(*) as total_high_schoolers FROM Highschooler GROUP BY grade ORDER BY total_high_schoolers DESC;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT ID, COUNT(student_id) AS num_friends FROM Friend GROUP BY ID;
SELECT H.name, COUNT(F.student_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;
SELECT H.name, COUNT(F.student_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.name;
SELECT name, COUNT(*) as num_friends FROM Highschooler INNER JOIN Friend ON Highschooler.ID = Friend.student_id OR Highschooler.ID = Friend.friend_id GROUP BY name;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id ) f ON h.ID = f.student_id ORDER BY f.friend_count DESC LIMIT 1;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(DISTINCT friend_id) >= 3 );
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 3 );
SELECT name FROM Highschooler WHERE ID IN ( SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle') );
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle') UNION SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE friend_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(DISTINCT friend_id) FROM Friend WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend );
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) OR ID NOT IN (SELECT friend_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT H.ID FROM Highschooler H WHERE H.ID IN ( SELECT F.student_id FROM Friend F GROUP BY F.student_id HAVING COUNT(DISTINCT F.friend_id) > 1 ) AND H.ID IN ( SELECT L.student_id FROM Likes L GROUP BY L.student_id HAVING COUNT(DISTINCT L.liked_id) > 1 );
SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) > 1) INTERSECT SELECT name FROM Highschooler WHERE ID IN ( SELECT liked_id FROM Likes WHERE student_id != liked_id);
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT student_id FROM Likes);
SELECT student_id, COUNT(*) as like_count FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id;
SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.name;
SELECT h.name, COUNT(l.liked_id) as num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id OR h.ID = l.liked_id GROUP BY h.name;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2;
SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2);
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 );
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 );
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(H.grade) AS avg_grade FROM Highschooler H WHERE H.ID IN ( SELECT F.student_id FROM Friend F GROUP BY F.student_id HAVING COUNT(*) > 0 );
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id;
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT MIN(H.grade) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.grade HAVING COUNT(F.student_id) IS NULL;
SELECT;
SELECT;
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT dog_id, date_of_birth FROM Dogs;
CREATE TABLE Professionals ( `professional_id` INT, `last_name` VARCHAR(255), `cell_phone` CHAR(10), PRIMARY KEY(`professional_id`) ); CREATE TABLE States ( `state_id` INT, `name` VARCHAR(50), PRIMARY KEY(`state_id`) );
SELECT;
SELECT;
SELECT;
SELECT;
SELECT dog_id FROM Treatments;
CREATE TABLE Professionals ( professional_id INT PRIMARY KEY, email VARCHAR(255) NOT NULL, role ENUM('Vet', 'Trainer') ); CREATE TABLE Dogs ( dog_id INT PRIMARY KEY ); CREATE TABLE Treatments ( treatment_id INT PRIMARY KEY, dog_id INT NOT NULL, professional_id INT NOT NULL, treatment_type_code CHAR(4), date_of_treatment DATETIME NOT NULL, cost_of_treatment DECIMAL(5,4) NOT NULL, FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id) );
SELECT;
+---------+-----------+ | OwnerID | DogID | +---------+-----------+ | 1 | 10 | | 1 | 15 | | 2 | 14 | | 3 | 9 | | ... | ... | +---------+-----------+
SELECT dog_id FROM Treatments WHERE treatment_type_code IN ('EXAM', 'VAC');
SELECT P.`role`, P.first_name, T.professional_id FROM Treatments AS T JOIN Professionals AS P ON T.professional_id = P.professional_id GROUP BY T.professional_id, P.role, P.first_name HAVING COUNT(T.treatment_id) >= 2;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT T2.professional_id, T2.cell_phone FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T2.professional_id, T2.cell_phone HAVING COUNT(DISTINCT T1.treatment_type_code) >= 2;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (1, 'Sofia', 'Miller', 'Bella'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (2, 'Jessica', 'Davis', 'Daisy'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (3, 'Lily', 'White', 'Charlie'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (4, 'Emily', 'Taylor', 'Ginger'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (5, 'Mia', 'Harris', 'Luna'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (6, 'Isabella', 'Thomas', 'Coco'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (7, 'Charlotte', 'Brown', 'Max'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (8, 'Harper', 'Jones', 'Rocky'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (9, 'Evelyn', 'Martin', 'Buddy'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (10, 'Abigail', 'Garcia', 'Lucy'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (11, 'Emily', 'Lee', 'Simba'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (12, 'Sofia', 'Gonzalez', 'Toby'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (13, 'Jessica', 'Hall', 'Molly'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (14, 'Lily', 'Anderson', 'Honey'); INSERT INTO Dogs (`dog_id`, `owner_first_name`, `owner_last_name`, `dog_name`) VALUES (15, 'Mia', 'White', 'Rocky');
SELECT o.first_name, d.name FROM owners AS o JOIN treatments ON o.owner_id = treatments.dog_id JOIN dogs AS d ON treatments.dog_id = d.id;
SELECT T1.date_of_treatment AS 'Treatment Date' FROM Treatments T1 WHERE T1.dog_id = ( SELECT MIN(dog_id) FROM Treatments );
SELECT;
SELECT;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE o.address = 'VA';
SELECT MIN(`date_of_treatment`) AS earliest_date, MAX(`date_of_treatment`) AS latest_date FROM Treatments;
SELECT D.arrival_date AS arriving_date, D.departure_date AS departing_date, T.* FROM Treatments T JOIN Dogs D ON T.dog_id = D.dog_id;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments;
SELECT;
SELECT;
SELECT;
SELECT p.role, p.street, p.city, p.state FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.city LIKE '%West%';
SELECT p.professional_role, a.street, a.city, a.state FROM Professionals p JOIN Addresses a ON p.address_id = a.address_id WHERE a.city LIKE '%West%';
SELECT o.first_name, o.last_name, o.email FROM Owners AS o JOIN Treatments as t ON o.owner_id = t.dog_id JOIN Professionals as p ON t.professional_id = p.professional_id JOIN States as s ON p.state_id = s.state_id WHERE s.name LIKE '%North%';
SELECT o.first_name, o.last_name, o.email FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.state LIKE '%North%';
-- Assuming you have a Dogs table as well: CREATE TABLE Dogs ( dog_id INT, name VARCHAR(255), age INT ); INSERT INTO Dogs (`dog_id`, `name`, `age`) VALUES (1, 'Dog1', 2); INSERT INTO Dogs (`dog_id`, `name`, `age`) VALUES (2, 'Dog2', 5); INSERT INTO Dogs (`dog_id`, `name`, `age`) VALUES (3, 'Dog3', 7); -- Average age query SELECT AVG(age) AS average_age FROM Dogs; -- Query to get dogs with age below the average SELECT COUNT(*) as number_of_young_dogs FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT;
SELECT;
SELECT;
SELECT;
SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
SELECT t.dog_id, d.name, d.age, d.weight FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id ORDER BY t.cost_of_treatment DESC LIMIT 1;
SELECT;
SELECT;
SELECT;
CREATE TABLE Dogs ( dog_id INT PRIMARY KEY, name VARCHAR(255), birth_date DATE ); CREATE TABLE Treatments ( treatment_id INT PRIMARY KEY, dog_id INT, professional_id INT, treatment_type_code VARCHAR(10), date_of_treatment DATE, cost_of_treatment DECIMAL(10, 4) );
SELECT;
SELECT;
SELECT;
SELECT;
CREATE TABLE Professionals ( `professional_id` int, `first_name` varchar(100), `last_name` varchar(100), `email` varchar(255), `cell_phone` varchar(20), `home_phone` varchar(20) );
CREATE TABLE PhoneNumbers ( phone_number_id INT PRIMARY KEY, professional_id INT, phone_type_code VARCHAR(20), phone_number VARCHAR(20) );
SELECT;
SELECT;
SELECT P.first_name AS 'Professional Name', TT.type, T.date_of_treatment AS 'Date of Treatment', T.cost_of_treatment AS 'Cost of Treatment' FROM Treatments T JOIN Professionals P ON T.professional_id = P.id LEFT JOIN (SELECT DISTINCT treatment_type_code, 'WALK' as type FROM Treatments UNION SELECT DISTINCT treatment_type_code, 'EXAM' as type FROM Treatments UNION SELECT DISTINCT treatment_type_code, 'VAC' as type FROM Treatments) TT ON T.treatment_type_code = TT.treatment_type_code ORDER BY P.first_name;
SELECT;
SELECT COUNT(*) AS NumberOfSingers FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Net_Worth_Millions FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name, Net_Worth_Millions FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Birth_Year = '1948' OR Birth_Year = '1949';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name, Net_Worth_Millions FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC;
SELECT Citizenship, COUNT(*) as num_singers FROM singer GROUP BY Citizenship ORDER BY num_singers DESC;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT T2.Title, T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID;
SELECT T2.Title, T1.Name AS Singer_Name FROM singer T1 JOIN song T2 ON T1.Singer_ID = T2.Singer_ID;
SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000;
SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;
SELECT T2.Name FROM `song` AS T1 JOIN `singer` AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name HAVING COUNT(T1.Title) > 1;
SELECT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name HAVING COUNT(T1.Song_ID) > 1;
SELECT s.Name, SUM(sg.Sales) AS Total_Sales FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name;
SELECT T2.Name, SUM(T1.Sales) AS Total_Sales FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(*) > 1;
SELECT;
SELECT;
SELECT;
SELECT;
