SELECT count(*) FROM singer;
SELECT count(*) FROM singer;
SELECT name , country , age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age) AS Average_Age, MIN(age) AS Min_Age, MAX(age) AS Max_Age FROM singer WHERE Country = 'France';
SELECT AVG(age) AS Average_Age, MIN(age) AS Min_Age, MAX(age) AS Max_Age FROM singer WHERE Country = 'France';
SELECT s.Name, sc.Song_Name, sc."Song_release_year" FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID JOIN song sc ON sic.concert_ID = sc.concert_ID WHERE s.Age = (SELECT MIN(age) FROM singer)
SELECT s.Name AS Song_Name, sc.Song_release_year FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) as Number_of_singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Total_Singers FROM singer GROUP BY Country;
SELECT T2.Song_Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer )
SELECT T2.song_name FROM singer AS T1 JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID JOIN singer AS T2 ON T3.Singer_ID = T2.Singer_ID WHERE T1.Age > (SELECT AVG(age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity) AS Max_Capacity, AVG(Average) AS Average_Average FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Max_Capacity FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium );
SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;
SELECT COUNT(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015';
SELECT COUNT(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015';
SELECT s.Name, COUNT(c.concert_Name) AS Number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name;
SELECT s.Stadium_ID, COUNT(c.concert_ID) AS num_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Stadium_ID;
SELECT s.Name, s.Capacity FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(*) as Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC;
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL;
SELECT Country FROM singer WHERE Age > 40 OR Age < 30;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE YEAR = '2014' )
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = '2014' WHERE c.concert_ID IS NULL;
SELECT c.concert_Name, c.Theme, COUNT(si.Singer_ID) AS Number_of_singers FROM concert c JOIN singer_in_concert si ON c.concert_ID = si.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(si.Singer_ID) AS Number_of_singers FROM concert c JOIN singer_in_concert si ON c.concert_ID = si.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name;
SELECT s.Name, COUNT(ci.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert ci ON s.Singer_ID = ci.Singer_ID GROUP BY s.Name;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE c.Year = '2014';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT Name, Country FROM singer WHERE Singer_ID IN ( SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN ( SELECT concert_ID FROM concert WHERE concert_Name LIKE '%Hey%' ) )
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location;
SELECT s.Name, s.Location FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location
SELECT COUNT(concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT count(*) FROM pets WHERE weight > 10;
SELECT weight FROM pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(DISTINCT h.StuID) FROM Has_Pet h JOIN Pets p ON h.PetID = p.PetID JOIN Student s ON h.StuID = s.StuID WHERE p.PetType = 'dog' AND s.Sex = 'F';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog') )
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) )
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) )
SELECT Major, Age FROM Student s WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet hp JOIN Pets p ON hp.PetID = p.PetID WHERE PetType = 'cat' );
SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType != 'cat';
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetType = 'cat' );
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') );
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND P.PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) AND StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) ) )
SELECT PetType, weight FROM pets ORDER BY pet_age LIMIT 1;
SELECT PetType, weight FROM pets WHERE pet_age = 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
SELECT S.StuID, COUNT(P.PetID) AS NumPets FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID GROUP BY S.StuID;
SELECT StuID, COUNT(*) AS num_pets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY StuID;
SELECT Fname, Sex FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1;
SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 )
SELECT LName FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3 )
SELECT LName FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3 )
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT count(*) FROM CONTINENTS;
SELECT count(*) FROM CONTINENTS;
SELECT T1.ContId, T1.Continent, COUNT(T2.CountryName) AS NumCountries FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent;
SELECT T1.ContId, T1.Continent, COUNT(T2.CountryName) AS CountryCount FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent;
SELECT count(*) FROM COUNTRIES;
SELECT count(*) FROM COUNTRIES;
SELECT T1.Maker, T1.FullName, count(*) AS ModelCount FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker, T1.FullName;
SELECT count(*) FROM CONTINENTS;
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower = ( SELECT MIN(Horsepower) FROM cars_data );
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower = ( SELECT MIN(Horsepower) FROM cars_data );
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Weight < ( SELECT AVG(Weight) FROM cars_data );
SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model WHERE T2.Weight < ( SELECT AVG(T3.Weight) FROM cars_data AS T3 );
SELECT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Country = T2.Id WHERE T2.Year = 1970;
SELECT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Country = T2.Id WHERE T2.Year = 1970 GROUP BY T1.Maker;
SELECT T1.Maker, T2.Year, T3.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN car_makers AS T3 ON T1.Model IN (SELECT Model FROM model_list WHERE Maker = T3.Id) WHERE T2.Year = (SELECT MIN(Year) FROM cars_data);
SELECT T1.Maker, T2.CountryName, MIN(T3.Year) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN car_makers AS T3 ON T1.Make = T3.Maker GROUP BY T1.Maker, T2.CountryName;
SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Year > 1980);
SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year >= 1980;
SELECT T1.Continent, count(*) AS Count FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN CAR_MAKERS AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;
SELECT T1.Continent, count(DISTINCT T3.Country) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN CAR_MAKERS AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent;
SELECT T1.CountryName , count(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(*) DESC LIMIT 1;
SELECT T2.CountryName, COUNT(T1.Id) AS CountOfCarMakers FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryName ORDER BY CountOfCarMakers DESC LIMIT 1;
SELECT COUNT(*) AS ModelCount, C.Maker, C.FullName FROM model_list M JOIN car_makers C ON M.Maker = C.Id GROUP BY C.Maker, C.FullName;
SELECT C.Maker, C.FullName, COUNT(M.Model) AS NumModels FROM car_makers C JOIN model_list M ON C.Id = M.Maker GROUP BY C.Maker, C.FullName;
SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'AMC Hornet Sportabout (SW)';
SELECT T1.Accelerate FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'AMC Hornet Sportabout (SW)';
SELECT COUNT(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';
SELECT COUNT(T3.CountryName) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';
SELECT COUNT(DISTINCT T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'USA';
SELECT COUNT(T3.Model) FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryName = 'United States';
SELECT AVG(T1.MPG) FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Cylinders = 4;
SELECT AVG(T3.MPG) FROM CARS_DATA AS T3 JOIN CAR_NAMES AS T2 ON T3.Id = T2.MakeId WHERE T3.Cylinders = 4;
SELECT MIN(T1.Weight) FROM cars_data AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id AND T1.Year < T2.Year WHERE T1.Cylinders = 8 AND T1.Year = 1974;
SELECT MIN(T1.Weight) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 AND T2.Model IN ( SELECT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE Country IN ( SELECT CountryName FROM countries WHERE Continent IN ( SELECT ContId FROM continents WHERE Continent = 'Asia' ) ) ) ) AND T1.Year = 1974;
SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;
SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;
SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING count(*) > 0;
SELECT T1.CountryName , T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country;
SELECT count(*) FROM cars_data WHERE Horsepower > '150';
SELECT count(*) FROM cars_data WHERE Horsepower > '150';
SELECT YEAR, AVG(Weight) AS Average_Weight FROM CARS_DATA GROUP BY YEAR;
SELECT YEAR, AVG(Weight) AS Average_Weight, AVG(Id) AS Average_Car_ID FROM cars_data GROUP BY YEAR;
SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country WHERE T1.Continent = (SELECT ContId FROM CONTINENTS WHERE Continent = 'Europe') GROUP BY T1.CountryName HAVING count(*) >= 3;
SELECT T2.CountryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T2.CountryName, T1.Continent HAVING COUNT(DISTINCT T3.Maker) >= 3 AND T1.Continent LIKE 'Europe';
SELECT MAX(T4.Horsepower), T5.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId JOIN MODEL_LIST AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id JOIN car_names AS T5 ON T2.MakeId = T5.MakeId WHERE T1.Cylinders = 3;
SELECT T1.Make, MAX(T2.Horsepower) AS MaxHorsepower FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Cylinders = 3 GROUP BY T1.Make;
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id GROUP BY T1.Model ORDER BY MAX(T2.MPG) DESC LIMIT 1;
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = ( SELECT MAX(MPG) FROM cars_data );
SELECT AVG(T1.Horsepower) FROM CARS_DATA AS T1 WHERE T1.Year < 1980;
SELECT AVG(T1.Horsepower) FROM CARS_DATA AS T1 WHERE T1.Year < 1980;
SELECT AVG(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo';
SELECT AVG(T3.Edispl) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T2.Model = T3.Model WHERE T1.Maker = 'Volvo';
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT C1.Cylinders, MAX(C2.Accelerate) AS Max_Accelerate FROM cars_data C1 JOIN cars_data C2 ON C1.Cylinders = C2.Cylinders GROUP BY C1.Cylinders;
SELECT T1.Model, COUNT(T2.MakeId) AS NumVersions FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY NumVersions DESC;
SELECT T1.Model, count(*) as num_versions FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY num_versions DESC LIMIT 1;
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 4;
SELECT count(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = 1980;
SELECT COUNT(T3.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company';
SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'American Motor Company';
SELECT T1.Maker, T1.FullName, count(*) as ModelCount FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker, T1.FullName HAVING count(*) > 3;
SELECT car_makers.Id AS MakerId, car_makers.Maker AS MakerName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(model_list.Model) > 3;
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE (C.FullName = 'General Motors' OR C.Country IN ( SELECT CountryName FROM countries WHERE Weight > 3500 ))
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE (C.Maker = 'General Motors' OR C.Weight > 3500);
SELECT DISTINCT Year FROM CARS_DATA WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM CARS_DATA WHERE Weight < 4000 OR Weight > 3000;
SELECT T1.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Accelerate = ( SELECT MAX(Accelerate) FROM cars_data );
SELECT T1.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE (T1.Accelerate, T1.Id) IN ( SELECT T3.Accelerate, T3.Id FROM cars_data AS T3 JOIN car_names AS T4 ON T3.Id = T4.MakeId GROUP BY T3.Accelerate ORDER BY T3.Accelerate DESC LIMIT 1 )
SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'Volvo' ORDER BY T1.Accelerate ASC LIMIT 1;
SELECT T1.Model, T2.Cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = 'Volvo' GROUP BY T1.Model, T2.Cylinders ORDER BY T2.Accelerate ASC LIMIT 1;
SELECT COUNT(*) FROM cars_data AS T1 WHERE T1.Accelerate > (SELECT MAX(Horsepower) FROM car_names);
SELECT COUNT(*) FROM cars_data AS T1 WHERE T1.Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT T1.CountryName , count(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName HAVING count(*) > 2;
SELECT T1.CountryName , count(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName HAVING COUNT(T2.Id) > 2;
SELECT count(*) FROM CARS_DATA WHERE Cylinders > 6;
SELECT count(*) FROM cars_data WHERE Cylinders > 6;
SELECT T1.Model, MAX(T2.Horsepower) AS MaxHorsepower FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T2.Id = T3.MakeId WHERE T3.Cylinders = 4 GROUP BY T1.Model;
SELECT T1.Model, MAX(T2.Horsepower) AS MaxHorsepower FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T2.Country = T3.CountryId AND T3.Cylinders = 4 GROUP BY T1.Model;
SELECT cn.MakeId, cn.Make FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3;
-- Step 1: Find the minimum horsepower among all cars SELECT MIN(Horsepower) FROM cars_data; -- Let's assume the result of this query is '100' (this value may vary based on your data) -- Step 2: Select the MakeId and Model from the car_names table where the horsepower is greater than or equal to the minimum horsepower found in step 1 AND Cylinders < 4 SELECT T1.MakeId, T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower >= '100' AND T2.Cylinders < 4;
SELECT MAX(T1.MPG) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 OR T1.Year < 1980;
SELECT MAX(T3.MPG) FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE (T1.Cylinders = 8 OR T1.Year < 1980);
SELECT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'Ford Motor Company' AND T1.Edispl < 3500;
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE C.Maker != 'Ford' AND M.Model IN ( SELECT Model FROM cars_data WHERE Weight < 3500 );
SELECT T1.CountryName FROM COUNTRIES AS T1 LEFT JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country WHERE T2.Country IS NULL;
SELECT T1.CountryName FROM COUNTRIES AS T1 LEFT JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country WHERE T2.Country IS NULL;
SELECT C.Id, C.Maker FROM car_makers AS C JOIN model_list AS M ON C.Id = M.Maker GROUP BY C.Id, C.Maker HAVING COUNT(M.Model) >= 2 AND COUNT(DISTINCT C.Maker) > 3;
SELECT C.Id, C.Maker FROM car_makers AS C JOIN model_list AS M ON C.Id = M.Maker GROUP BY C.Id, C.Maker HAVING COUNT(M.Model) >= 2 AND (SELECT COUNT(*) FROM car_names WHERE MakeId IN (SELECT ModelId FROM model_list WHERE Maker = C.Id)) > 3;
SELECT T1.CountryId, T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country WHERE (T2.Maker IN (SELECT Maker FROM MODEL_LIST WHERE Model = 'Fiat')) OR (COUNT(T2.Id) > 3) GROUP BY T1.CountryId, T1.CountryName;
SELECT T1.CountryId, T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country WHERE (T2.Maker IN ('Fiat')) OR (COUNT(T2.Id) > 3) GROUP BY T1.CountryId
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) AS NumberOfAirports FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(uid) FROM AIRLINES WHERE Country = 'USA';
SELECT COUNT(uid) FROM AIRLINES WHERE Country = 'USA';
SELECT a.City, a.Country FROM airports AS a WHERE a.AirportName = "Alton"
SELECT a.City, a.Country FROM airports AS a WHERE a.AirportCode = 'Alton' /* Assuming Alton is the airport code for the Alton airport */
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(DestAirport) FROM flights WHERE DestAirport = 'ABZ';
SELECT COUNT(*) FROM flights AS f JOIN airports AS sa ON f.SourceAirport = sa.AirportCode JOIN airports AS da ON f.DestAirport = da.AirportCode WHERE sa.City = 'Aberdeen' AND da.City = 'Ashley';
SELECT COUNT(*) FROM flights AS f JOIN airports AS sa ON f.SourceAirport = sa.AirportCode JOIN airports AS da ON f.DestAirport = da.AirportCode WHERE sa.City = 'Aberdeen' AND da.City = 'Ashley';
SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = "JetBlue Airways";
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE Airline = 'United Airlines' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = "United Airlines") AND DestAirport = "ASY";
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE f.Airline = ( SELECT uid FROM airlines WHERE Airline = 'United Airlines' ) AND a.AirportName = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode JOIN airlines AS al ON f.Airline = al.uid WHERE al.Airline = 'United Airlines' AND (a.City = 'Aberdeen' OR a.City = 'aberdeen')
SELECT COUNT(*) FROM flights WHERE Airline = "United Airlines" AND DestAirport = "Aberdeen";
SELECT SourceAirportCity FROM ( SELECT a.City AS SourceAirportCity, COUNT(*) as count FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ) t ORDER BY count DESC LIMIT 1;
SELECT City, COUNT(*) AS Frequency FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights) GROUP BY City ORDER BY Frequency DESC;
SELECT SourceAirportCity FROM ( SELECT a.City AS SourceAirportCity, COUNT(*) as count FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ) t ORDER BY count DESC LIMIT 1;
SELECT SourceAirport, COUNT(*) as Frequency FROM flights GROUP BY SourceAirport ORDER BY Frequency DESC;
SELECT SourceAirport, COUNT(*) as FlightCount FROM flights GROUP BY SourceAirport ORDER BY FlightCount DESC LIMIT 1;
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT SourceAirport, COUNT(*) as FlightCount FROM flights GROUP BY SourceAirport ORDER BY FlightCount ASC LIMIT 1;
SELECT Airline, COUNT(*) as FlightCount FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT Airline, COUNT(*) AS FlightCount FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY Airline ORDER BY FlightCount DESC;
SELECT A.Abbreviation, A.Country FROM airlines AS A JOIN ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) AS F ON A.uid = F.Airline WHERE F.FlightCount = ( SELECT MIN(FlightCount) FROM ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) );
SELECT A.Abbreviation, A.Country FROM airlines A JOIN ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) F ON A.uid = F.Airline WHERE F.FlightCount = ( SELECT MIN(FlightCount) FROM ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) );
SELECT DISTINCT A.Airline FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline WHERE F.SourceAirport = 'AHD';
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'AHD';
SELECT DISTINCT A.Airline FROM flights F JOIN airports D ON F.DestAirport = D.AirportCode JOIN airlines A ON F.Airline = A.uid WHERE D.AirportName = 'AHD';
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD';
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE (T2.SourceAirport = 'APG' AND T2.DestAirport = 'CVO') OR (T2.SourceAirport = 'CVO' AND T2.DestAirport = 'APG');
SELECT DISTINCT A.Airline FROM airlines AS A JOIN flights AS F1 ON A.uid = F1.Airline JOIN flights AS F2 ON A.uid = F2.Airline WHERE F1.SourceAirport = 'APG' AND F2.SourceAirport = 'CVO'
SELECT DISTINCT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.SourceAirport NOT IN ( SELECT SourceAirport FROM FLIGHTS WHERE DestAirport = 'APG' );
SELECT DISTINCT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.SourceAirport != 'APG'
SELECT A.Airline, COUNT(F.FlightNo) AS FlightCount FROM airlines A JOIN flights F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) >= 10;
SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline HAVING COUNT(T1.FlightNo) >= 10;
SELECT A.Airline FROM AIRLINES A JOIN ( SELECT Airline, COUNT(*) AS FlightCount FROM FLIGHTS GROUP BY Airline ) F ON A.uid = F.Airline WHERE F.FlightCount < 200;
SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline HAVING COUNT(*) < 200;
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = "United Airlines");
SELECT DISTINCT FlightNo FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = "United Airlines");
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = "APG";
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT AirportCode FROM airports WHERE City = 'Aberdeen';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT AirportCode FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(DISTINCT FlightNo) FROM flights JOIN airports ON SourceAirport = AirportCode WHERE City IN ('Aberdeen', 'Abilene');
SELECT COUNT(DISTINCT FlightNo) FROM flights JOIN airports ON DestAirport = AirportCode WHERE City IN ('Aberdeen', 'Abilene');
SELECT AirportName FROM airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights );
SELECT A.City, A.AirportName FROM airports A LEFT JOIN flights F ON A.AirportCode = F.SourceAirport OR A.AirportCode = F.DestAirport WHERE F.SourceAirport IS NULL AND F.DestAirport IS NULL;
SELECT count(*) FROM employee
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) as Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) FROM employee e1 JOIN employee e2 ON e1.City = e2.City AND e1.Age < 30 AND e2.Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT e1.City FROM employee e1 JOIN employee e2 ON e1.City = e2.City AND e1.Employee_ID != e2.Employee_ID WHERE e1.Age < 30 AND e2.Age < 30;
SELECT Location, COUNT(*) as Number_of_shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) as Number_of_shops FROM shop GROUP BY Location;
SELECT Manager_name, District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT Manager_name, District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.Name, COUNT(ee.Employee_ID) as Total_Awards FROM evaluation ee JOIN employee e ON ee.Employee_ID = e.Employee_ID GROUP BY e.Name ORDER BY Total_Awards DESC LIMIT 1;
SELECT e.Name FROM evaluation AS e WHERE e.Bonus = ( SELECT MAX(Bonus) FROM evaluation WHERE Bonus IS NOT NULL );
SELECT T1.Name FROM evaluation AS T2 JOIN employee AS T1 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s.Name, COUNT(h.Employee_ID) as num_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY num_employees DESC;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000;
SELECT DISTINCT T2.District FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE (T1.Number_products < 3000 AND T2.Is_full_time = 1) OR (T1.Number_products > 10000 AND T2.Is_full_time = 1);
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT count(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT document_id, document_name, document_description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%';
SELECT document_id, document_name FROM Documents WHERE document_description LIKE '%w%';
SELECT d.Document_ID, t.Template_ID, t.Template_Details AS Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE T.Template_Type_Code = 'PPT';
SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT T.Template_ID, COUNT(D.Document_ID) AS Document_Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT T.Template_ID, TT.Template_Type_Code FROM ( SELECT D.Template_ID, COUNT(*) AS num_documents FROM Documents D GROUP BY D.Template_ID ) T JOIN Templates ON T.Template_ID = Templates.Template_ID JOIN Ref_Template_Types TT ON Templates.Template_Type_Code = TT.Template_Type_Code WHERE T.num_documents = (SELECT MAX(num_documents) FROM ( SELECT D.Template_ID, COUNT(*) AS num_documents FROM Documents D GROUP BY D.Template_ID ) T)
SELECT T.Template_ID, TT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code GROUP BY T.Template_ID, TT.Template_Type_Code ORDER BY COUNT(DISTINCT D.Document_ID) DESC LIMIT 1;
SELECT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(DISTINCT D.Document_ID) > 1;
SELECT DISTINCT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(Template_ID) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS Num_Templates FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT Template_Type_Code, COUNT(Template_ID) AS Num_Templates FROM Templates GROUP BY Template_Type_Code ORDER BY Num_Templates DESC;
SELECT Template_Type_Code, COUNT(Template_ID) AS Count FROM Templates GROUP BY Template_Type_Code ORDER BY Count DESC;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS Template_Count FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code GROUP BY rt.Template_Type_Code HAVING COUNT(t.Template_ID) < 3;
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) AS Template_Count FROM Ref_Template_Types T1 JOIN Templates T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3;
SELECT MIN(T.Version_Number), T.Template_Type_Code FROM Templates AS T GROUP BY T.Template_Type_Code;
SELECT MIN(T.Version_Number) AS Lowest_Version, T.Template_Type_Code FROM Templates T GROUP BY T.Template_Type_Code;
SELECT T.Template_Type_Code, RTT.Template_Type_Description FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE D.Document_Name = 'Data base';
SELECT T.Template_Type_Code FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE D.Document_Name = 'Data base';
SELECT DISTINCT D.document_name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK';
SELECT D.document_name FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = 'BK';
SELECT rt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS Number_Of_Documents FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Num_Documents FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code;
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Document_Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY Document_Count DESC;
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Documents);
SELECT DISTINCT T.Template_Type_Code FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT TTT.Template_Type_Description FROM Templates T JOIN Ref_Template_Types TTT ON T.Template_Type_Code = TTT.Template_Type_Code WHERE TTT.Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT T.Template_Type_Description FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT DISTINCT T.Template_Details FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE RT.Template_Type_Description = 'Presentation';
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE RT.Template_Type_Description = 'Presentation';
SELECT COUNT(*) FROM Paragraphs;
SELECT count(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.document_name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT Paragraph_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT d.document_id, d.document_name, COUNT(p.paragraph_id) AS num_paragraphs FROM Documents d JOIN Paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT D.Document_ID, D.Document_Name, D.Document_Description FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name, D.Document_Description HAVING COUNT(P.Paragraph_ID) >= 2;
SELECT d.document_id, d.document_name FROM Documents d JOIN Paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id, d.document_name ORDER BY COUNT(p.paragraph_id) DESC LIMIT 1;
SELECT D.Document_ID, D.Document_Name FROM Documents D JOIN ( SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) P ON D.Document_ID = P.Document_ID ORDER BY P.Paragraph_Count DESC LIMIT 1;
SELECT Document_ID FROM ( SELECT Document_ID, COUNT(*) AS Num_Paragraphs FROM Paragraphs GROUP BY Document_ID ) AS Subquery WHERE Num_Paragraphs = (SELECT MIN(Num_Paragraphs) FROM ( SELECT Document_ID, COUNT(*) AS Num_Paragraphs FROM Paragraphs GROUP BY Document_ID ) AS Subquery)
SELECT Document_ID FROM ( SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) AS Subquery WHERE Paragraph_Count = (SELECT MIN(Paragraph_Count) FROM ( SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) AS Subquery)
SELECT d.document_id, COUNT(p.paragraph_id) AS num_paragraphs FROM Documents d JOIN Paragraphs p ON d.document_id = p.document_id GROUP BY d.document_id HAVING COUNT(p.paragraph_id) BETWEEN 1 AND 2;
SELECT D.Document_ID FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID HAVING COUNT(P.Paragraph_ID) BETWEEN 1 AND 2;
SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland');
SELECT DISTINCT D.Document_ID FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE P.Paragraph_Text LIKE '%Brazil%' OR P.Paragraph_Text LIKE '%Ireland%'
SELECT count(*) FROM teacher;
SELECT count(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY CAST(Age AS INTEGER) ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District' ORDER BY Age ASC;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT MIN(Age) AS Youngest_Age FROM teacher;
SELECT Hometown, COUNT(*) as Number_of_Teachers FROM teacher GROUP BY Hometown ORDER BY Number_of_Teachers DESC;
SELECT Hometown, COUNT(*) AS Count_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID;
SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID;
SELECT T.Name, C.Course FROM course_arrange CA JOIN course C ON CA.Course_ID = C.Course_ID JOIN teacher T ON CA.Teacher_ID = T.Teacher_ID ORDER BY T.Name ASC;
SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID ORDER BY T.Name ASC;
SELECT T.Name FROM course C JOIN course_arrange CA ON C.Course_ID = CA.Course_ID JOIN teacher T ON CA.Teacher_ID = T.Teacher_ID WHERE C."Course" = 'Math'
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c."Course" = 'Math'
SELECT t.Name, COUNT(ca.Course_ID) AS Number_of_courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT T.Name, COUNT(CA.Course_ID) AS Course_Count FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Teacher_ID HAVING COUNT(CA.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN ( SELECT Teacher_ID FROM course_arrange )
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT count(*) FROM visitor WHERE age < 30;
SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT avg(age) FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age ASC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = ( SELECT MAX(Num_of_Staff) FROM museum );
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
SELECT m.Open_Year, m.Num_of_Staff FROM museum AS m WHERE m.Name = 'Plaza Museum';
-- Step 1: Find the minimum staff number of all museums opened after 2010 SELECT MIN(Num_of_Staff) AS MinStaff FROM museum WHERE Open_Year > '2010' -- Step 2: Find the names of museums that have more staff than the minimum staff number found in step 1 SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MinStaff FROM (SELECT MIN(Num_of_Staff) AS MinStaff FROM museum WHERE Open_Year > '2010') t)
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN ( SELECT visitor_ID, COUNT(*) as count FROM visit GROUP BY visitor_ID HAVING COUNT(*) > 1 ) t ON v.ID = t.visitor_ID;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID ORDER BY SUM(vi.Total_spent) DESC LIMIT 1;
SELECT v.ID, m.Name FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY v.Museum_ID ORDER BY COUNT(v.visitor_ID) DESC LIMIT 1;
SELECT m.Name FROM museum AS m LEFT JOIN visit AS v ON m.Museum_ID = v.Museum_ID GROUP BY m.Name HAVING COUNT(v.visitor_ID) = 0;
SELECT v.Name, v.Age FROM visit AS vi JOIN visitor AS v ON vi.visitor_ID = v.ID GROUP BY vi.visitor_ID ORDER BY SUM(vi.Num_of_Ticket) DESC LIMIT 1;
SELECT AVG(Num_of_Ticket) AS Average_tickets, MAX(Num_of_Ticket) AS Maximum_tickets FROM visit;
SELECT SUM(T2.Num_of_Ticket * T1.Total_spent) AS Total_ticket_expense FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1;
SELECT DISTINCT v1.name FROM visitor v1 JOIN visit v2 ON v1.ID = v2.visitor_ID JOIN museum m1 ON v2.Museum_ID = m1.Museum_ID AND m1.Open_Year < '2009' JOIN visit v3 ON v1.ID = v3.visitor_ID JOIN museum m2 ON v3.Museum_ID = m2.Museum_ID AND m2.Open_Year > '2011';
SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID NOT IN ( SELECT Museum_ID FROM museum WHERE Open_Year > '2010' );
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) FROM players;
SELECT count(*) FROM players
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(l.l_1stWon) AS highest_rank_of_losers FROM qualifying_matches l INNER JOIN matches m ON l.loser_id = m.loser_id;
SELECT MAX(loser_rank) AS best_losers_rank FROM matches;
SELECT COUNT(DISTINCT "country_code") FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT t.tourney_name, COUNT(m.match_num) AS total_matches FROM matches m JOIN tournaments t ON m.tourney_id = t.tourney_id GROUP BY t.tourney_name HAVING COUNT(m.match_num) > 10;
SELECT tourney_name, COUNT(*) AS num_matches FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT M.winner_name FROM matches AS M JOIN rankings AS R1 ON M.winner_id = R1.player_id WHERE R1.ranking_date LIKE '2013%' INTERSECT SELECT DISTINCT M.winner_name FROM matches AS M JOIN rankings AS R2 ON M.winner_id = R2.player_id WHERE R2.ranking_date LIKE '2016%';
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.loser_id OR p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id HAVING COUNT(DISTINCT m.year) = 2;
SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;
SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name;
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id WHERE m1.tourney_name = 'WTA Championships' INTERSECT SELECT p.first_name, p.country_code FROM players p JOIN matches m2 ON p.player_id = m2.winner_id WHERE m2.tourney_name = 'Australian Open';
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name, birth_date FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN ( SELECT player_id, MAX(tours) as max_tours FROM rankings GROUP BY player_id ) r ON p.player_id = r.player_id WHERE r.max_tours = (SELECT MAX(max_tours) FROM ( SELECT player_id, MAX(tours) as max_tours FROM rankings GROUP BY player_id ) AS subquery)
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT YEAR, COUNT(*) AS num_matches FROM matches GROUP BY YEAR ORDER BY num_matches DESC;
SELECT p.first_name, p.last_name, m.loser_rank_points AS winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY p.first_name, p.last_name, m.loser_rank_points ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM matches m JOIN players p ON m.winner_id = p.player_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.last_name, r.ranking_points ORDER BY COUNT(m.match_num) DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT l.first_name AS "Loser First Name", l.last_name AS "Loser Last Name", w.first_name AS "Winner First Name", w.last_name AS "Winner Last Name" FROM matches m JOIN players l ON m.loser_id = l.player_id JOIN players w ON m.winner_id = w.player_id ORDER BY m.minutes DESC LIMIT 1;
SELECT winner_name AS "Winner Name", loser_name AS "Loser Name" FROM matches WHERE minutes = ( SELECT MAX(minutes) FROM matches );
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(player_id) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1;
SELECT T2.country_code FROM ( SELECT COUNT(*) as cnt , "country_code" FROM players GROUP BY "country_code" ) AS T1 JOIN players AS T2 ON T1."country_code" = T2."country_code" ORDER BY T1.cnt DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT p.country_code, COUNT(*) AS num_players FROM players p GROUP BY p.country_code HAVING COUNT(*) > 50;
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT YEAR, COUNT(*) FROM matches GROUP BY YEAR;
SELECT YEAR, COUNT(*) AS num_matches FROM matches GROUP BY YEAR;
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_age < (SELECT MIN(winner_age) FROM matches) ORDER BY m.winner_age DESC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_hand) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE p.hand = 'L' AND m.tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE (SELECT MAX(winner_rank_points) FROM matches) = m.winner_rank_points;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.loser_id OR p.player_id = m.winner_id GROUP BY p.player_id ORDER BY SUM(m.winner_rank_points) DESC LIMIT 1;
SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand;
SELECT "hand" AS Hand_Type, COUNT(*) AS Number_of_Players FROM players GROUP BY "hand" ORDER BY Hand_Type;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT D.note, D.killed, D.injured FROM death AS D JOIN ship AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT DISTINCT b.id, b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name, SUM(d.injured) AS total_injuries FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY s.id, s.name ORDER BY total_injuries DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id) FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.tonnage != '225'
SELECT b.name, b.date FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta')
SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT count(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name LIKE '%Math%';
SELECT c.course_name, s.section_description FROM Courses c JOIN Sections s ON c.course_id = s.course_id WHERE c.course_name LIKE '%Math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT D.department_name, D.department_id, COUNT(DP.degree_program_id) AS num_degrees FROM Degree_Programs DP JOIN Departments D ON DP.department_id = D.department_id GROUP BY D.department_name, D.department_id ORDER BY num_degrees DESC;
SELECT D.department_name, D.department_id FROM Departments D JOIN Degree_Programs DP ON D.department_id = DP.department_id GROUP BY D.department_id ORDER BY COUNT(DP.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT `degree_summary_name`) FROM `Degree_Programs`;
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Department_name = 'Engineering';
SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Engineering';
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2 )
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT semester_name, semester_id FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY semester_id ORDER BY COUNT(student_enrolment_id) DESC LIMIT 1;
SELECT s.semester_name, s.semester_id, COUNT(se.student_enrolment_id) AS num_students FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name, s.semester_id ORDER BY num_students DESC;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id AS student_degree_program_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id IN ( SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) >= 2 )
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) >= 2)
SELECT s.first_name, s.middle_name, s.last_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Students s ON se.student_id = s.student_id WHERE dp.degree_summary_name = 'Bachelor'
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT dp.degree_summary_name AS "Program Name", COUNT(se.student_enrolment_id) AS "Number of Enrollments" FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY Number of Enrollments DESC;
SELECT dp.degree_summary_name, COUNT(se.student_id) AS num_students_enrolled FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_students_enrolled DESC;
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS num_students FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_students DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name HAVING COUNT(se.student_enrolment_id) = 0;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name;
SELECT c.course_name, COUNT(*) as enrollment_count FROM Student_Enrolment_Courses sec JOIN Courses c ON sec.course_id = c.course_id GROUP BY c.course_name ORDER BY enrollment_count DESC LIMIT 1;
SELECT c.course_name, COUNT(sec.student_enrolment_id) as num_students FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY num_students DESC;
SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE S.student_id NOT IN (SELECT student_id FROM Student_Enrolment) AND A.state_province_county = 'North Carolina';
SELECT last_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN ( SELECT student_id FROM Student_Enrolment );
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2;
SELECT T.transcript_id, T.transcript_date FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id, T.transcript_date HAVING COUNT(DISTINCT TC.student_course_id) >= 2;
SELECT first_name, middle_name FROM Students WHERE last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = ( SELECT MIN(date_first_registered) FROM Students );
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id IS NOT NULL GROUP BY s.first_name, s.middle_name, s.last_name ORDER BY s.date_first_registered DESC LIMIT 1;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id AND T1.permanent_address_id != T2.address_id;
SELECT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id GROUP BY A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details ORDER BY COUNT(S.student_id) DESC LIMIT 1;
SELECT A.address_id, A.line_1, A.line_2, COUNT(S.student_id) AS num_students FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id GROUP BY A.address_id, A.line_1, A.line_2 ORDER BY num_students DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT T1.transcript_date, T1.other_details FROM Transcripts AS T1 ORDER BY T1.transcript_date ASC LIMIT 1;
SELECT T.transcript_date AS 'Transcript Date', T.other_details AS 'Other Details' FROM Transcripts T ORDER BY T.transcript_date ASC LIMIT 1;
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT COUNT(DISTINCT T1.student_enrolment_id) AS course_enrollment_count, T2.course_id FROM Student_Enrolment_Courses T1 JOIN Courses T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id;
SELECT T1.course_id, COUNT(T2.student_course_id) AS max_enrolment_count, T3.student_enrolment_id FROM Courses T1 JOIN Student_Enrolment_Courses T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_id, T3.student_enrolment_id ORDER BY COUNT(T2.student_course_id) DESC LIMIT 1;
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1;
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT S.semester_name, DP.degree_summary_name FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id;
SELECT degree_program_id FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name LIKE '%Masters%' OR department_name LIKE '%Bachelors%');
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT A.* FROM Addresses AS A JOIN Students AS S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id;
SELECT first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT other_student_details FROM Students ORDER BY other_student_details DESC;
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT first_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY title;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(id) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti" ORDER BY Title;
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');
SELECT Country, COUNT(*) as Count FROM TV_Channel GROUP BY Country ORDER BY Count DESC LIMIT 1;
SELECT Country, COUNT(*) as Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE id = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT T1.Package_Option FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.series_name = 'Sky Radio';
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) as Count FROM TV_Channel GROUP BY Language ORDER BY Count ASC;
SELECT Language, COUNT(*) as Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(*) as Number_of_channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) as Count FROM TV_Channel GROUP BY Language;
SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = "The Rise of the Blue Beetle!";
SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = 'The Rise of the Blue Beetle';
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio' ORDER BY Title;
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM `TV_series`;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = "A Love of a Lifetime";
SELECT T2.Series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime';
SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE series_name = 'Sky Radio';
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = ( SELECT MAX(Original_air_date) FROM Cartoon );
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Written_by = "Todd Casey";
SELECT DISTINCT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey';
SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey';
SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by != 'Todd Casey';
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') ORDER BY T1.series_name;
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') ORDER BY T1.series_name;
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT T1.id FROM TV_Channel AS T1 GROUP BY T1.Country HAVING COUNT(T1.id) > 2;
SELECT id FROM TV_Channel WHERE id IN ( SELECT Channel FROM TV_series GROUP BY Channel HAVING COUNT(Channel) > 2 );
SELECT id FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );
SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );
SELECT count(*) FROM poker_player;
SELECT count(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT MAX(Money_Rank) FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT MAX(Money_Rank) FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);
SELECT p.Name FROM poker_player AS p JOIN people AS pe ON p.People_ID = pe.People_ID;
SELECT Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY Final_Table_Made ASC;
SELECT Birth_Date FROM people WHERE People_ID IN ( SELECT People_ID FROM poker_player ORDER BY Earnings ASC LIMIT 1 )
SELECT T2.Name, T2."Birth_Date" FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings = ( SELECT MIN(Earnings) FROM poker_player );
SELECT Money_Rank FROM poker_player WHERE People_ID IN ( SELECT People_ID FROM people ORDER BY Height DESC LIMIT 1 )
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = ( SELECT MAX(Height) FROM people );
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Earnings DESC;
SELECT p.Name FROM poker_player AS p JOIN people AS pe ON p.People_ID = pe.People_ID ORDER BY p.Earnings DESC;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality, COUNT(DISTINCT People_ID) AS Count FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) > 1;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT count(*) FROM area_code_state
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT v.state, v.created AS "create_time" FROM VOTES v;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name, COUNT(v.vote_id) AS num_votes FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY num_votes ASC LIMIT 1;
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN ( SELECT contestant_number FROM VOTES )
SELECT area_code FROM ( SELECT area_code_state.area_code , COUNT(votes.vote_id) AS total_votes FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ) AS subquery WHERE total_votes = (SELECT MAX(total_votes) FROM ( SELECT area_code_state.area_code , COUNT(votes.vote_id) AS total_votes FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ) AS subquery)
SELECT V.created AS create_date, A.state AS state, V.phone_number AS phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling' ORDER BY V.created DESC;
SELECT DISTINCT v.state FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss')
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Code = 'AI';
SELECT c.Name, c.CountryCode FROM city c WHERE c.Name = 'Kabul';
SELECT Region FROM country WHERE Name = 'Afghanistan';
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1;
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = "Central Africa";
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy = ( SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' )
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NULL OR LifeExpectancy = ( SELECT MIN(LifeExpectancy) FROM country WHERE Continent = 'Asia' )
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia'
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country c1 JOIN country c2 ON c1.Continent = 'Africa' AND c2.GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy) FROM country c1 JOIN country c2 ON c1.Continent = 'Africa' AND c2.GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory';
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country c1 JOIN country c2 ON c1.Code = c2.Code2 WHERE c2.LocalName LIKE '%US territory%';
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT Code FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Name = 'Aruba';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AW';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG'
SELECT COUNT(*) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'
SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY NumLanguages DESC LIMIT 1;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;
SELECT c.Continent, SUM(cl.Percentage) AS TotalLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY TotalLanguages DESC;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY NumLanguages DESC;
SELECT COUNT(*) FROM ( SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING SUM(CASE WHEN Language = 'English' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN Language = 'Dutch' THEN 1 ELSE 0 END) > 0 ) AS countries_speaking_both_languages;
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch')
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T'
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT Name FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' ) OR Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' AND IsOfficial = 'T' );
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) );
SELECT Language, SUM(Percentage) AS TotalPercentage FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY TotalPercentage DESC;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm = "Republic" AND cl.IsOfficial = 'T' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = 1;
SELECT cl.Language, COUNT(*) as Count FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm = "Republic" GROUP BY cl.Language HAVING COUNT(*) = 1;
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, cl.Language, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )
SELECT SUM(c.Population) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'F';
SELECT SUM(c.Population) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English';
SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE HeadOfState = 'Beatrix' )
SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE HeadOfState = 'Beatrix' )
-- Step 1: Find the list of countries that were founded before 1930 SELECT Code FROM country WHERE IndepYear < 1930 -- Step 2: For each country found in step 1, find all its official languages SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) -- Step 3: Count the total number of unique official languages across all countries SELECT COUNT(DISTINCT Language) AS TotalOfficialLanguages FROM ( SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) ) AS OfficialLanguages
SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930;
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country WHERE Region = "Europe" )
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' GROUP BY c.Name HAVING MIN(ci.Population) > ( SELECT MIN(Population) FROM country WHERE Continent = 'Africa' )
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' GROUP BY c.Name HAVING MIN(ci.Population) > ( SELECT MIN(Population) FROM country WHERE Continent = 'Africa' )
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' AND ci.Population > ( SELECT MAX(Population) FROM country WHERE Continent = 'Africa' )
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > ( SELECT MAX(Population) FROM country WHERE Continent = 'Africa' )
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT Code FROM country WHERE Language != 'English' AND GovernmentForm != 'Republic';
SELECT Code FROM country WHERE Language NOT IN ('English') AND GovernmentForm != 'Republic'
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'T' AND (SELECT Continent FROM country WHERE Code = c.CountryCode) = 'Europe'
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language != 'English' AND c.District = 'Europe'
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'Chinese' AND c.Continent = 'Asia';
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = ( SELECT MIN(Population) FROM country );
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = ( SELECT MIN(Population) FROM country );
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country );
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country );
SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) >= 3;
SELECT c.Name, COUNT(cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) AS Number_of_cities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
WITH city_avg AS ( SELECT AVG(Population) as avg_population FROM city ) SELECT c.District, COUNT(*) as num_cities_above_avg FROM city c JOIN city_avg ca ON TRUE WHERE c.Population > ca.avg_population GROUP BY c.District;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72.0 GROUP BY GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS avg_life_expectancy, SUM(Population) AS total_population FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT c1.Code, SUM(c2.Population) AS TotalPopulation, AVG(c2.SurfaceArea) AS AverageSurfaceArea FROM country c1 JOIN country c2 ON c1.Code = c2.Code WHERE c1.Region = 'North America' AND c2.SurfaceArea > 3000 GROUP BY c1.Code;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(*) AS Count FROM countrylanguage GROUP BY Language ORDER BY Count DESC;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.Name, cl.Language, cl.Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' ORDER BY cl.Percentage DESC;
SELECT c.Code AS CountryCode, cl.Language AS Language, MAX(cl.Percentage) AS MaxPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY c.Code;
SELECT COUNT(*) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Spanish' AND countrylanguage.Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' )
SELECT COUNT(*) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' ORDER BY Percentage DESC;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT count(*) FROM conductor
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA' ORDER BY Age ASC;
SELECT Name FROM conductor WHERE Nationality != 'USA' ORDER BY Age ASC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor AS c INNER JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor AS c INNER JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name, COUNT(o.Orchestra_ID) AS Num_Orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY Num_Orchestras DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008 ORDER BY c.Age ASC;
SELECT Record_Company, COUNT(*) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT o.Record_Company, COUNT(DISTINCT o.Orchestra_ID) AS Num_Orchestras FROM orchestra o GROUP BY o.Record_Company;
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC;
SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company, COUNT(*) as Count FROM orchestra GROUP BY Record_Company ORDER BY Count DESC LIMIT 1;
SELECT Record_Company, COUNT(*) as Count FROM orchestra GROUP BY Record_Company ORDER BY Count DESC LIMIT 1;
SELECT T1.Orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Performance_ID IS NULL;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT DISTINCT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Year_of_Founded HAVING COUNT(T1.Performance_ID) > 1;
SELECT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.`Official_ratings_(millions)` > 1;
SELECT COUNT(*) FROM Highschooler;
It seems like you're trying to answer a series of questions about your database schema, but there's no specific question asked in the last part. However, I'll assume you want me to guide through answering "Count the number of high schoolers" which is already demonstrated with an example query. ## Step 1: Understand the task The task is to count the number of high schoolers in the database. ## Step 2: Recall the relevant SQL command To count the number of rows in a table, we use the `SELECT COUNT(*)` command. ## Step 3: Apply the SQL command to the Highschooler table We already have an example query that does this: `SELECT COUNT(*) FROM Highschooler`. The final answer is: There's no specific numerical answer provided as the question was about demonstrating a query. However, if you run the query `SELECT COUNT(*) FROM Highschooler`, it will give you the actual count of high schoolers in your database.
It seems like you're trying to answer a series of questions about your database schema, but there's no specific question for me to solve. However, I'll provide answers based on the examples you've given. ## Step 1: Answering "How many high schoolers are there?" To find out how many high schoolers there are, we simply need to execute the SQL query `SELECT count(*) FROM Highschooler`. This will return a single row with one column containing the total number of rows in the `Highschooler` table. ## Step 2: Answering "Count the number of high schoolers." This is identical to the first question. The answer remains the same as in step 1. ## Step 3: Answering "Show the names and grades of each high schooler." To show the names and grades of each high schooler, we execute the SQL query `SELECT name , grade FROM Highschooler`. This will return a list of rows where each row contains the name and grade of one high schooler. The final answer is: There isn't a specific numerical answer to these questions. The answers are: - How many high schoolers are there? - Answer: A query that returns the count(*) from Highschooler. - Count the number of high schoolers. - Answer: Same as above, a query returning the count(*) from Highschooler. - Show the names and grades of each high schooler. - Answer: A query returning name and grade from Highschooler.
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT grade FROM Highschooler;
INSERT INTO Highschooler (ID, name, grade) VALUES (1, 'Kyle', 11), (2, 'Sarah', 12), (3, 'Tom', 9);
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT grade, COUNT(*) as num_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, count(*) as num_students FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC;
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT H.ID, COUNT(F.student_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;
SELECT H1.name, COUNT(F.student_id) AS num_friends FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.name;
SELECT H.name, COUNT(F.student_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;
SELECT H.name, COUNT(F.student_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.name ORDER BY COUNT(F.friend_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F.friend_id) >= 3;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F.friend_id) >= 3;
SELECT H2.name FROM Friend F JOIN Highschooler H1 ON F.student_id = H1.ID JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'
SELECT F1.name FROM Friend AS F1 JOIN Highschooler AS H1 ON F1.student_id = H1.ID JOIN Highschooler AS H2 ON F1.friend_id = H2.ID WHERE H2.name = 'Kyle';
SELECT COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id OR h.ID = f.friend_id WHERE h.name = 'Kyle';
SELECT COUNT(*) FROM Friend WHERE student_id = 1;
SELECT ID FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend );
SELECT H.ID FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL AND F.friend_id IS NULL;
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT H1.ID FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.student_id;
SELECT ID FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend UNION SELECT student_id FROM Likes );
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.student_id GROUP BY H1.name HAVING COUNT(DISTINCT F.friend_id) > 0 AND COUNT(DISTINCT L.liked_id) > 0;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend UNION SELECT student_id FROM Likes );
SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id;
SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT name FROM Highschooler WHERE ID IN ( SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT H1.name FROM Highschooler H1 JOIN Likes L ON H1.ID = L.student_id GROUP BY H1.name ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name HAVING COUNT(L.liked_id) >= 2;
SELECT H.name FROM Highschooler H JOIN ( SELECT student_id , COUNT(*) as num_likes FROM Likes GROUP BY student_id ) L ON H.ID = L.student_id WHERE L.num_likes >= 2;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F.friend_id) >= 2 AND H.grade > 5;
SELECT ID FROM Highschooler WHERE grade > 5;
SELECT COUNT(*) FROM Likes AS L JOIN Highschooler AS H ON L.student_id = H.ID WHERE H.name = 'Kyle';
SELECT COUNT(*) FROM Likes WHERE student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;
SELECT DISTINCT state FROM Owners JOIN Professionals ON Owners.state = Professionals.state;
SELECT AVG(D.age) FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;
SELECT AVG(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );
SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR (P.professional_id IN ( SELECT T.professional_id FROM Treatments T GROUP BY T.professional_id HAVING COUNT(T.treatment_id) > 2 ))
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR (professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2 ))
SELECT name FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments WHERE cost_of_treatment <= 1000 )
SELECT D.name FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE T.cost_of_treatment <= 1000;
SELECT P.first_name FROM Professionals P WHERE P.first_name NOT IN (SELECT name FROM Dogs) INTERSECT SELECT O.first_name FROM Owners O WHERE O.first_name NOT IN (SELECT name FROM Dogs);
-- Get the first names from Professionals and Owners tables SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners -- Get the dog names SELECT name FROM Dogs -- Find the first names that are used for professionals or owners but not as dog names SELECT first_name FROM (SELECT DISTINCT first_name FROM Professionals UNION SELECT DISTINCT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs)
SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P LEFT JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.treatment_id IS NULL;
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) > 1;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2 )
SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_code ORDER BY COUNT(D.dog_id) DESC LIMIT 1;
SELECT T2.breed_name FROM Dogs AS T1 JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_name ORDER BY COUNT(T1.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY o.owner_id, o.last_name ORDER BY total_cost DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IN ( SELECT dog_id FROM Treatments ) GROUP BY o.owner_id, o.last_name ORDER BY SUM(tt.cost_of_treatment) DESC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatment_Types tt JOIN Treatments t ON tt.treatment_type_code = t.treatment_type_code GROUP BY tt.treatment_type_code, tt.treatment_type_description ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatment_Types tt JOIN ( SELECT treatment_type_code, SUM(cost_of_treatment) as total_cost FROM Treatments GROUP BY treatment_type_code ) t ON tt.treatment_type_code = t.treatment_type_code ORDER BY t.total_cost ASC LIMIT 1;
SELECT o.owner_id, o.zip_code, SUM(t.cost_of_treatment) AS total_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY total_cost DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN ( SELECT d.owner_id, SUM(t.cost_of_treatment) AS total_cost FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.owner_id ) AS owner_costs ON o.owner_id = owner_costs.owner_id ORDER BY owner_costs.total_cost DESC LIMIT 1;
SELECT P.professional_id, P.cell_number FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(DISTINCT T.treatment_type_code) >= 2;
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_type_code) > 1 )
SELECT first_name, last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments )
WITH AverageCost AS ( SELECT AVG(cost_of_treatment) as avg_cost FROM Treatments ) SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT avg_cost FROM AverageCost);
SELECT T1.date_of_treatment, P.first_name FROM Treatments AS T1 JOIN Professionals AS P ON T1.professional_id = P.professional_id;
SELECT T.date_of_treatment AS 'Date', P.first_name AS 'Operating Professional' FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT tt.treatment_type_description, t.cost_of_treatment FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code;
SELECT o.first_name, o.last_name, d.size_code AS dog_size FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, o.last_name, d.size_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
-- Step 1: Find the rarest breed by counting the occurrences of each breed in the Dogs table SELECT breed_code, COUNT(*) as count FROM Dogs GROUP BY breed_code ORDER BY count LIMIT 1; -- Step 2: Select the dog(s) with the rarest breed SELECT name, date_of_birth, date_arrived, date_adopted, date_departed FROM Dogs WHERE breed_code = 'the result from step 1'; -- Step 3: Join the selected dogs with the Treatments table to get their treatment dates SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = 'the result from step 1';
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN ( SELECT b.breed_code FROM Breeds b GROUP BY b.breed_code ORDER BY COUNT(b.breed_code) ASC LIMIT 1 )
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';
SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = ( SELECT MIN(age) FROM Dogs );
SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.age = ( SELECT MIN(age) FROM Dogs );
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin') UNION SELECT email_address FROM Professionals WHERE state IN ('HI', 'WI');
SELECT date_arrived AS 'Arriving Date', date_departed AS 'Departing Date' FROM Dogs;
SELECT date_arrived AS 'Arrival Date', date_departed AS 'Departure Date' FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments );
SELECT P.role_code, P.street, P.city, P.state FROM Professionals P WHERE P.city LIKE '%West%';
SELECT P.role_code, P.street, P.city, P.state FROM Professionals P WHERE P.city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs );
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs);
SELECT MAX(cost_of_treatment) AS max_cost FROM Treatments;
SELECT MAX(cost_of_treatment) FROM Treatments;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL;
SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );
SELECT COUNT(*) - ( SELECT COUNT(DISTINCT professional_id) FROM Treatments ) AS num_professionals_without_treatment FROM Professionals;
SELECT COUNT(*) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT MAX(age) AS oldest_age FROM Dogs;
SELECT c1.charge_type AS Charge_Type, SUM(c2.charge_amount) AS Total_Cost FROM Charges c1 JOIN Charges c2 ON c1.charge_id = c2.charge_id GROUP BY c1.charge_type;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(T1.charge_amount) AS max_charge_amount, T2.charge_type FROM Charges AS T1 JOIN Charges AS T2 ON T1.charge_id = T2.charge_id GROUP BY T2.charge_type;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address AS Email, cell_number AS Cell_Phone, home_phone AS Home_Phone FROM Professionals;
SELECT DISTINCT b.breed_name, s.size_description FROM Breeds b JOIN Sizes s ON 1 = 1;
SELECT DISTINCT B.breed_name, S.size_description FROM Breeds AS B JOIN Dogs AS D ON B.breed_code = D.breed_code JOIN Sizes AS S ON D.size_code = S.size_code;
SELECT P.first_name, TT.treatment_type_description FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT P.first_name, T.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != "France";
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as Singer_Count FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID;
SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID;
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;
SELECT DISTINCT s.Name FROM song AS s JOIN singer AS si ON s.Singer_ID = si.Singer_ID WHERE s.Sales > 300000;
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name HAVING COUNT(sg.Song_ID) > 1;
SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name HAVING COUNT(sg.Song_ID) > 1;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT count(*) FROM Other_Available_Features;
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = "AirCon"
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code
SELECT T1.property_name FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE (T2.property_type_description IN ('House', 'Apartment')) AND (T1.room_count > 1)
