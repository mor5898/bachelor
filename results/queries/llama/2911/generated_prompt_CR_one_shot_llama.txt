SELECT count(*) FROM singer
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT Name, Song_Name, Song_release_year FROM singer WHERE Age = ( SELECT MIN(Age) FROM singer );
SELECT s.Name, si.Song_Name, si."Song_release_year" FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age = ( SELECT MIN(Age) FROM singer );
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) AS Number_of_singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_singers FROM singer GROUP BY Country;
SELECT s.Song_Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID WHERE s.Age > (SELECT AVG(Age) FROM singer);
SELECT T2.Song_Name FROM singer AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Average) FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium );
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium );
SELECT COUNT(concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT s.Name, COUNT(c.concert_Name) AS Number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name;
SELECT s.Name, COUNT(c.concert_Name) AS Number_of_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID GROUP BY s.Name;
SELECT s.Name, s.Capacity, COUNT(c.concert_ID) as Total_Concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY Total_Concerts DESC;
SELECT s.Name, s.Capacity FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(concert_ID) as Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC;
SELECT Year, COUNT(concert_ID) AS Total_Concerts FROM concert GROUP BY Year ORDER BY Total_Concerts DESC LIMIT 1;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT Country FROM singer WHERE Age > 40 OR Age < 30;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year != '2014'
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE Year = '2014' );
SELECT c.concert_Name, c.Theme, COUNT(si.Singer_ID) AS Number_of_Singers FROM concert c JOIN singer_in_concert si ON c.concert_ID = si.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT c.concert_Name, c.Theme, COUNT(si.Singer_ID) AS Number_of_singers FROM concert c JOIN singer_in_concert si ON c.concert_ID = si.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT s.Name AS Singer_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM singer_in_concert sic JOIN concert c ON sic.concert_ID = c.concert_ID JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY s.Name;
SELECT s.Name, COUNT(sc.concert_ID) AS Number_of_Concerts FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID GROUP BY s.Name;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT Name, Country FROM singer WHERE Singer_ID IN ( SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%' )
SELECT s.Name, s.Location FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location;
SELECT s.Name, s.Location FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Name, s.Location
SELECT COUNT(concert_ID) FROM concert WHERE Stadium_ID IN ( SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium) );
SELECT COUNT(concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT count(*) FROM pets WHERE weight > 10;
SELECT count(*) FROM pets WHERE weight > 10;
SELECT MIN(weight) FROM Pets p1 JOIN Pets p2 ON p1.PetID = p2.PetID AND p1.pet_age > p2.pet_age WHERE p1.PetType = 'dog';
SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight, PetType AS max_type FROM Pets GROUP BY PetType;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.Sex = 'F';
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.Sex = 'F';
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetType = 'cat' OR PetType = 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType IN ('cat', 'dog');
SELECT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE (P.PetType = 'cat' AND EXISTS (SELECT 1 FROM Has_Pet WHERE StuID = S.StuID AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog'))) OR (P.PetType = 'dog' AND EXISTS (SELECT 1 FROM Has_Pet WHERE StuID = S.StuID AND PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')));
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' INTERSECT SELECT PetID FROM Pets WHERE PetType = 'dog' ) )
SELECT S.Major, S.Age FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType != 'Cat' -- Assuming 'Cat' is the PetType for cats AND HP.StuID IS NULL; -- This ensures we're only looking at students without pets
SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetType = 'cat');
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetType = 'cat' );
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' );
SELECT Fname, Age FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( -- assuming dog = 1 and cat = 2 SELECT PetID FROM Pets WHERE PetType = 'dog' AND weight > 10 ) EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) )
SELECT Fname FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' ) AND StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) ) )
SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1;
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType;
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) GROUP BY Fname, Age;
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT h.PetID FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID WHERE s.LName = 'Smith';
SELECT S.StuID, COUNT(P.PetID) AS NumPets FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID GROUP BY S.StuID;
SELECT StuID, COUNT(*) AS PetCount FROM Has_Pet GROUP BY StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT Fname, Sex FROM Student WHERE StuID IN ( SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1 )
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.pet_age = 3 AND P.PetType = 'cat';
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.pet_age = 3 AND P.PetType = 'cat';
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet );
SELECT COUNT(*) FROM CONTINENTS;
SELECT COUNT(*) FROM CONTINENTS;
SELECT c.Continent AS ContinentName, COUNT(*) AS NumberOfCountries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.Continent;
SELECT c.ContId, c.Continent, COUNT(*) AS CountryCount FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT T1.Maker, T1.Id AS MakerId, COUNT(T2.Model) AS NumberOfModels FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker, T1.Id;
SELECT c.Id, c.Maker, c.FullName, COUNT(m.Model) AS NumberOfModels FROM car_makers c JOIN model_list m ON c.Id = m.Maker GROUP BY c.Id, c.Maker, c.FullName;
SELECT Model FROM car_names WHERE Horsepower = (SELECT MIN(Horsepower) FROM car_names);
SELECT Model FROM car_names WHERE MakeId = (SELECT MIN(MakeId) FROM cars_data);
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data );
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data );
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Country = T2.Id WHERE T2.Year = 1970;
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Country = T2.Year WHERE T2.Year = 1970;
SELECT cn.Make, cn.Model, cd.Year FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = ( SELECT MIN(Year) FROM cars_data );
SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Country = ( SELECT Country FROM countries WHERE CountryId IN ( SELECT Continent FROM countries GROUP BY Continent ORDER BY COUNT(CountryName) ASC LIMIT 1 ) ) ORDER BY T2.Year ASC LIMIT 1;
SELECT DISTINCT T2.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980;
SELECT DISTINCT Model FROM car_names WHERE Year > 1980;
SELECT C.Continent, COUNT(CM.Maker) AS CountOfCarMakers FROM continents C JOIN countries CO ON C.ContId = CO.Continent JOIN car_makers CM ON CO.CountryId = CM.Country GROUP BY C.Continent;
SELECT c.Continent, COUNT(cm.Maker) AS NumCarMakers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName, COUNT(cm.Maker) as CountOfCarMakers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Maker) DESC;
SELECT c.CountryName, COUNT(cm.Maker) as CountOfCarMakers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY CountOfCarMakers DESC LIMIT 1;
SELECT COUNT(DISTINCT T1.Model), T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName;
SELECT c.Maker, COUNT(m.Model) AS NumberOfModels, cm.FullName FROM car_makers cm JOIN model_list m ON cm.Id = m.Maker GROUP BY cm.Maker, cm.FullName;
SELECT Accelerate FROM cars_data WHERE MakeId IN ( SELECT MakeId FROM car_names WHERE Model = 'AMC Hornet Sportabout (SW)' );
SELECT T2.Accelerate FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'AMC Hornet Sportabout (SW)';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.CountryName = 'France';
SELECT COUNT(DISTINCT M.Model) FROM model_list M JOIN car_makers C ON M.Maker = C.Id JOIN countries CO ON C.Country = CO.CountryId WHERE CO.CountryName = 'USA';
SELECT COUNT(DISTINCT T3.Model) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN model_list AS T3 ON T1.Id = T3.Maker;
SELECT AVG(T1.MPG) FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T2.Maker = T3.Id WHERE T3.Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(T1.Weight) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 AND T2.Model IN ( SELECT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE Country IN ( SELECT CountryName FROM countries WHERE Continent = 'Asia' ) ) );
SELECT MIN(T1.Weight) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 AND T2.Model IN ( SELECT Model FROM model_list WHERE Maker IN ( SELECT Id FROM car_makers WHERE Country IN ( SELECT CountryName FROM countries WHERE Continent = 'Asia' ) ) );
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker;
SELECT c.CountryName, c.CountryId FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId HAVING COUNT(cm.Id) > 0;
SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers);
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Horsepower > '150';
SELECT YEAR, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY YEAR;
SELECT AVG(Weight) AS Average_Weight, AVG(Year) AS Average_Year, Year FROM cars_data GROUP BY Year;
SELECT c.CountryName, COUNT(DISTINCT cm.Maker) AS num_manufacturers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country JOIN model_list ml ON cm.Id = ml.Maker WHERE c.Continent IN (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3;
SELECT MAX(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3;
SELECT T1.Model, MAX(T2.Horsepower) AS MaxHorsepower FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN model_list AS T3 ON T1.Model = T3.Model WHERE T2.Cylinders = 3 GROUP BY T1.Model;
SELECT Model FROM car_names WHERE MPG = ( SELECT MAX(MPG) FROM car_names );
SELECT T1.Model, T2.Maker, MAX(T3.MPG) AS Max_MPG FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id GROUP BY T1.Model, T2.Maker;
SELECT AVG(T2.Horsepower) FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < 1980;
SELECT AVG(T2.Horsepower) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year < 1980;
SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Model = 'Volvo';
SELECT AVG(Edispl) FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'Volvo';
SELECT T2.Cylinders, MAX(T1.Accelerate) AS Max_Accelerate FROM cars_data T1 JOIN car_names T2 ON T1.Id = T2.MakeId GROUP BY T2.Cylinders;
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders;
SELECT ml.Model, COUNT(cn.MakeId) AS NumVersions FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model GROUP BY ml.Model ORDER BY NumVersions DESC;
SELECT Model, COUNT(DISTINCT Make) AS NumMakes FROM car_names JOIN model_list ON car_names.Model = model_list.Model GROUP BY Model ORDER BY NumMakes DESC;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders > 4;
SELECT COUNT(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE YEAR = 1980;
SELECT COUNT(*) FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = 1980;
SELECT COUNT(*) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(DISTINCT T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = 'American Motor Company';
SELECT T1.FullName, T2.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName HAVING COUNT(T2.Model) > 3;
SELECT c.Maker, c.Id FROM car_makers c JOIN model_list m ON c.Id = m.Maker GROUP BY c.Maker, c.Id HAVING COUNT(m.Model) > 3;
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE C.FullName = 'General Motors' OR C.Country IN ( SELECT Country FROM countries WHERE CountryId IN ( SELECT CountryId FROM countries JOIN continents ON countries.Continent = continents.ContId GROUP BY countries.CountryId HAVING COUNT(continents.ContId) > 1 ) )
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE (C.Maker LIKE '%General Motors%' OR C.Country IN ( SELECT CountryName FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers WHERE Maker LIKE '%General Motors%' ) )) AND C.Weight > 3500;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 OR Weight > 3000;
SELECT T1.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Accelerate = ( SELECT MAX(Accelerate) FROM cars_data );
SELECT T2.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Accelerate = ( SELECT MAX(Accelerate) FROM cars_data );
SELECT T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T1.Maker = 'Volvo' AND T3.Accelerate = ( SELECT MIN(Accelerate) FROM cars_data WHERE Id IN ( SELECT MakeId FROM car_names WHERE Model = 'volvo' ) )
SELECT T2.Cylinders FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = 'Volvo' ORDER BY T2.Accelerate ASC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT MAX(Horsepower) FROM car_names );
SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT MAX(Horsepower) FROM cars_data );
SELECT c.CountryName, COUNT(cm.Maker) as num_car_makers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(cm.Maker) > 2;
SELECT COUNT(*) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) > 2;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT T1.Model, T2.Maker, T3.CountryName, MAX(T1.Horsepower) AS MaxHorsePower FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN model_list AS T3 ON T1.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T2.Cylinders = 4 GROUP BY T1.Model, T2.Maker, T3.CountryName;
SELECT T1.Model, MAX(T3.Horsepower) AS MaxHorsepower FROM car_names AS T2 JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN model_list AS T1 ON T2.Model = T1.Model WHERE T3.Cylinders = 4 GROUP BY T1.Model;
SELECT MIN(Horsepower) FROM cars_data;
SELECT MIN(Horsepower) FROM cars_data;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT DISTINCT M.Model FROM model_list AS M JOIN car_makers AS C ON M.Maker = C.Id WHERE M.ModelId IN ( SELECT Id FROM cars_data WHERE Weight < 3500 ) AND C.Maker != 'Ford Motor Company';
SELECT DISTINCT T2.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.Make = 'Ford' AND T1.Weight < 3500;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL;
SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
SELECT Id, Maker FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(Model) >= 2 AND COUNT(DISTINCT Maker) > 3 )
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) >= 2 AND (SELECT COUNT(*) FROM car_names cn WHERE cn.MakeId IN (SELECT MakeId FROM cars_data WHERE MakeId = cm.Id)) > 3;
SELECT CountryId, CountryName FROM countries WHERE CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 ) OR CountryId IN ( SELECT T2.Country FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T1.Model = 'fiat' );
SELECT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3 OR EXISTS ( SELECT 1 FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model WHERE ml.Maker = (SELECT Id FROM car_makers WHERE Maker = 'Fiat') );
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Country FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways"
SELECT Abbreviation FROM airlines WHERE Airline = "JetBlue Airways";
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT A.Airline, A.Abbreviation FROM AIRLINES AS A JOIN AIRLINES AS B ON A.uid = B.uid WHERE A.Country = 'USA' AND B.Country = 'USA'
SELECT AirportCode, AirportName FROM airports;
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(uid) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(uid) FROM AIRLINES WHERE Country = 'USA';
SELECT COUNT(uid) FROM AIRLINES WHERE Country = 'USA';
SELECT T2.City, T2.Country FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T1.SourceAirport = 'ALN'
SELECT A.City, A.Country FROM airports AS A WHERE A.AirportCode = 'Alton' /* Assuming Alton is the AirportName */
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'ATO';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airports AS sa ON f.SourceAirport = sa.AirportCode JOIN airports AS da ON f.DestAirport = da.AirportCode WHERE sa.City = 'Aberdeen' AND da.City = 'Ashley';
SELECT COUNT(*) FROM flights AS f JOIN airports AS sa ON f.SourceAirport = sa.AirportCode JOIN airports AS da ON f.DestAirport = da.AirportCode WHERE sa.City = 'Aberdeen' AND da.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways')
SELECT COUNT(*) FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode WHERE f.Airline = ( SELECT uid FROM airlines WHERE Airline = 'United Airlines' ) AND a.AirportName = 'ASY';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE Airline = 1 AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE f.Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND a.AirportName = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode JOIN airlines AS al ON f.Airline = al.uid WHERE al.Airline = 'United Airlines' AND a.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE Airline = "United Airlines" AND DestAirport = "Aberdeen";
SELECT a.City, COUNT(f.SourceAirport) + COUNT(f.DestAirport) AS TotalFlights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY TotalFlights DESC;
SELECT a.City, COUNT(f.SourceAirport) AS Frequency FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY Frequency DESC;
SELECT a.City, COUNT(f.SourceAirport) as DepartureCount FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY DepartureCount DESC LIMIT 1;
SELECT SourceAirport, COUNT(*) as Frequency FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode GROUP BY SourceAirport ORDER BY Frequency DESC;
SELECT SourceAirport, COUNT(*) as FlightCount FROM flights GROUP BY SourceAirport ORDER BY FlightCount DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT Airline, COUNT(*) AS FlightCount FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY Airline ORDER BY FlightCount DESC;
SELECT A.Abbreviation, A.Country FROM airlines AS A JOIN ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) AS F ON A.uid = F.Airline WHERE F.FlightCount = ( SELECT MIN(FlightCount) FROM ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) );
SELECT A.Abbreviation, A.Country FROM airlines A JOIN ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) F ON A.uid = F.Airline WHERE F.FlightCount = ( SELECT MIN(FlightCount) FROM ( SELECT Airline, COUNT(*) as FlightCount FROM flights GROUP BY Airline ) );
SELECT DISTINCT T2.Airline FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport JOIN airlines AS T3 ON T2.Airline = T3.uid WHERE T1.AirportName = 'AHD';
SELECT DISTINCT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'AHD';
SELECT DISTINCT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.DestAirport = 'AHD';
SELECT DISTINCT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.DestAirport = 'AHD';
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport IN ('APG', 'CVO') OR T2.DestAirport IN ('APG', 'CVO');
SELECT DISTINCT A.Abbreviation FROM airlines AS A JOIN flights AS F ON A.uid = F.Airline WHERE F.SourceAirport IN ('APG', 'CVO')
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.SourceAirport NOT IN (SELECT SourceAirport FROM flights WHERE DestAirport = 'APG');
SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.DestAirport != 'APG'
SELECT A.Airline FROM AIRLINES A JOIN ( SELECT Airline, COUNT(*) as FlightCount FROM FLIGHTS GROUP BY Airline ) F ON A.uid = F.Airline WHERE F.FlightCount >= 10;
SELECT A.Airline FROM AIRLINES A JOIN FLIGHTS F ON A.uid = F.Airline GROUP BY A.Airline HAVING COUNT(F.FlightNo) >= 10;
SELECT A.Airline FROM AIRLINES A JOIN ( SELECT Airline, COUNT(*) as FlightCount FROM FLIGHTS GROUP BY Airline ) F ON A.uid = F.Airline WHERE F.FlightCount < 200;
SELECT Airline FROM AIRLINES WHERE uid IN ( SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200 )
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines';
SELECT DISTINCT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
SELECT AirportCode FROM airports WHERE AirportName = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT DISTINCT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT DISTINCT FlightNo FROM flights WHERE SourceAirport IN ( SELECT AirportCode FROM airports WHERE City = 'Aberdeen' );
SELECT AirportCode FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM airports AS a JOIN flights AS f ON a.AirportCode = f.SourceAirport WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(DestAirport) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');
SELECT A1.AirportName FROM airports A1 LEFT JOIN flights F ON A1.AirportCode = F.SourceAirport OR A1.AirportCode = F.DestAirport WHERE F.Airline IS NULL;
SELECT A.AirportCode, A.City, A.Country, A.CountryAbbrev FROM airports A LEFT JOIN flights F ON A.AirportCode = F.SourceAirport OR A.AirportCode = F.DestAirport WHERE F.Airline IS NULL;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name, Age FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) as Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) as Employee_Count FROM employee GROUP BY City;
SELECT City FROM employee e1 WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City, COUNT(*) FROM employee e1 JOIN employee e2 ON e1.City = e2.City AND e1.Age < 30 AND e2.Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT Location, COUNT(*) as Number_of_shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;
SELECT T1.Manager_name, T1.District FROM shop AS T1 WHERE (T1.Number_products) = ( SELECT MAX(Number_products) FROM shop );
SELECT Manager_name, District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name, COUNT(e2.Employee_ID) as Total_Awards FROM employee e JOIN evaluation e2 ON e.Employee_ID = e2.Employee_ID GROUP BY e.Name ORDER BY Total_Awards DESC LIMIT 1;
SELECT e.Name, COUNT(ea.Employee_ID) AS Max_Awards FROM employee e JOIN evaluation ea ON e.Employee_ID = ea.Employee_ID GROUP BY e.Name ORDER BY Max_Awards DESC LIMIT 1;
SELECT Name FROM employee WHERE Employee_ID IN ( SELECT Employee_ID FROM evaluation WHERE Bonus = (SELECT MAX(Bonus) FROM evaluation) );
SELECT Name FROM employee WHERE Employee_ID IN ( SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1 )
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s.Name, COUNT(h.Employee_ID) as Total_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name ORDER BY Total_Employees DESC LIMIT 1;
SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL;
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Shop_ID IS NULL;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM hiring h JOIN shop s ON h.Shop_ID = s.Shop_ID GROUP BY s.Name;
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT T1.District FROM shop AS T1 JOIN shop AS T2 ON T1.District = T2.District WHERE T1.Number_products < 3000 AND T2.Number_products > 10000;
SELECT DISTINCT T2.District FROM shop AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE (T1.Number_products < 3000 AND T2.Number_products > 10000);
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT D.Document_ID, D.Document_Name, D.Document_Description, T.Template_ID AS Template_ID, T.Version_Number AS Version_Number, TT.Template_Type_Code AS Template_Type_Code, TT.Template_Type_Description AS Template_Type_Description FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT D.Document_ID, T.Template_ID, D.Document_Description FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE D.Document_Name = 'Robbin CV';
SELECT d.Document_ID, t.Template_ID, d.Document_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT T.Template_ID) FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID;
SELECT COUNT(DISTINCT Template_ID) FROM Documents;
SELECT COUNT(DISTINCT d.Document_ID) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT T.Template_ID, COUNT(D.Document_ID) AS Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT T.Template_ID, TT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code WHERE (T.Template_ID, TT.Template_Type_Code) IN ( SELECT Template_ID, Template_Type_Code FROM Templates GROUP BY Template_ID, Template_Type_Code HAVING COUNT(*) = (SELECT MAX(Document_Count) FROM ( SELECT T.Template_ID, COUNT(D.D.Document_ID) AS Document_Count FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID GROUP BY T.Template_ID ) AS SubQuery) )
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Count FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT T.Template_ID FROM Templates T WHERE T.Template_ID IN ( SELECT D.Template_ID FROM Documents D GROUP BY D.Template_ID HAVING COUNT(D.Document_ID) > 1 )
SELECT DISTINCT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(D.Document_ID) > 1;
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT T.Template_ID, T.Version_Number, TT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types TT ON T.Template_Type_Code = TT.Template_Type_Code;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(Template_ID) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS Number_Of_Templates FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT rt.Template_Type_Code, COUNT(t.Template_ID) AS Num_Templates FROM Templates t JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) as Count FROM Templates GROUP BY Template_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT TTT.Template_Type_Code, COUNT(TT.Template_ID) AS Count FROM Templates TT JOIN Ref_Template_Types TTT ON TT.Template_Type_Code = TTT.Template_Type_Code GROUP BY TTT.Template_Type_Code ORDER BY Count DESC LIMIT 1;
SELECT DISTINCT TTT.Template_Type_Code FROM Templates T JOIN Ref_Template_Types TTT ON T.Template_Type_Code = TTT.Template_Type_Code GROUP BY TTT.Template_Type_Code HAVING COUNT(T.Template_ID) < 3;
SELECT DISTINCT TTT.Template_Type_Code FROM Ref_Template_Types TTT WHERE TTT.Template_Type_Code NOT IN ( SELECT TT.Template_Type_Code FROM Templates TT GROUP BY TT.Template_Type_Code HAVING COUNT(TT.Template_ID) >= 3 );
SELECT MIN(T.Version_Number), T.Template_Type_Code FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code;
SELECT MIN(T.Version_Number), T.Template_Type_Code FROM Templates T GROUP BY T.Template_Type_Code;
SELECT T.Template_Type_Code FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID WHERE D.Document_Name = 'Data base';
SELECT T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base';
SELECT Document_Name FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK' );
SELECT Document_Name FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'BK' );
SELECT rt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS Num_Documents FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code GROUP BY rt.Template_Type_Code;
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Num_Documents FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code;
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Total_Documents FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY Total_Documents DESC LIMIT 1;
SELECT T.Template_Type_Code FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_Type_Code ORDER BY COUNT(D.Document_ID) DESC LIMIT 1;
SELECT DISTINCT T.Template_Type_Code FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT DISTINCT T.Template_Type_Code FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Document_ID IS NULL;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = 'AD';
SELECT T2.Template_Type_Description FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT T.Template_Type_Code FROM Ref_Template_Types AS T WHERE T.Template_Type_Description = 'Book';
SELECT DISTINCT TTT.Template_Type_Description FROM Ref_Template_Types TTT JOIN Templates TT ON TTT.Template_Type_Code = TT.Template_Type_Code WHERE TT.Template_ID IN (SELECT Template_ID FROM Documents)
SELECT DISTINCT T.Template_Details FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE RT.Template_Type_Description = 'Presentation';
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RT ON T.Template_Type_Code = RT.Template_Type_Code WHERE RT.Template_Type_Description = 'Presentation';
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea '
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Customer reviews';
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Number_Of_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Document_ID) >= 2;
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2 )
SELECT Document_ID, Document_Name, ( SELECT COUNT(*) FROM Paragraphs WHERE Documents.Document_ID = Paragraphs.Document_ID ) AS Num_Paragraphs FROM Documents ORDER BY Num_Paragraphs DESC LIMIT 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN ( SELECT Document_ID, COUNT(*) as Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Count = (SELECT MAX(Paragraph_Count) FROM ( SELECT Document_ID, COUNT(*) as Paragraph_Count FROM Paragraphs GROUP BY Document_ID ))
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1;
SELECT COUNT(DISTINCT Document_ID) FROM Paragraphs WHERE Paragraph_ID BETWEEN 1 AND 2;
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_ID) = 2 )
SELECT D.Document_ID, P.Paragraph_Text FROM Paragraphs P JOIN Documents D ON P.Document_ID = D.Document_ID WHERE P.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT DISTINCT Document_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' OR p.Paragraph_Text LIKE '%Ireland%'
SELECT count(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT T2.Hometown FROM (SELECT MIN(Age) AS MinAge FROM teacher) AS T1 JOIN teacher AS T2 ON T2.Age = T1.MinAge;
SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );
SELECT Hometown, COUNT(*) as Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Number_of_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC;
SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown ORDER BY Count DESC;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1;
SELECT Hometown, COUNT(*) as Count FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID;
SELECT T.Name, C.Course FROM course_arrange CA JOIN teacher T ON CA.Teacher_ID = T.Teacher_ID JOIN course C ON CA.Course_ID = C.Course_ID;
SELECT T.Name, C.Course FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID ORDER BY T.Name ASC;
SELECT T.Name, C.Course FROM course_arrange CA JOIN teacher T ON CA.Teacher_ID = T.Teacher_ID JOIN course C ON CA.Course_ID = C.Course_ID ORDER BY T.Name ASC;
SELECT T.Name FROM course C JOIN course_arrange CA ON C.Course_ID = CA.Course_ID JOIN teacher T ON CA.Teacher_ID = T.Teacher_ID WHERE C."Course" = 'Math';
SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID WHERE C."Course" = 'Math'
SELECT T.Name, COUNT(CA.Course_ID) AS Number_of_Courses FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Name;
SELECT t.Name, COUNT(ca.Course_ID) AS Num_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT Name, COUNT(DISTINCT Course_ID) as num_courses FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID GROUP BY Name HAVING COUNT(DISTINCT Course_ID) >= 2;
SELECT T.Name, COUNT(DISTINCT CA.Course_ID) as num_courses FROM teacher T JOIN course_arrange CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Name HAVING COUNT(DISTINCT CA.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT Name FROM teacher WHERE Teacher_ID NOT IN ( SELECT Teacher_ID FROM course_arrange );
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = ( SELECT MAX(Num_of_Staff) FROM museum );
SELECT AVG(Num_of_Staff) FROM museum m1 JOIN museum m2 ON m1.Museum_ID = m2.Museum_ID AND m2.Open_Year < '2009'
SELECT m.Open_Year, m.Num_of_Staff FROM museum AS m WHERE m.Name = 'Plaza Museum';
-- Step 1: Find the minimum staff number of all museums opened after 2010 SELECT MIN(Num_of_Staff) AS min_staff FROM museum WHERE Open_Year > '2010'; -- Step 2: Find the names of museums which have more staff than the minimum staff number found in step 1 SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');
SELECT v1.ID, v1.Name, v1.Age FROM visitor v1 JOIN ( SELECT visitor_ID, COUNT(*) as num_visits FROM visit GROUP BY visitor_ID ) v2 ON v1.ID = v2.visitor_ID WHERE v2.num_visits > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visit AS t JOIN visitor AS v ON t.visitor_ID = v.ID GROUP BY v.ID ORDER BY SUM(t.Total_spent) DESC LIMIT 1;
SELECT v.ID, m.Name FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID GROUP BY v.Museum_ID ORDER BY COUNT(v.visitor_ID) DESC LIMIT 1;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Name HAVING COUNT(v.Museum_ID) = 0;
SELECT v.Name, v.Age FROM visit AS vi JOIN visitor AS v ON vi.visitor_ID = v.ID GROUP BY v.ID ORDER BY SUM(vi.Num_of_Ticket) DESC LIMIT 1;
SELECT AVG(Num_of_Ticket) AS Average_tickets, MAX(Num_of_Ticket) AS Maximum_tickets FROM visit;
SELECT SUM(T2.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1;
SELECT COUNT(DISTINCT visitor_name) FROM ( SELECT v.Name AS visitor_name, m.Open_Year FROM visit v JOIN museum m ON v.Museum_ID = m.Museum_ID WHERE (m.Open_Year < '2009' OR m.Open_Year > '2011') ) AS subquery
SELECT COUNT(DISTINCT v.ID) FROM visitor v LEFT JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > '2010'
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT count(*) FROM players
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(winner_rank) AS avg_winner_rank FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(l.l_1stWon) AS highest_rank_of_losers FROM matches m JOIN players l ON m.loser_id = l.player_id;
SELECT MAX(l.l_1stWon) AS best_rank_of_losers FROM qualifying_matches l;
SELECT COUNT(DISTINCT "country_code") FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT T1.tourney_name, COUNT(*) AS total_matches FROM matches AS T1 GROUP BY T1.tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name, COUNT(match_num) AS total_matches FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016)
SELECT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.loser_id AND m1.year = 2013 JOIN matches m2 ON p.player_id = m2.winner_id AND m2.year = 2016;
SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;
SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016;
SELECT p.country_code, p.first_name FROM matches m1 JOIN matches m2 ON m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open' JOIN players p ON m1.winner_id = p.player_id AND m2.winner_id = p.player_id;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE (m.tourney_name = 'WTA Championships' AND m.year = 2019) OR (m.tourney_name = 'Australian Open' AND m.year = 2020) GROUP BY p.first_name, p.country_code HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date DESC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name, birth_date FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT YEAR, COUNT(*) AS num_matches FROM matches GROUP BY YEAR ORDER BY num_matches DESC;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, p.loser_rank_points FROM players p JOIN ( SELECT winner_id, COUNT(*) as num_wins FROM matches GROUP BY winner_id ) m ON p.player_id = m.winner_id WHERE m.num_wins = (SELECT MAX(num_wins) FROM ( SELECT winner_id, COUNT(*) as num_wins FROM matches GROUP BY winner_id ) t)
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN ( SELECT winner_id, COUNT(*) as num_wins FROM matches GROUP BY winner_id ) w ON p.player_id = w.winner_id JOIN rankings r ON p.player_id = r.player_id ORDER BY w.num_wins DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'Australian Open' GROUP BY winner_name ORDER BY winner_rank_points DESC LIMIT 1;
SELECT m.loser_name AS Loser_Name, m.winner_name AS Winner_Name FROM matches m WHERE (m.loser_id, m.tourney_date) IN ( SELECT loser_id, tourney_date FROM matches GROUP BY loser_id, tourney_date ORDER BY COUNT(*) DESC LIMIT 1 ) ORDER BY m.match_num;
SELECT winner_name AS "Winner's Name", loser_name AS "Loser's Name" FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name ORDER BY average_ranking DESC;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT "country_code", COUNT(*) AS num_players FROM players GROUP BY "country_code" ORDER BY num_players DESC;
SELECT "country_code" AS Country, COUNT(*) AS Number_of_Players FROM players GROUP BY "country_code" ORDER BY Number_of_Players DESC;
SELECT country_code, COUNT(*) as total_players FROM players GROUP BY country_code ORDER BY total_players DESC LIMIT 1;
SELECT country_code, COUNT(*) AS total_players FROM players GROUP BY country_code ORDER BY total_players DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT YEAR(tourney_date) AS year, COUNT(*) AS num_matches FROM matches GROUP BY YEAR(tourney_date) ORDER BY year;
SELECT YEAR, COUNT(*) FROM matches GROUP BY YEAR;
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_name) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT COUNT(DISTINCT winner_hand) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE (SELECT MAX(loser_rank_points) FROM matches) = m.loser_rank_points;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN ( SELECT winner_id, MAX(winner_rank_points) AS max_winner_rank_points FROM matches GROUP BY winner_id ) m ON p.player_id = m.winner_id WHERE p.player_id = m.winner_id AND m.max_winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT "hand", COUNT(*) AS "number_of_players" FROM players GROUP BY "hand";
SELECT "hand" AS Hand_Type, COUNT(*) AS Total_Players FROM players GROUP BY "hand";
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT D.note, D.killed, D.injured FROM death AS D JOIN ship AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't';
SELECT T1.name, T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'
SELECT DISTINCT b.id, b.name FROM battle AS b JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig'
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id, s.name, SUM(d.injured) AS total_injuries FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY total_injuries DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage != '225'
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE (s.name = 'Lettice' OR s.name = 'HMS Atalanta')
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location != 'English Channel'
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM addresses;
SELECT line_1 AS "First Line", line_2 AS "Second Line" FROM Addresses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT COUNT(*) AS course_count FROM Courses;
SELECT course_description FROM Courses WHERE course_name LIKE '%Math%';
SELECT C.course_name, S.section_description FROM Courses C JOIN Sections S ON C.course_id = S.course_id WHERE C.course_name LIKE '%Math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT D.department_name, D.department_id, COUNT(DP.degree_program_id) AS num_degrees FROM Degree_Programs DP JOIN Departments D ON DP.department_id = D.department_id GROUP BY D.department_name, D.department_id ORDER BY num_degrees DESC;
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT `degree_summary_name`) FROM `Degree_Programs`;
SELECT COUNT(DISTINCT `degree_summary_name`) FROM `Degree_Programs`;
SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Engineering';
SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'Engineering';
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT course_name, course_id FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(section_id) <= 2 )
SELECT c.course_name, c.course_id FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT S.semester_name AS 'Semester Name', S.semester_id AS 'Semester ID' FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_name, S.semester_id ORDER BY COUNT(SE.student_enrolment_id) DESC LIMIT 1;
SELECT s.semester_name, s.semester_id, COUNT(se.student_enrolment_id) AS num_students FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name, s.semester_id ORDER BY num_students DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id WHERE SE.degree_program_id IN ( SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id HAVING COUNT(*) > 1 ) GROUP BY S.first_name, S.middle_name, S.last_name, S.student_id;
SELECT s.first_name, s.middle_name, s.last_name, se.degree_program_id, d.department_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id WHERE COUNT(DISTINCT se.semester_id) = 1 AND COUNT(DISTINCT se.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Students s ON se.student_id = s.student_id WHERE dp.degree_summary_name = 'Bachelor';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT dp.degree_summary_name AS "Program Name", COUNT(se.student_enrolment_id) AS "Number of Enrollments" FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY Number of Enrollments DESC;
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS num_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_students DESC;
SELECT dp.degree_summary_name, COUNT(se.student_enrolment_id) AS num_enrolled FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_enrolled DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name, COUNT(se.student_enrolment_id) AS num_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY num_students DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.degree_program_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.degree_program_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT DISTINCT C.course_name FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name HAVING COUNT(*) > 0;
SELECT C.course_name, COUNT(SEC.student_enrolment_id) AS num_enrollments FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT C.course_name, COUNT(SEC.student_enrolment_id) AS num_students FROM Courses C JOIN Student_Enrolment_Courses SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY num_students DESC LIMIT 1;
SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE S.student_id NOT IN ( SELECT SE.student_id FROM Student_Enrolment SE ) AND A.state_province_county = 'North Carolina';
SELECT S.last_name FROM Students S JOIN Addresses A ON S.current_address_id = A.address_id WHERE A.state_province_county = 'North Carolina' AND S.student_id NOT IN (SELECT student_id FROM Student_Enrolment);
SELECT T.transcript_date, T.transcript_id FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(DISTINCT TC.student_course_id) >= 2;
SELECT T.transcript_date, T.transcript_id, COUNT(TC.student_course_id) AS num_courses FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_date, T.transcript_id HAVING COUNT(TC.student_course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE (first_name, middle_name, last_name) IN ( SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 );
SELECT MIN(date_left) AS earliest_graduation_date FROM Students;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE (s.date_left IS NULL OR s.date_left > '1970-01-01') -- assuming students are not graduated before 1970 ORDER BY s.date_left ASC LIMIT 1;
SELECT s.first_name FROM Students s JOIN Addresses ca ON s.current_address_id = ca.address_id JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE ca.line_1 != pa.line_1 OR ca.line_2 != pa.line_2;
SELECT s.first_name FROM Students s JOIN Addresses ca ON s.current_address_id = ca.address_id JOIN Addresses pa ON s.permanent_address_id = pa.address_id WHERE ca.address_id != pa.address_id;
SELECT A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details, COUNT(S.student_id) AS num_students FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id GROUP BY A.address_id, A.line_1, A.line_2, A.line_3, A.city, A.zip_postcode, A.state_province_county, A.country, A.other_address_details ORDER BY num_students DESC;
SELECT a.address_id, a.line_1, a.line_2, COUNT(s.student_id) AS num_students FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY num_students DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT T.transcript_date, T.other_details FROM Transcripts T ORDER BY T.transcript_date ASC LIMIT 1;
SELECT T.transcript_date AS 'Transcript Date', T.other_details AS 'Other Details' FROM Transcripts T ORDER BY T.transcript_date ASC LIMIT 1;
SELECT COUNT(*) AS num_transcripts FROM Transcripts;
SELECT COUNT(*) AS total_transcripts FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT COUNT(*) AS max_enrollments, student_course_id, course_id FROM Student_Enrolment_Courses JOIN Transcript_Contents ON Student_Enrolment_Courses.student_course_id = Transcript_Contents.student_course_id GROUP BY student_course_id, course_id;
SELECT T1.course_name, COUNT(T2.student_course_id) AS max_transcript_count, T3.student_enrolment_id FROM Courses T1 JOIN Student_Enrolment_Courses T2 ON T1.course_id = T2.course_id JOIN Student_Enrolment T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name, T3.student_enrolment_id ORDER BY COUNT(T2.student_course_id) DESC LIMIT 1;
SELECT T.transcript_date, T.transcript_id FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY COUNT(*) ASC LIMIT 1;
SELECT S.semester_id, DP.degree_summary_name AS Degree_Program_Name FROM Student_Enrolment SE JOIN Semesters S ON SE.semester_id = S.semester_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name IN ('Master', 'Bachelor') GROUP BY S.semester_id, DP.degree_summary_name;
SELECT se.semester_id, COUNT(CASE WHEN dp.degree_summary_name = 'Masters' THEN 1 END) AS masters_enrolled, COUNT(CASE WHEN dp.degree_summary_name = 'Bachelors' THEN 1 END) AS bachelors_enrolled FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY se.semester_id;
SELECT COUNT(DISTINCT current_address_id) FROM Students;
SELECT DISTINCT A.line_1, A.line_2 FROM Addresses A JOIN Students S ON A.address_id = S.current_address_id OR A.address_id = S.permanent_address_id;
SELECT first_name, middle_name, last_name, email_address, cell_mobile_number, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
SELECT other_student_details FROM Students ORDER BY other_student_details DESC;
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT first_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';
SELECT first_name FROM Students WHERE (permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' )) OR (cell_mobile_number = '09700166582');
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' ORDER BY Title;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(id) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT C.Title, C.Directed_by FROM Cartoon C ORDER BY C.`Original_air_date`;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti') ORDER BY title;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti' ORDER BY title;
SELECT Country, COUNT(id) AS Number_of_channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_channels DESC;
SELECT Country, COUNT(*) as Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC;
SELECT COUNT(DISTINCT series_name) AS "Number of Series Names", COUNT(DISTINCT Content) AS "Number of Contents" FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_content FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT T1.Package_Option FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.series_name = 'Sky Radio';
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) as Count FROM TV_Channel GROUP BY Language ORDER BY Count ASC LIMIT 1;
SELECT Language, COUNT(*) as Count FROM TV_Channel GROUP BY Language ORDER BY Count ASC;
SELECT Language, COUNT(*) as Count FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) as Count FROM TV_Channel GROUP BY Language;
SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = 'The Rise of the Blue Beetle!';
SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle';
SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio' ORDER BY Title;
SELECT Title FROM Cartoon WHERE Channel IN ( SELECT id FROM TV_Channel WHERE series_name = 'Sky Radio' );
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY CAST(Rating AS REAL) DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM "TV_series";
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM TV_series;
SELECT T1.Episode, T2.Air_Date FROM TV_series AS T1 JOIN TV_series AS T2 ON T1.id = T2.id WHERE T1.Episode = 'A Love of a Lifetime'
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT ts.Weekly_Rank FROM TV_series ts JOIN Episode e ON ts.id = e.id WHERE e.Episode = 'A Love of a Lifetime';
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime';
SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Episode = 'A Love of a Lifetime';
SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';
SELECT T2.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio';
SELECT Directed_by, COUNT(*) as Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) as num_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes' ORDER BY series_name;
SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey' ORDER BY T2.Country;
SELECT DISTINCT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey';
SELECT DISTINCT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by != 'Todd Casey';
SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey'
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') GROUP BY T1.series_name, T1.Country
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT T1.id FROM TV_Channel AS T1 GROUP BY T1.Country HAVING COUNT(T1.id) > 2;
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(TV_series.id) > 2;
SELECT id FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' );
SELECT id FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )
SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IS NULL;
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT MAX(Money_Rank) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY Final_Table_Made ASC;
SELECT p.Name, pp.Final_Table_Made FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT T2.Name, T2."Birth_Date" FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings = ( SELECT MIN(Earnings) FROM poker_player )
SELECT p2.Name, p2.Birth_Date FROM people AS p2 JOIN poker_player AS p1 ON p2.People_ID = p1.People_ID WHERE (p1.Earnings) = ( SELECT MIN(Earnings) FROM poker_player );
SELECT MAX(Money_Rank) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE Height = ( SELECT MAX(Height) FROM people );
SELECT pp."Money_Rank" AS "Money Rank" FROM poker_player pp JOIN people p ON pp."People_ID" = p."People_ID" WHERE p."Height" = (SELECT MAX("Height") FROM people)
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(Earnings) FROM poker_player WHERE Height > 200;
SELECT p.Name, pp.Earnings FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT Name FROM poker_player ORDER BY Earnings DESC;
SELECT p.Nationality, COUNT(*) AS Count FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY p.Nationality;
SELECT Nationality, COUNT(*) as Count_of_people FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 1;
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT COUNT(DISTINCT Nationality) FROM people;
SELECT COUNT(DISTINCT Nationality) FROM people;
Since you've already provided the answer in the example query, I'll simply repeat it here: **There are 50 states.** This is because the `count(*)` function returns the total number of rows in the `area_code_state` table, which has a primary key on the `state` column that uniquely identifies each state. Therefore, the count of rows in this table corresponds to the number of unique states. If you want to verify this result or explore other questions about the database schema, feel free to ask!
SELECT `contestant_number`, `contestant_name` FROM `CONTESTANTS` ORDER BY `contestant_name` DESC;
SELECT V.vote_id, V.phone_number, AS.state FROM VOTES V JOIN AREA_CODE_STATE AS ON V.state = AS.state;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT V.state, V.created AS vote_created_time FROM VOTES V;
SELECT c.contestant_name, c.contestant_number FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number HAVING COUNT(v.vote_id) >= 2;
SELECT c.`contestant_number`, c.`contestant_name` FROM CONTESTANTS c JOIN VOTES v ON c.`contestant_number` = v.`contestant_number` GROUP BY c.`contestant_number`, c.`contestant_name` ORDER BY COUNT(v.`vote_id`) ASC LIMIT 1;
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(c.contestant_number) FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;
SELECT a.area_code FROM AREA_CODE_STATE a JOIN ( SELECT state, COUNT(*) as num_votes FROM VOTES GROUP BY state ) v ON a.state = v.state GROUP BY a.area_code HAVING MAX(num_votes)
SELECT V.created AS create_date, A.state AS state, V.phone_number AS phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state WHERE T2.contestant_number IN ( SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling' ) AND T2.contestant_number IN ( SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss' )
SELECT `contestant_name` FROM `CONTESTANTS` WHERE `contestant_name` LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
SELECT Code FROM country WHERE LocalName = 'Anguilla';
SELECT Continent FROM country WHERE Code = 'ANG';
SELECT c.Name AS CountryName, ct.Name AS CityName FROM city c JOIN country ct ON c.CountryCode = ct.Code WHERE c.Name = 'Kabul';
SELECT Code FROM country WHERE Name = 'Afghanistan';
SELECT Language, SUM(Percentage) AS TotalPercentage FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE CountryName = 'Aruba' GROUP BY Language ORDER BY TotalPercentage DESC;
SELECT Language FROM countrylanguage WHERE CountryCode = 'AW' ORDER BY Percentage DESC LIMIT 1;
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT Code FROM country WHERE Continent = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' AND LifeExpectancy IS NOT NULL ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaxGNP FROM country WHERE Continent = 'Asia';
SELECT SUM(CASE WHEN Continent = 'Asia' THEN Population ELSE 0 END) AS TotalPopulationInAsia, MAX(CASE WHEN Continent = 'Asia' THEN GNP ELSE NULL END) AS MaxGNPInAsia FROM country;
SELECT AVG(LifeExpectancy) FROM country c1 JOIN country c2 ON c1.Code = c2.Code AND c2.GovernmentForm = 'Republic' WHERE c1.Continent = 'Africa';
SELECT AVG(LifeExpectancy) FROM country c1 JOIN country c2 ON c1.Code = c2.Code AND c2.GovernmentForm = 'Republic' WHERE c1.Continent = 'Africa';
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT ID FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US Territory';
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Name IN ('United States', 'American Samoa', 'Guam', 'Northern Mariana Islands', 'Puerto Rico', 'United States Minor Outlying Islands');
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS NumberOfLanguages FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AW';
SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'AW';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'AFG';
SELECT COUNT(*) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'
SELECT c.Name, SUM(cl.Percentage) as TotalLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY TotalLanguages DESC LIMIT 1;
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS TotalLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY TotalLanguages DESC;
SELECT c.Continent, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY NumLanguages DESC;
SELECT COUNT(*) FROM ( SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch') ) AS lang_combos;
SELECT COUNT(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) > 1;
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT c.Continent) FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese'
SELECT COUNT(DISTINCT c.Code) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) );
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY Language ORDER BY SUM(Percentage) DESC;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm = 'Republic' AND cl.IsOfficial = 'F' AND c.IndepYear > 1950;
SELECT cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.GovernmentForm = 'Republic' AND cl.IsOfficial = 'F' GROUP BY cl.Language, c.Name HAVING COUNT(DISTINCT c.Name) = 1;
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, cl.Language, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' AND SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country );
SELECT AVG(LifeExpectancy) FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language != 'English' )
SELECT AVG(LifeExpectancy) FROM country WHERE Code IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'F' )
SELECT SUM(T2.Population) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language != 'English' AND T1.IsOfficial = 'T';
SELECT SUM(c.Population) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND cl.IsOfficial = 'T';
SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE HeadOfState = 'Beatrix' )
SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE HeadOfState = 'Beatrix' ) AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE IndepYear < 1930 )
SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930;
SELECT MAX(SurfaceArea) AS max_surface_area FROM country WHERE Continent = 'Europe';
SELECT MAX(SurfaceArea) AS max_surface_area FROM country WHERE Continent = 'Europe';
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' GROUP BY c.Name HAVING MIN(ci.Population) > ( SELECT MIN(Population) FROM country WHERE Continent = 'Africa' )
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' GROUP BY c.Name HAVING MIN(ci.Population) > ( SELECT MIN(Population) FROM country WHERE Continent = 'Africa' )
SELECT c.Name FROM country c JOIN city ci ON c.Code = ci.CountryCode WHERE c.Continent = 'Asia' AND ci.Population > ( SELECT MAX(Population) FROM country WHERE Continent = 'Africa' )
SELECT SUM(Population) AS TotalPopulation FROM country WHERE Continent = 'Africa';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT Code FROM countrylanguage WHERE Language != 'English';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT Code FROM country WHERE Language = 'English' AND GovernmentForm != 'Republic';
SELECT Code FROM country WHERE Language != 'English' AND GovernmentForm != 'Republic';
SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.IsOfficial != 'T'
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language != 'English' AND c.District = 'Europe'
SELECT DISTINCT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T' AND (SELECT Continent FROM country WHERE Code = c.CountryCode) = 'Asia';
SELECT DISTINCT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = ( SELECT MIN(Population) FROM country );
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country)
SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country );
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country );
SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;
SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) AS Number_of_cities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
WITH city_avg AS ( SELECT AVG(Population) as avg_population FROM city ) SELECT c.District, COUNT(*) as num_cities_above_avg FROM city c JOIN city_avg ca ON TRUE WHERE c.Population > ca.avg_population GROUP BY c.District;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation, Name FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72.0 GROUP BY GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Continent, SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE SurfaceArea > 3000 AND Continent = 'North America' GROUP BY Continent;
SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;
SELECT cl.Language, c.Name FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE (cl.Percentage, cl.CountryCode) IN ( SELECT Percentage, CountryCode FROM countrylanguage GROUP BY CountryCode HAVING MAX(Percentage) )
SELECT c.Code AS CountryCode, cl.Language AS Language, MAX(cl.Percentage) AS MaxPercentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY c.Code;
SELECT COUNT(*) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language = 'Spanish' AND cl.Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish' )
SELECT COUNT(*) FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T';
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC LIMIT 1;
SELECT c.Code FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' AND cl.Percentage > 50;
SELECT count(*) FROM conductor
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(CASE WHEN Type = 'Live final' THEN Share END) AS max_share, MIN(CASE WHEN Type = 'Live final' THEN Share END) AS min_share FROM performance;
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT COUNT(DISTINCT Nationality) FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor WHERE Year_of_Work = ( SELECT MAX(Year_of_Work) FROM conductor );
SELECT Name FROM conductor ORDER BY 2023 - Year_of_Work DESC LIMIT 1;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, COUNT(o.Orchestra_ID) as Count_of_Orchestras FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT T1.Record_Company, COUNT(T2.Orchestra_ID) AS Number_of_Orchestras FROM orchestra T1 GROUP BY T1.Record_Company;
SELECT o1.Record_Company AS Record_Company, COUNT(DISTINCT o2.Orchestra_ID) AS Number_of_Orchestras FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company GROUP BY o1.Record_Company;
SELECT Major_Record_Format, COUNT(*) as Count FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY Major_Record_Format ORDER BY Count ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Record_Company, COUNT(*) as Count FROM orchestra GROUP BY Record_Company ORDER BY Count DESC LIMIT 1;
SELECT DISTINCT T1.`Orchestra` FROM `orchestra` AS T1 LEFT JOIN `performance` AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` WHERE T2.`Performance_ID` IS NULL;
SELECT o.* FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT DISTINCT T1.Record_Company FROM orchestra AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE (T1.Year_of_Founded <= 2003 AND T2.Year_of_Founded > 2003) OR (T1.Year_of_Founded > 2003 AND T2.Year_of_Founded <= 2003);
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT DISTINCT T2.Year_of_Founded FROM performance AS T1 JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Year_of_Founded HAVING COUNT(T1.Performance_ID) > 1;
SELECT T2.`Year_of_Founded` FROM `performance` AS T1 JOIN `orchestra` AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` GROUP BY T2.`Year_of_Founded` HAVING COUNT(T1.`Performance_ID`) > 1;
SELECT count(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT DISTINCT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
insert into Highschooler (ID, name, grade) values (1, 'Kyle', 11), (2, 'Sarah', 12), (3, 'Tom', 9);
SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
SELECT grade, COUNT(*) as num_students FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT H.ID, COUNT(F.student_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;
SELECT H1.name, COUNT(F.student_id) AS num_friends FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.name;
SELECT H.name, COUNT(F.student_id) as num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;
SELECT H.name, COUNT(F.student_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id GROUP BY H1.name HAVING COUNT(DISTINCT F.friend_id) >= 3;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id GROUP BY H.ID HAVING COUNT(DISTINCT F.friend_id) >= 3;
SELECT H2.name FROM Friend F JOIN Highschooler H1 ON F.student_id = H1.ID JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle';
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON H2.ID = F.friend_id WHERE H2.name = 'Kyle';
SELECT COUNT(*) FROM Highschooler AS h1 JOIN Friend AS f ON h1.ID = f.student_id JOIN Highschooler AS h2 ON h2.ID = f.friend_id WHERE h2.name = 'Kyle';
-- Inserting data into Highschooler table insert into Highschooler (ID, name, grade) values (1, 'Kyle', 11), (2, 'Sarah', 12), (3, 'Tom', 10), (4, 'Jane', 9); -- Inserting data into Friend table insert into Friend (student_id, friend_id) values (1, 2), -- Kyle and Sarah are friends (1, 3), -- Kyle and Tom are friends (2, 4); -- Sarah and Jane are friends -- Inserting data into Likes table insert into Likes (student_id, liked_id) values (1, 2), -- Kyle likes Sarah (1, 3), -- Kyle likes Tom (2, 4); -- Sarah likes Jane
SELECT ID FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend );
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT H.name FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id WHERE F.student_id IS NULL AND F.friend_id IS NULL;
SELECT H1.ID FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.student_id WHERE H1.ID NOT IN (SELECT liked_id FROM Likes WHERE student_id = H1.ID)
SELECT ID FROM Highschooler WHERE ID IN ( SELECT student_id FROM Friend UNION SELECT student_id FROM Likes );
SELECT H1.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.student_id GROUP BY H1.name HAVING COUNT(DISTINCT F.friend_id) > 0 AND COUNT(DISTINCT L.liked_id) > 0;
SELECT DISTINCT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id;
SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) as num_likes FROM Likes GROUP BY student_id;
SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID;
SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id OR H.ID = L.liked_id GROUP BY H.name ORDER BY COUNT(L.student_id) DESC, H.name ASC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;
SELECT H.name, COUNT(L.student_id) as num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.student_id) >= 2;
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 )
SELECT name FROM Highschooler WHERE grade > 5 AND ID IN ( SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(*) >= 2 )
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';
SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend);
SELECT AVG(H.grade) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id OR H.ID = F.friend_id;
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;
SELECT AVG(T1.age) FROM Dogs T1 JOIN Treatments T2 ON T1.dog_id = T2.dog_id;
SELECT AVG(T1.age) AS avg_age FROM Dogs T1 JOIN Treatments T2 ON T1.dog_id = T2.dog_id;
SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals P WHERE P.state = 'Indiana' OR (P.professional_id IN ( SELECT T.professional_id FROM Treatments T GROUP BY T.professional_id HAVING COUNT(T.treatment_id) > 2 ))
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR (professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2 ))
SELECT D.name FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE T.cost_of_treatment <= 1000;
SELECT D.name FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY D.name HAVING SUM(T.cost_of_treatment) <= 1000;
SELECT p.first_name FROM Professionals p WHERE p.first_name NOT IN ( SELECT d.name FROM Dogs d )
SELECT P.first_name FROM Professionals AS P LEFT JOIN Dogs AS D ON P.first_name = D.name WHERE D.name IS NULL UNION SELECT O.first_name FROM Owners AS O LEFT JOIN Dogs AS D ON O.first_name = D.name WHERE D.name IS NULL;
SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (SELECT T.professional_id FROM Treatments T);
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2;
SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN ( SELECT T.professional_id, COUNT(*) as treatment_count FROM Treatments T GROUP BY T.professional_id HAVING COUNT(*) >= 2 ) AS TREATMENT_COUNT ON P.professional_id = TREATMENT_COUNT.professional_id;
SELECT B.breed_name, COUNT(D.dog_id) as num_dogs FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_name ORDER BY num_dogs DESC;
SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1;
SELECT O.owner_id, O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id JOIN Charges C ON T.treatment_id = C.charge_id GROUP BY O.owner_id, O.last_name ORDER BY SUM(C.charge_amount) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN ( SELECT d.owner_id, SUM(tt.cost_of_treatment) as total_cost FROM Dogs d JOIN Treatments tt ON d.dog_id = tt.dog_id GROUP BY d.owner_id ) t ON o.owner_id = t.owner_id WHERE t.total_cost = (SELECT MAX(total_cost) FROM ( SELECT d.owner_id, SUM(tt.cost_of_treatment) as total_cost FROM Dogs d JOIN Treatments tt ON d.dog_id = tt.dog_id GROUP BY d.owner_id ) AS subquery)
SELECT tt.treatment_type_description, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY tt.treatment_type_description ORDER BY total_cost ASC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatment_Types tt JOIN ( SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ) t ON tt.treatment_type_code = t.treatment_type_code ORDER BY t.total_cost ASC LIMIT 1;
SELECT o.owner_id, o.zip_code, SUM(c.charge_amount) AS total_charges FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Charges c ON d.dog_id = c.charge_id GROUP BY o.owner_id, o.zip_code ORDER BY total_charges DESC LIMIT 1;
SELECT O.owner_id, O.zip_code, SUM(T.cost_of_treatment) AS TotalCost FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY TotalCost DESC LIMIT 1;
SELECT P.professional_id, P.cell_number FROM Professionals P JOIN ( SELECT T.professional_id, COUNT(DISTINCT T.treatment_type_code) AS treatment_count FROM Treatments T GROUP BY T.professional_id ) AS Treatment_Count ON P.professional_id = Treatment_Count.professional_id WHERE Treatment_Count.treatment_count >= 2;
SELECT P.professional_id, P.cell_number FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(DISTINCT T.treatment_type_code) >= 2;
WITH AverageCost AS ( SELECT AVG(cost_of_treatment) as avg_cost FROM Treatments ) SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE cost_of_treatment < (SELECT avg_cost FROM AverageCost);
WITH AverageCost AS ( SELECT AVG(cost_of_treatment) as avg_cost FROM Treatments ) SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE cost_of_treatment < (SELECT avg_cost FROM AverageCost);
SELECT T.date_of_treatment AS treatment_date, P.first_name AS professional_first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT T.date_of_treatment, P.first_name AS 'operating_professional' FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT tt.treatment_type_description, t.cost_of_treatment FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT T.treatment_id, T.cost_of_treatment, TT.treatment_type_description FROM Treatments T JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT O.first_name, O.last_name, D.size_code AS dog_size FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id;
SELECT O.first_name, O.last_name, D.size_code FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;
SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id WHERE D.breed_code IN ( SELECT B.breed_code FROM Breeds B GROUP BY B.breed_code HAVING COUNT(B.breed_code) = (SELECT MIN(COUNT(B.breed_code)) FROM Breeds) ) ORDER BY D.name;
SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE D.breed_code IN ( SELECT B.breed_code FROM Breeds AS B GROUP BY B.breed_code HAVING COUNT(DISTINCT D.dog_id) = (SELECT MIN(count) FROM ( SELECT breed_code, COUNT(*) as count FROM Dogs GROUP BY breed_code ) t) );
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';
SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id;
SELECT D.date_arrived, D.date_departed FROM Dogs D JOIN Treatments T ON D.dog_id = T.dog_id;
SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs);
SELECT T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.age = ( SELECT MIN(age) FROM Dogs );
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT email_address FROM Professionals WHERE state = 'Hawaii' UNION SELECT email_address FROM Professionals WHERE state = 'Wisconsin';
SELECT date_arrived AS 'Arriving Date', date_departed AS 'Departing Date' FROM Dogs;
SELECT date_arrived AS Arrival_Date, date_departed AS Departure_Date FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT P.professional_id) FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id;
SELECT COUNT(DISTINCT p.professional_id) FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT P.role_code, P.street, P.city, P.state FROM Professionals P WHERE P.city LIKE '%West%';
SELECT P.role_code, P.street, P.city, P.state FROM Professionals P WHERE P.city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT MAX(cost_of_treatment) AS max_cost FROM Treatments;
SELECT T2.cost_of_treatment FROM Treatments AS T1 JOIN Treatments AS T2 ON T1.treatment_id = T2.treatment_id WHERE T1.date_of_treatment = ( SELECT MAX(date_of_treatment) FROM Treatments )
SELECT COUNT(DISTINCT dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.owner_id IS NULL;
SELECT COUNT(*) FROM Owners LEFT JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.dog_id IS NULL;
SELECT COUNT(*) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT COUNT(*) FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
-- Find the states where both owners and professionals live SELECT state FROM Owners INTERSECT SELECT state FROM Professionals; -- Find the dog name, age, and weight of dogs that were abandoned SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(age) AS average_age FROM Dogs;
SELECT AVG(age) AS average_age FROM Dogs;
SELECT MAX(age) AS max_age FROM Dogs;
SELECT MAX(age) AS max_age FROM Dogs;
SELECT c1.charge_type AS charge_type, SUM(c2.charge_amount) AS total_cost FROM Charges c1 JOIN Charges c2 ON c1.charge_id = c2.charge_id GROUP BY c1.charge_type;
SELECT c1.charge_type AS Charge_Type, SUM(c2.charge_amount) AS Total_Amount FROM Charges c1 JOIN Charges c2 ON c1.charge_id = c2.charge_id GROUP BY c1.charge_type;
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges;
SELECT T1.charge_type, MAX(T1.charge_amount) AS max_charge_amount FROM Charges AS T1 GROUP BY T1.charge_type;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address AS Email, cell_number AS Cell_Phone, home_phone AS Home_Phone FROM Professionals;
SELECT DISTINCT B.breed_name, S.size_description FROM Breeds AS B JOIN Sizes AS S ON 1 = 1;
SELECT DISTINCT B.breed_code, S.size_code FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Sizes S ON D.size_code = S.size_code;
SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT P.first_name, T.treatment_type_description AS treatment_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'French';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Net_Worth_Millions = ( SELECT MAX(Net_Worth_Millions) FROM singer );
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) as Number_of_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC;
SELECT Citizenship, COUNT(*) as Count FROM singer GROUP BY Citizenship ORDER BY Count DESC;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT s.Name, song.Title FROM singer AS s JOIN song ON s.Singer_ID = song.Singer_ID;
SELECT s.Name, so.Title FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID;
SELECT DISTINCT Name FROM singer WHERE Singer_ID IN ( SELECT Singer_ID FROM song WHERE Sales > 300000 );
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT Name, COUNT(DISTINCT Song_ID) as num_songs FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY Name HAVING COUNT(DISTINCT Song_ID) > 1;
SELECT s.Name FROM singer s JOIN ( SELECT Singer_ID, COUNT(*) as Song_Count FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1 ) ss ON s.Singer_ID = ss.Singer_ID;
SELECT s.Name, SUM(s.Sales) AS Total_Sales FROM singer s JOIN song ss ON s.Singer_ID = ss.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(sg.Sales) AS Total_Sales FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Name;
SELECT s.Name FROM singer s LEFT JOIN song ON s.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL;
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(Citizenship) > 1;
SELECT count(*) FROM Other_Available_Features;
SELECT feature_id FROM Other_Available_Features WHERE feature_name = 'AirCon';
SELECT p.property_type_description, COUNT(DISTINCT o.feature_id) AS num_features FROM Properties p JOIN Other_Property_Features opf ON p.property_id = opf.property_id JOIN Other_Available_Features o ON opf.feature_id = o.feature_id GROUP BY p.property_type_code;
SELECT P.property_name FROM Properties P JOIN Ref_Property_Types RPT ON P.property_type_code = RPT.property_type_code WHERE (RPT.property_type_description IN ('House', 'Apartment')) AND P.room_count > 1;
