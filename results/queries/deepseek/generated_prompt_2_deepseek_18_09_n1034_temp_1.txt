SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id, p.first_name, p.last_name HAVING COUNT(DISTINCT m.year) = 2;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id, p.first_name, p.last_name HAVING COUNT(DISTINCT m.year) = 2;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') AND EXISTS ( SELECT 1 FROM matches m2 WHERE m2.winner_id = p.player_id AND m2.tourney_name = 'WTA Championships' ) AND EXISTS ( SELECT 1 FROM matches m3 WHERE m3.winner_id = p.player_id AND m3.tourney_name = 'Australian Open' );
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY SUM(r.tours) DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, m.winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(m.winner_id) DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id ORDER BY m.minutes DESC LIMIT 1;
SELECT p.player_id, p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, AVG(r.ranking_points) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.player_id, p.first_name, SUM(r.ranking_points) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, SUM(r.ranking_points) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY p.first_name;
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code;
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC;
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT mm.winner_id) FROM matches mm JOIN players p ON mm.winner_id = p.player_id WHERE mm.tourney_name = 'WTA Championships' AND p.hand = 'L';
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_level = 'WTA' AND p.hand = 'L';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON m.winner_id = p.player_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT "hand", COUNT(DISTINCT "player_id") FROM players GROUP BY "hand";
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT "name", "tonnage" FROM "ship" ORDER BY "name" DESC;
SELECT name, date, result FROM battle;
SELECT b.name, SUM(d.killed), MAX(SUM(d.killed)) OVER (), MIN(SUM(d.killed)) OVER () FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.name;
SELECT AVG(injured) FROM death;
SELECT d.id, d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id;
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed + d.injured) > 10;
SELECT s."id", s."name", SUM(d."injured") FROM "ship" s JOIN "death" d ON s."id" = d."caused_by_ship_id" GROUP BY s."id", s."name" ORDER BY SUM(d."injured") DESC;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage != '225' OR s.tonnage IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s."lost_in_battle" AND s.location = 'English Channel' WHERE s."lost_in_battle" IS NULL;
SELECT "note" FROM "death" WHERE "note" LIKE '%East%';
SELECT line1, line2 FROM Addresses;
SELECT address_line1, address_line2 FROM Addresses;
SELECT COUNT(DISTINCT `student_course_id`) FROM Transcript_Contents;
SELECT COUNT(*) FROM Transcript_Contents;
SELECT `description` FROM Courses WHERE `course_id` = 'MathCourseID'; -- Replace MathCourseID with the actual ID of the math course if known.
SELECT description FROM Courses WHERE subject = 'Math';
SELECT;
INSERT INTO Locations (`location_id`, `zip_code`, `address`) VALUES (..., ..., 'Port Chelsea');
SELECT d.department_name, d.department_id, COUNT(c.course_id) FROM Departments d JOIN Courses c ON d.department_id = c.department_id JOIN Transcript_Contents t ON c.course_id = t.student_course_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(c.course_id) DESC LIMIT 1;
SELECT d.department_id, d.name, COUNT(d.degree_id) FROM Departments d JOIN Degrees deg ON d.department_id = deg.department_id GROUP BY d.department_id, d.name ORDER BY COUNT(d.degree_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT dept_id) FROM Courses;
SELECT COUNT(DISTINCT department_name) FROM Departments;
SELECT COUNT(DISTINCT course_name) FROM Courses;
SELECT COUNT(DISTINCT degree_name) FROM Degrees;
SELECT COUNT(DISTINCT d.degree_type) FROM Degrees d JOIN Courses c ON d.course_id = c.course_id WHERE c.department = 'Engineering';
SELECT COUNT(DISTINCT degree) FROM Courses WHERE department = 'Engineering';
SELECT Sections.section_id, Courses.course_name, Courses.description FROM Sections INNER JOIN Courses ON Sections.course_id = Courses.course_id;
SELECT name, description FROM Sections;
SELECT c.course_id, c.name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) <= 2;
SELECT cs.course_id FROM Course_Sections cs GROUP BY cs.course_id HAVING COUNT(cs.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT DISTINCT section_name FROM Sections ORDER BY section_name DESC;
SELECT student_course_id FROM Transcript_Contents;
SELECT t.transcript_id, t.transcript_date, COUNT(tc.student_course_id) FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY DATE_FORMAT(t.transcript_date, '%Y-%m') -- Assuming the date represents a semester or term ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT description FROM Departments WHERE department_name LIKE '%computer%';
SELECT DISTINCT c.department_id FROM Courses c WHERE c.course_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id HAVING COUNT(DISTINCT tc.transcript_id) >= 2;
SELECT DISTINCT se1.student_id FROM Student_Enrollments se1 JOIN Student_Enrollments se2 ON se1.student_id = se2.student_id AND se1.course_id <> se2.course_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id WHERE tc.transcript_id IN ( SELECT transcript_id FROM Transcripts WHERE other_details LIKE '%Bachelor%' );
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Programs p ON e.program_id = p.program_id WHERE p.degree_level = 'Bachelor's';
SELECT c.program_id, COUNT(tc.student_course_id) FROM Transcript_Contents tc JOIN Courses c ON tc.student_course_id = c.course_id GROUP BY c.program_id ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT DS.name, COUNT(SC.student_course_id) FROM Student_Courses SC JOIN Degree_Summary DS ON SC.degree_summary_id = DS.degree_summary_id GROUP BY DS.name ORDER BY COUNT(SC.student_course_id) DESC LIMIT 1;
SELECT t.transcript_id, COUNT(DISTINCT tc.student_course_id) FROM Transcript_Contents tc JOIN Transcripts t ON tc.transcript_id = t.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(DISTINCT tc.student_course_id) DESC LIMIT 1;
SELECT d.degree_id, d.summary, COUNT(DISTINCT sc.student_id) FROM Transcript_Contents tc JOIN Student_Courses sc ON tc.student_course_id = sc.student_course_id JOIN Degree d ON sc.degree_id = d.degree_id GROUP BY d.degree_id, d.summary ORDER BY COUNT(DISTINCT sc.student_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id ORDER BY SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id ORDER BY SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) DESC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t WHERE t.transcript_id NOT IN (SELECT tc.transcript_id FROM Transcript_Contents tc) ORDER BY t.transcript_id;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id WHERE tc.student_course_id IS NULL;
SELECT DISTINCT c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id ORDER BY c.course_name;
SELECT DISTINCT c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id;
SELECT c.course_name FROM Courses c JOIN Transcripts t ON c.transcript_id = t.transcript_id GROUP BY c.course_name ORDER BY COUNT(t.transcript_id) DESC LIMIT 1;
SELECT C.course_name FROM Courses C JOIN Transcript_Contents TC ON C.course_id = TC.student_course_id GROUP BY C.course_name ORDER BY COUNT(DISTINCT TC.transcript_id) DESC LIMIT 1;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.address_id = a.address_id LEFT JOIN Student_Courses sc ON s.student_id = sc.student_course_id WHERE a.state = 'NC' AND sc.student_course_id IS NULL;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.address_id = a.address_id LEFT JOIN Student_Courses sc ON s.student_id = sc.student_id WHERE a.state = 'North Carolina' AND sc.student_course_id IS NULL;
SELECT T.transcript_date, T.transcript_id FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(TC.student_course_id) >= 2;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
SELECT phone_number FROM People WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT s.mobile_number FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Courses sc ON s.student_id = sc.student_id WHERE sc.student_course_id = 0;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Transcripts t ON s.student_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;
CREATE TABLE Students ( student_id INT PRIMARY KEY, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), -- other fields as necessary );
SELECT s.first_name FROM Students s JOIN Addresses ca ON s.current_address = ca.address_id JOIN Addresses pa ON s.permanent_address = pa.address_id WHERE ca.address <> pa.address;
SELECT s.first_name FROM Students s JOIN Addresses a1 ON s.permanent_address_id = a1.address_id JOIN Addresses a2 ON s.current_address_id = a2.address_id WHERE a1.street_address <> a2.street_address OR a1.city <> a2.city OR a1.state <> a2.state OR a1.zipcode <> a2.zipcode;
SELECT a.address_id, a.line1, a.city, a.postal_code, COUNT(s.student_id) FROM Addresses a JOIN Students s ON a.address_id = s.address_id GROUP BY a.address_id, a.line1, a.city, a.postal_code ORDER BY SELECT a.address_id, a.line1, a.city, a.postal_code, COUNT(s.student_id) DESC LIMIT 1;
SELECT A.address_id, A.line1, A.line2 FROM Addresses AS A JOIN Students AS S ON A.address_id = S.address_id GROUP BY A.address_id, A.line1, A.line2 ORDER BY COUNT(S.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_id = 5;
SELECT MIN(transcript_date) , transcript_id, other_details FROM Transcripts WHERE transcript_date IS NOT NULL;
SELECT;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT student_course_id, COUNT(DISTINCT transcript_id) FROM Transcript_Contents GROUP BY student_course_id;
SELECT student_course_id, COUNT(*) FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.Model, cd.MPG FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId ORDER BY CAST(cd.MPG AS FLOAT) DESC LIMIT 1;
SELECT AVG(CAST(cd.Horsepower AS INTEGER)) AS AvgHorsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year < 1980;
SELECT AVG(cars_data.Horsepower) AS AvgHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year < 1980;
SELECT AVG(cd.Edispl) AS AvgEdispl FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE ml.Model = 'Volvo';
SELECT AVG(cd.Edispl) AS AverageEdispl FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'Volvo';
SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS MaxAcceleration FROM cars_data GROUP BY Cylinders;
SELECT ml.Model, COUNT(cn.Make) AS MakeCount FROM car_names cn JOIN model_list ml ON cn.Model = ml.Model GROUP BY ml.Model ORDER BY MakeCount DESC, ml.Model ASC;
SELECT Model, COUNT(DISTINCT Maker) AS VersionCount FROM model_list GROUP BY Model ORDER BY VersionCount DESC LIMIT 1;
SELECT COUNT(*) AS NumberOfCarsWithMoreThanFourCylinders FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS NumberOfCarsWithMoreThanFourCylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders > 4;
SELECT COUNT(*) AS NumberOfCars FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cn.Year = 1980;
SELECT COUNT(*) AS NumberOfCarsMadeIn1980 FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Year = 1980;
-- Step 1: Find the Id of American Motor Company from car_makers table SELECT Id FROM car_makers WHERE FullName = 'American Motor Company'; -- Let's assume the above query returns a single row with Id = X (this is hypothetical; you need to run it in your database) -- Step 2: Find all models produced by American Motor Company using the found Id SELECT COUNT(*) FROM model_list WHERE Maker = X; -- Replace X with the actual Id returned from step 1
SELECT COUNT(*) AS NumberOfModels FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'American Motor Company';
SELECT cm."FullName", cm."Id" FROM "car_makers" AS cm JOIN "model_list" AS ml ON cm."Id" = ml."Maker" GROUP BY cm."Id" HAVING COUNT(ml."Model") > 3;
SELECT cm.Maker, cm.Id FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Maker, cm.Id HAVING COUNT(ml.Model) > 3;
SELECT DISTINCT ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;
-- Step 1: Find Id of General Motors in car_makers SELECT Id FROM car_makers WHERE Maker = 'General Motors'; -- Assuming the above query returns one or more IDs, let's say it returned ids 1 and 2 for simplicity. -- Step 2: Get models made by General Motors SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Id IN (1, 2); -- Step 3: Find cars weighed more than 3500 SELECT cn.Model FROM cars_data cd JOIN car_names cn ON cd."Id" = cn."MakeId" WHERE cd."Weight" > 3500; -- Assuming the above query returns models 'model1', 'model2', etc. -- Step 4: Get unique models from these heavy cars SELECT DISTINCT cn.Model FROM car_names cn JOIN (SELECT "Id", "MakeId" FROM cars_data WHERE "Weight" > 3500) cd ON cn."MakeId" = cd."Id"; -- Step 5: Combine results of General Motors models and heavy car models (SELECT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Id IN (1, 2)) UNION (SELECT DISTINCT cn.Model FROM car_names cn JOIN (SELECT "Id", "MakeId" FROM cars_data WHERE "Weight" > 3500) cd ON cn."MakeId" = cd."Id");
SELECT DISTINCT cd.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT c.Year FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < 4000 OR cd.Weight > 3000;
SELECT c.Horsepower FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId ORDER BY c.Accelerate DESC LIMIT 1;
SELECT c.Horsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId ORDER BY cd.Accelerate DESC LIMIT 1;
SELECT cd.Cylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cn.Make = 'Volvo' ORDER BY cd.Accelerate ASC LIMIT 1;
-- Step 1: Get the ModelId for Volvo models from car_names WITH volvo_models AS ( SELECT MakeId, Model FROM car_names WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'Volvo') ), -- Step 2: Join with cars_data to get acceleration and cylinder data volvo_accelerate_cylinders AS ( SELECT cm.Cylinders, ccd.Year, ccd.Accelerate FROM volvo_models vm JOIN cars_data ccd ON vm.MakeId = ccd.Id ), -- Step 3: Find the model with the least acceleration min_accelerate_volvo AS ( SELECT MIN(Accelerate) AS MinAccelerate FROM volvo_accelerate_cylinders ), -- Step 4: Retrieve the number of cylinders for the model with the least acceleration result AS ( SELECT Cylinders FROM volvo_accelerate_cylinders WHERE Accelerate = (SELECT MinAccelerate FROM min_accelerate_volvo) ) SELECT Cylinders FROM result;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Accelerate > ( SELECT MAX(CAST(Horsepower AS REAL)) -- Assuming Horsepower is stored as TEXT and needs conversion to REAL FROM cars_data );
SELECT COUNT(*) AS NumberOfCarsWithGreaterAcceleration FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Accelerate > ( SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY CAST(car_names.Horsepower AS INTEGER) DESC LIMIT 1 );
SELECT COUNT(DISTINCT c.CountryName) AS NumberOfCountriesWithMoreThanTwoCarMakers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2;
SELECT COUNT(DISTINCT c.CountryId) AS NumberOfCountriesWithMoreThanTwoMakers FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2;
SELECT COUNT(*) AS NumberOfCars FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) AS NumberOfCarsWithMoreThanSixCylinders FROM cars_data WHERE Cylinders > 6;
SELECT cn.Make, cd.Horsepower FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY CAST(cd.Horsepower AS INTEGER) DESC LIMIT 1;
SELECT cn.Model, cd.Horsepower FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(CAST(cd2.Horsepower AS INTEGER)) FROM cars_data cd2) AND cd.Cylinders <= 3;
-- Assuming 'minimum horsepower' refers to a specific value not stored, we look for cars with less than 4 cylinders. SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.Model = cd.Id -- Corrected this line assuming Id in cars_data should reference MakeId from car_names WHERE cd.Cylinders < 4;
SELECT MAX(cd.MPG) AS MaxMPG FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders = 8 OR cd.Year < 1980;
SELECT MAX(cd.MPG) AS MaxMPG FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders = 8 OR cd.Year < 1980;
SELECT ml.Model FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE cd.Weight < 3500 AND NOT EXISTS ( SELECT 1 FROM car_makers cm WHERE cm.Maker = ml.Maker AND cm.FullName = 'Ford Motor Company' )
SELECT DISTINCT cnc.Model FROM cars_data cd JOIN car_names cnc ON cd.Id = cnc.MakeId LEFT JOIN car_makers cm ON cnc.Model = cm.Maker WHERE cd.Weight < 3500 AND cm.Maker <> 'Ford';
SELECT DISTINCT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;
SELECT DISTINCT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Country IS NULL;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cm.Id) > 3;
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.Model) >= 2 AND COUNT(cm.Id) > 3;
SELECT cm.Country AS CountryId FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE cm.Maker = 'fiat';
SELECT DISTINCT c.CountryId, c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Maker IN ( SELECT MakeId FROM car_names WHERE Model = 'fiat' ) OR c.CountryId IN ( SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3 );
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Abbreviation = 'JetBlue';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT DISTINCT a.Airline, a.Abbreviation FROM airlines a JOIN airports ap ON a.Country = ap.Country WHERE ap.Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) AS NumberOfAirlines FROM airlines;
SELECT COUNT(*) AS TotalAirlines FROM airlines;
SELECT COUNT(*) AS NumberOfAirports FROM airports;
SELECT COUNT(*) AS NumberOfAirports FROM airports;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT COUNT(*) AS NumberOfFlights FROM flights;
SELECT * FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) AS NumberOfAirlinesFromUSA FROM airlines WHERE Country = 'USA';
SELECT COUNT(DISTINCT Airline) AS NumberOfAirlinesInUSA FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'SomeAirport';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) AS NumberOfFlightsToATO FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) AS NumberOfFlightsIntoATO FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'ATO';
SELECT COUNT(*) AS FlightsFromAberdeen FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlightsArrivingInAberdeen FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports src_airport ON f.SourceAirport = src_airport.AirportCode JOIN airports dest_airport ON f.DestAirport = dest_airport.AirportCode WHERE src_airport.City = 'Aberdeen' AND dest_airport.City = 'Ashley';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportCode = 'ASY';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportCode = 'ASY';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.SourceAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';
SELECT a.City, COUNT(*) AS ArrivalCount FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY ArrivalCount DESC LIMIT 1;
SELECT airports.City, COUNT(*) AS DestinationCount FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY airports.City ORDER BY DestinationCount DESC LIMIT 1;
SELECT a.City, COUNT(f.FlightNo) AS DepartingFlightsCount FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY DepartingFlightsCount DESC LIMIT 1;
SELECT a.City, COUNT(f.SourceAirport) AS SourceCount FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY SourceCount DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(SourceAirport) DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airlines.Airline, COUNT(flights.FlightNo) AS NumberOfFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline ORDER BY NumberOfFlights DESC LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS FlightCount FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN ( SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ) f ON a.uid = f.Airline ORDER BY f.FlightCount ASC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline, airlines.Abbreviation, airlines.Country FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2;
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport IN ('APG', 'CVO');
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND NOT EXISTS ( SELECT 1 FROM flights f2 WHERE f2.Airline = a.uid AND f2.SourceAirport = 'APG' );
SELECT DISTINCT a.Airline FROM airlines a INNER JOIN flights f ON a.uid = f.Airline AND f.SourceAirport = 'CVO' WHERE NOT EXISTS ( SELECT 1 FROM flights f2 WHERE f2.Airline = a.uid AND f2.SourceAirport = 'APG' );
SELECT airlines.Airline, COUNT(flights.FlightNo) AS FlightCount FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY airlines.Airline HAVING COUNT(flights.FlightNo) >= 10;
SELECT a.Airline, COUNT(f.FlightNo) AS FlightCount FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10;
SELECT a.Airline, COUNT(f.FlightNo) AS NumberOfFlights FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200;
SELECT a.Airline, COUNT(f.FlightNo) AS FlightCount FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING FlightCount < 200;
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
SELECT f.FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportCode = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport IN ('ABZ', 'ACT');
SELECT DISTINCT a.AirportName FROM airports AS a LEFT JOIN flights AS f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.FlightNo IS NULL;
SELECT DISTINCT AirportCode FROM ( SELECT SourceAirport AS AirportCode FROM flights UNION SELECT DestAirport AS AirportCode FROM flights ) AS AllFlights EXCEPT SELECT AirportCode FROM airports;
SELECT COUNT(*) AS NumberOfEmployees FROM employee;
SELECT COUNT(*) AS NumberOfEmployees FROM employee;
SELECT * FROM "employee" ORDER BY "Age" ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS NumberOfEmployees FROM employee GROUP BY City;
SELECT City, COUNT(*) AS NumberOfEmployees FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Location, COUNT(DISTINCT Shop_ID) AS NumberOfShops FROM shop GROUP BY Location ORDER BY NumberOfShops DESC;
SELECT Location, COUNT(Shop_ID) AS NumberOfShops FROM shop GROUP BY Location;
SELECT s."Manager_name", s."District" FROM shop s WHERE s."Number_products" = (SELECT MAX(Number_products) FROM shop);
SELECT s."Manager_name", s."District" FROM "shop" s WHERE s."Number_products" = ( SELECT MAX("Number_products") FROM "shop" );
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT s."Name" FROM "shop" s WHERE s."Number_products" > (SELECT AVG(s2."Number_products") FROM "shop" s2);
SELECT e."Name" FROM evaluation ev JOIN employee e ON ev."Employee_ID" = e."Employee_ID" GROUP BY e."Name" ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e."Name" FROM "employee" e JOIN "evaluation" ev ON e."Employee_ID" = ev."Employee_ID" GROUP BY e."Employee_ID" ORDER BY COUNT(ev."Year_awarded") DESC LIMIT 1;
SELECT e."Name" FROM evaluation ev JOIN employee e ON ev."Employee_ID" = e."Employee_ID" ORDER BY ev."Bonus" DESC LIMIT 1;
SELECT e."Name" FROM employee e JOIN evaluation ev ON e."Employee_ID" = ev."Employee_ID" ORDER BY ev."Bonus" DESC LIMIT 1;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s."Name" AS Shop_Name FROM "shop" s JOIN ( SELECT h."Shop_ID", COUNT(*) AS Employee_Count FROM "hiring" h GROUP BY h."Shop_ID" ORDER BY Employee_Count DESC LIMIT 1 ) AS shop_employee_count ON s."Shop_ID" = shop_employee_count."Shop_ID";
SELECT s."Name", COUNT(h."Employee_ID") AS NumberOfEmployees FROM shop s JOIN hiring h ON s."Shop_ID" = h."Shop_ID" GROUP BY s."Shop_ID" ORDER BY NumberOfEmployees DESC LIMIT 1;
SELECT s."Name" FROM shop s LEFT JOIN hiring h ON s."Shop_ID" = h."Shop_ID" WHERE h."Employee_ID" IS NULL;
SELECT s.Name AS Shop_Names_With_No_Employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT s."Name" AS Shop_Name, COUNT(h."Employee_ID") AS Number_of_Employees FROM "shop" s JOIN "hiring" h ON s."Shop_ID" = h."Shop_ID" GROUP BY s."Name";
SELECT s."Name" AS Shop_Name, COUNT(h."Employee_ID") AS Number_of_Employees FROM "shop" s JOIN "hiring" h ON s."Shop_ID" = h."Shop_ID" GROUP BY s."Name";
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM "hiring";
SELECT * FROM "hiring";
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District AND s2.Number_products < 3000 WHERE s1.Number_products > 10000;
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT Location) AS distinct_locations FROM shop;
SELECT COUNT(DISTINCT Location) AS Distinct_Store_Locations FROM shop;
SELECT COUNT(*) AS NumberOfDocuments FROM Documents;
SELECT COUNT(*) AS NumberOfDocuments FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT `Document_Name`, `Template_ID` FROM Documents WHERE `Document_Description` LIKE '%w%';
SELECT `Document_Name`, `Template_ID` FROM Documents WHERE `Document_Description` LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
INSERT INTO Documents (`Document_ID`, `Template_ID`, `Document_Name`, `Document_Description`, `Other_Details`) VALUES (987654, 30, 'Robbin CV', 'A sample CV for Robbin', NULL);
SELECT COUNT(DISTINCT Template_ID) AS UniqueTemplates FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS NumberOfDifferentTemplates FROM Documents;
SELECT COUNT(*) AS NumberOfDocumentsUsingPPT FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Type_Code = 'PPT';
SELECT COUNT(*) AS NumberOfDocumentsUsingPPT FROM Documents WHERE Template_ID = 21;
SELECT Template_ID, COUNT(Document_ID) AS NumberOfDocuments FROM Documents GROUP BY Template_ID;
SELECT Template_ID, COUNT(*) AS NumberOfDocuments FROM Documents GROUP BY Template_ID;
SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID ORDER BY Count DESC LIMIT 1;
SELECT Template_ID, COUNT(*) AS Count FROM Documents GROUP BY Template_ID ORDER BY Count DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1;
SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT DISTINCT Template_ID FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS NumberOfTemplates FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS NumberOfTemplates FROM Documents;
SELECT t.Template_ID, t.Version, tt.Type_Code FROM Templates t JOIN TemplateTypes tt ON t.Type_Code = tt.Type_Code;
SELECT Template_ID, Version_Number, Type_Code FROM Templates;
SELECT DISTINCT Template_ID FROM Documents;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');
SELECT Template_ID FROM Templates WHERE Code = 'PP' OR Code = 'PPT';
SELECT;
SELECT COUNT(DISTINCT Template_ID) AS NumberOfCVTemplates FROM Documents WHERE Template_ID = (SELECT Template_ID FROM Templates WHERE Template_Name = 'CV');
SELECT DISTINCT Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Template_Type_Code, COUNT(*) AS NumberOfTemplates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS NumberOfTemplates FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS NumberOfTemplates FROM Templates GROUP BY Template_Type_Code ORDER BY NumberOfTemplates DESC LIMIT 1;
SELECT Template_Type, COUNT(*) AS Count FROM Templates GROUP BY Template_Type ORDER BY Count DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) < 3;
SELECT Template_ID FROM Templates GROUP BY Template_ID HAVING COUNT(Template_ID) < 3;
SELECT Template_ID, MIN(Version) AS Smallest_Version FROM Templates GROUP BY Template_ID ORDER BY Smallest_Version ASC LIMIT 1;
SELECT t.Template_Type_Code, MIN(t.Version) AS Lowest_Version FROM Templates t GROUP BY t.Template_Type_Code;
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'How to write a CV';
SELECT Template_ID FROM Documents WHERE Document_Name = 'Database';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code LIKE 'BK%';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Code = 'BK';
SELECT Template_ID, COUNT(DISTINCT Document_ID) AS NumberOfDocuments FROM Documents GROUP BY Template_ID;
SELECT Template_Type AS Type, COUNT(*) AS NumberOfDocuments FROM Templates GROUP BY Template_Type;
SELECT Template_ID, COUNT(*) AS NumberOfDocuments FROM Documents GROUP BY Template_ID ORDER BY NumberOfDocuments DESC LIMIT 1;
SELECT Template_ID, COUNT(*) AS UsageCount FROM Documents GROUP BY Template_ID ORDER BY UsageCount DESC LIMIT 1;
SELECT t.Template_Type_Code FROM Templates t LEFT JOIN Documents d ON t.Template_Type_Code = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT DISTINCT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IS NULL;
SELECT Template_ID, Template_Type_Code, Template_Description FROM Templates;
SELECT Template_ID, Template_Description FROM Templates;
SELECT Description FROM Template_Types WHERE Template_Type_Code = 'AD';
SELECT Description FROM TemplateTypes WHERE TemplateTypeCode = 'AD';
SELECT;
SELECT Template_Type_Code FROM Templates WHERE Template_Description = 'Book';
SELECT DISTINCT t.Template_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT DISTINCT Document_Description FROM Documents WHERE Template_ID IS NOT NULL;
SELECT Template_ID FROM Templates WHERE Template_Type_Description = 'Presentation';
SELECT Template_ID FROM Templates WHERE Template_Description = 'Presentation';
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;
SELECT COUNT(*) AS NumberOfParagraphs FROM Paragraphs;
SELECT COUNT(*) AS NumberOfParagraphs FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'How to read a book');
SELECT;
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT p.Paragraph_ID, p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';
SELECT Document_ID, Document_Name FROM Documents;
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 2394;
SELECT;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS NumberOfParagraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS NumberOfParagraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT D.`Document_ID`, D.`Document_Name`, COUNT(P.`Paragraph_ID`) AS NumberOfParagraphs FROM Documents D LEFT JOIN Paragraphs P ON D.`Document_ID` = P.`Document_ID` GROUP BY D.`Document_ID`, D.`Document_Name`;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN ( SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID ORDER BY p.Paragraph_Count DESC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2;
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland');
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT COUNT(*) AS NumberOfTeachers FROM teacher;
SELECT COUNT(*) AS Total_Teachers FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age IN ('32', '33');
SELECT Name FROM teacher WHERE Age IN (32, 33);
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;
SELECT Hometown FROM teacher ORDER BY CAST(Age AS INTEGER) DESC LIMIT 1;
SELECT "Hometown", COUNT("Teacher_ID") AS NumberOfTeachers FROM "teacher" GROUP BY "Hometown";
SELECT Hometown, COUNT(*) AS NumberOfTeachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT "Hometown", COUNT(*) AS Count FROM teacher GROUP BY "Hometown" ORDER BY Count DESC;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT t.Name AS TeacherName, c.Course AS CourseName FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t."Name", c."Course" FROM "teacher" t JOIN "course_arrange" ca ON t."Teacher_ID" = ca."Teacher_ID" JOIN "course" c ON ca."Course_ID" = c."Course_ID" ORDER BY t."Name" ASC;
SELECT t."Name" AS Teacher_Name, c."Course" AS Course_Name FROM teacher t JOIN course_arrange ca ON t."Teacher_ID" = ca."Teacher_ID" JOIN course c ON ca."Course_ID" = c."Course_ID" ORDER BY t."Name" ASC;
SELECT t.Name FROM teacher t JOIN course c ON t.Teacher_ID = c.Course_ID WHERE c.Course = 'Math';
SELECT DISTINCT t."Name" FROM "teacher" t JOIN "course_arrange" ca ON t."Teacher_ID" = ca."Teacher_ID" WHERE ca."Course_ID" IN ( SELECT c."Course_ID" FROM "course" c WHERE c."Course" = 'Math' );
SELECT t."Name", COUNT(ca."Course_ID") AS "Number of Courses" FROM teacher t JOIN course_arrange ca ON t."Teacher_ID" = ca."Teacher_ID" GROUP BY t."Name";
SELECT t."Name", COUNT(ca."Course_ID") AS "Number of Courses" FROM "teacher" t JOIN "course_arrange" ca ON t."Teacher_ID" = ca."Teacher_ID" GROUP BY t."Name";
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT t."Name" FROM teacher t LEFT JOIN course_arrange ca ON t."Teacher_ID" = ca."Teacher_ID" WHERE ca."Course_ID" IS NULL;
SELECT COUNT(*) AS NumberOfVisitorsBelowAge30 FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG("Num_of_Staff") AS "Average_Num_of_Staff" FROM "museum" WHERE "Open_Year" < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > ( SELECT MIN(m2.Num_of_Staff) FROM museum m2 WHERE strftime('%Y', m2.Open_Year) > '2010' );
SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID HAVING COUNT(vi.Museum_ID) > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = CAST(vi.visitor_ID AS INTEGER) GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vi.Total_spent) DESC LIMIT 1;
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL;
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID ORDER BY vi.Num_of_Ticket DESC LIMIT 1;
SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Max_Tickets FROM visit;
SELECT SUM(v.Total_spent) AS Total_Expense FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;
SELECT DISTINCT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' AND m.Open_Year > '2011';
-- Step 1: Identify museums opened after 2010 WITH MuseumsAfter2010 AS ( SELECT Museum_ID FROM museum WHERE Open_Year > '2010' ), -- Step 2: Find all visitors who have visited at least one of those museums VisitorsWhoVisitedMuseumsAfter2010 AS ( SELECT DISTINCT v.ID FROM visitor v JOIN visit vi ON v.ID = CAST(vi.visitor_ID AS INT) WHERE vi.Museum_ID IN (SELECT Museum_ID FROM MuseumsAfter2010) ), -- Step 3: Count the total number of visitors TotalVisitors AS ( SELECT COUNT(*) AS TotalVisitorCount FROM visitor ) -- Step 4: Calculate the number of visitors who did not visit any museum opened after 2010 SELECT TotalVisitorCount - COUNT(DISTINCT v.ID) AS VisitorsNotVisitedAfter2010 FROM visitor v, TotalVisitors;
SELECT COUNT(*) AS NumberOfMuseums FROM museum WHERE Open_Year < '2008' OR Open_Year > '2013';
SELECT COUNT(*) AS total_number_of_players FROM players;
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(*) AS total_number_of_matches FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(m.winner_age) AS avg_winner_age, AVG(p.birth_date) AS avg_loser_age FROM matches m JOIN players p ON m.loser_id = p.player_id;
SELECT AVG(loser_age) AS avg_loser_age FROM matches;
SELECT AVG(p.winner_rank) AS avg_winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id;
SELECT AVG(winner_rank) AS avg_winner_rank FROM matches;
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches;
SELECT MIN(m.loser_rank) AS best_rank_of_losers FROM matches m JOIN rankings r ON m.loser_id = r.player_id;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;
SELECT tourney_name FROM ( SELECT tourney_name, COUNT(match_num) AS match_count FROM matches GROUP BY tourney_name ) AS subquery WHERE match_count > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id HAVING COUNT(DISTINCT m.year) = 2;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id HAVING COUNT(DISTINCT m.year) = 2;
SELECT COUNT(*) AS number_of_matches FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(DISTINCT match_num) AS matches_played FROM matches WHERE year IN (2013, 2016);
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON m.winner_id = p.player_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT CONCAT(first_name, ' ', last_name) AS full_name, birth_date FROM players ORDER BY birth_date;
SELECT "first_name", "last_name" FROM players WHERE "hand" = 'L' ORDER BY "birth_date";
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name, p.country_code ORDER BY COUNT(DISTINCT r.tours) DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT p.first_name, p.last_name, m.winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY m.winner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, SUM(m.winner_rank_points) AS total_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p."first_name", p."last_name" FROM players p JOIN matches m ON p."player_id" = m."winner_id" WHERE m."tourney_name" = 'Australian Open' ORDER BY m."winner_rank_points" DESC LIMIT 1;
SELECT p1.first_name AS winner_first_name, p1.last_name AS winner_last_name, p2.first_name AS loser_first_name, p2.last_name AS loser_last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id ORDER BY m.minutes DESC LIMIT 1;
SELECT m.winner_name, m.loser_name FROM matches m ORDER BY m.minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking_points) AS avg_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p INNER JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(DISTINCT player_id) AS num_players FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT year, COUNT(*) AS matches_count FROM matches GROUP BY year;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT mm.winner_name) AS num_different_winners FROM matches mm JOIN players pl ON mm.winner_id = pl.player_id WHERE pl.hand = 'L' AND mm.tourney_name = 'WTA Championships';
SELECT COUNT(DISTINCT p.player_id) AS left_handed_winners FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_level = 'W' AND p.hand = 'L';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT "hand", COUNT(DISTINCT "player_id") AS number_of_players FROM players GROUP BY "hand";
SELECT "hand", COUNT("player_id") AS num_players FROM players GROUP BY "hand";
SELECT COUNT(*) AS CapturedShips FROM ship WHERE disposition_of_ship = 'Captured';
SELECT "name", "tonnage" FROM "ship" ORDER BY "name" DESC;
SELECT name, date, result FROM battle;
SELECT b.id AS battle_id, b.name AS battle_name, MIN(d.killed) AS min_deaths, MAX(d.killed) AS max_deaths FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name;
SELECT AVG(injured) AS average_injuries FROM death;
SELECT * FROM ship WHERE tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN death d ON b.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT s.id AS ship_id, s.name AS ship_name, SUM(d.injured) AS total_injuries FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY total_injuries DESC;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) AS distinct_results FROM battle;
SELECT COUNT(DISTINCT b.id) AS Battles_Without_Tonnage_225 FROM battle b LEFT JOIN ship s ON b.id = s."lost_in_battle" AND s.tonnage = '225' WHERE s.tonnage IS NULL;
-- Query to find the battles involving 'Lettice' and 'HMS Atalanta' SELECT b.name AS battle_name, b.date AS battle_date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s."lost_in_battle" AND s.location = 'English Channel' WHERE s.id IS NULL;
SELECT "note" FROM "death" WHERE "note" LIKE '%East%';
CREATE TABLE Addresses ( address_id INT AUTO_INCREMENT PRIMARY KEY, line1 VARCHAR(255) NOT NULL, line2 VARCHAR(255), city VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, zip_code VARCHAR(10) NOT NULL, country VARCHAR(255) NOT NULL );
SELECT address_line1, address_line2 FROM Addresses;
SELECT COUNT(*) AS total_courses FROM Transcript_Contents;
SELECT COUNT(DISTINCT student_course_id) AS total_courses FROM Transcript_Contents;
SELECT description FROM courses WHERE course_name = 'math';
SELECT cd.description FROM Course_Details cd JOIN Courses c ON cd.course_id = c.course_id WHERE c.subject = 'Math';
SELECT zipcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT;
SELECT d.department_name, d.department_id FROM Departments d JOIN ( SELECT tc.transcript_id, t.department_id FROM Transcript_Contents tc JOIN Transcripts t ON tc.transcript_id = t.transcript_id ) AS department_courses ON d.department_id = department_courses.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(DISTINCT department_courses.transcript_id) DESC LIMIT 1;
SELECT d.department_id, d.name FROM Departments d JOIN Degrees deg ON d.department_id = deg.department_id GROUP BY d.department_id, d.name ORDER BY COUNT(deg.degree_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) AS num_departments_with_degrees FROM Departments;
SELECT COUNT(DISTINCT department) AS number_of_departments FROM Courses;
SELECT COUNT(DISTINCT course_name) AS distinct_course_names FROM ( SELECT c.course_name FROM Transcript_Contents tc JOIN Courses c ON tc.transcript_id = c.course_id UNION SELECT d.degree_name FROM Degrees d JOIN Students s ON s.degree_id = d.degree_id ) AS all_names;
SELECT COUNT(DISTINCT student_course_id) AS NumberOfUniqueCourses FROM Transcript_Contents;
SELECT COUNT(DISTINCT degree_type) AS NumberOfDegrees FROM Degrees;
SELECT COUNT(DISTINCT degree) AS number_of_degrees FROM Courses WHERE department = 'Engineering';
SELECT;
SELECT section_name, description FROM Sections;
SELECT c.course_name, c.course_id FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2;
SELECT c.course_id, c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id GROUP BY c.course_id, c.course_name HAVING COUNT(tc.transcript_id) < 2;
SELECT DISTINCT section_name FROM Sections ORDER BY section_name DESC;
SELECT DISTINCT course_name FROM Courses ORDER BY course_name DESC;
SELECT tc.transcript_id, COUNT(tc.student_course_id) AS student_count FROM Transcript_Contents tc GROUP BY tc.transcript_id ORDER BY student_count DESC LIMIT 1;
SELECT T.transcript_id, T.transcript_date, COUNT(TC.student_course_id) AS student_count FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id ORDER BY student_count DESC LIMIT 1;
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT d.department_description FROM Departments d JOIN Courses c ON d.department_id = c.department_id WHERE c.course_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, t1.transcript_id AS transcript_id_1, t2.transcript_id AS transcript_id_2 FROM Students s JOIN Transcript_Contents tc1 ON s.student_id = tc1.student_course_id JOIN Transcripts t1 ON tc1.transcript_id = t1.transcript_id JOIN Transcript_Contents tc2 ON s.student_id = tc2.student_course_id JOIN Transcripts t2 ON tc2.transcript_id = t2.transcript_id WHERE t1.transcript_id <> t2.transcript_id;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(e.degree_program_id) AS num_programs FROM Students s JOIN Enrollments e ON s.student_id = e.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(e.degree_program_id) = 2;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id WHERE tc.transcript_id IN ( SELECT transcript_id FROM Transcripts WHERE transcript_date BETWEEN '1980-01-01' AND '2000-12-31' )
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrollments se ON s.student_id = se.student_id JOIN Courses c ON se.course_id = c.course_id WHERE c.course_type = 'Bachelors';
SELECT c.kind_of_program, COUNT(DISTINCT tc.student_course_id) AS student_count FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.transcript_id GROUP BY c.kind_of_program ORDER BY student_count DESC LIMIT 1;
SELECT ds.degree_summary_name, COUNT(DISTINCT tc.student_course_id) AS student_count FROM Transcript_Contents tc JOIN Student_Course sc ON tc.student_course_id = sc.student_course_id JOIN Degree_Summary ds ON sc.degree_summary_id = ds.degree_summary_id GROUP BY ds.degree_summary_name ORDER BY student_count DESC LIMIT 1;
SELECT t.transcript_id, COUNT(tc.student_course_id) AS student_count FROM Transcript_Contents tc JOIN Transcripts t ON tc.transcript_id = t.transcript_id GROUP BY t.transcript_id ORDER BY student_count DESC LIMIT 1;
SELECT s.program_id, p.summary FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id JOIN Transcripts t ON tc.transcript_id = t.transcript_id JOIN Programs p ON s.program_id = p.program_id GROUP BY s.program_id, p.summary ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(t.transcript_id) AS number_of_enrollments FROM Students s JOIN Transcript_Contents t ON s.student_id = t.student_course_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(tc.transcript_id) AS num_enrollments FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (0, 2); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (96, 8); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (76, 9); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (7, 4); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (0, 15); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (76, 15); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (0, 6); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (96, 13); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (76, 12); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (28982908, 11); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (2, 8); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (0, 5); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (8, 5); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (45105806, 8); INSERT INTO Transcript_Contents (`student_course_id`, `transcript_id`) VALUES (70882679, 6);
SELECT DISTINCT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id WHERE tc.student_course_id IS NULL;
SELECT DISTINCT c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.transcript_id ORDER BY c.course_name;
SELECT DISTINCT c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id;
SELECT c.name AS CourseName FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.transcript_id GROUP BY c.name ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT c.name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id GROUP BY c.name ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.student_id = a.student_id LEFT JOIN Transcript_Contents t ON s.student_id = t.student_id WHERE a.state = 'North Carolina' AND t.transcript_id IS NULL;
SELECT s.last_name FROM Students s LEFT JOIN Student_Degrees sd ON s.student_id = sd.student_id LEFT JOIN Addresses a ON s.address_id = a.address_id WHERE a.state = 'North Carolina' AND sd.degree_id IS NULL;
SELECT t.`transcript_date`, t.`transcript_id` FROM Transcripts t JOIN Transcript_Contents tc ON t.`transcript_id` = tc.`transcript_id` GROUP BY t.`transcript_id` HAVING COUNT(tc.`student_course_id`) >= 2;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
CREATE TABLE Person ( person_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50) ); CREATE TABLE Phone ( phone_id INT PRIMARY KEY, person_id INT, phone_number VARCHAR(15), FOREIGN KEY (person_id) REFERENCES Person(person_id) ); INSERT INTO Person (`person_id`, `first_name`, `last_name`) VALUES (1, 'Timmothy', 'Ward'); INSERT INTO Phone (`phone_id`, `person_id`, `phone_number`) VALUES (1, 1, '555-1234');
SELECT;
SELECT s.first_name, s.middle_name, s.last_name FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id JOIN Students s ON tc.student_course_id = s.student_id WHERE tc.student_course_id = 0;
SELECT;
SELECT first_name, middle_name, last_name FROM Students WHERE transcript_id IN ( SELECT MIN(transcript_id) FROM Transcripts );
SELECT s.first_name, s.middle_name, s.last_name FROM Transcript_Contents tc JOIN Students s ON tc.student_course_id = s.student_id ORDER BY t.transcript_date ASC LIMIT 1;
SELECT DISTINCT t.student_first_name FROM Transcripts t JOIN Addresses a1 ON t.address_id = a1.address_id AND a1.address_type = 'current' JOIN Addresses a2 ON t.address_id = a2.address_id AND a2.address_type = 'permanent' WHERE a1.address <> a2.address;
SELECT s.first_name FROM Students s WHERE s.permanent_address <> s.current_address;
SELECT a.address_id, a.line1, a.city, a.state, a.postal_code, COUNT(s.student_id) AS student_count FROM Addresses a JOIN Students s ON a.address_id = s.address_id GROUP BY a.address_id, a.line1, a.city, a.state, a.postal_code ORDER BY student_count DESC LIMIT 1;
SELECT t.transcript_id, t.transcript_date, COUNT(tc.student_course_id) AS student_count FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date ORDER BY student_count DESC LIMIT 1;
SELECT AVG(TIMESTAMPDIFF(SECOND, '1970-01-01 00:00:00', transcript_date)) AS average_transcript_time FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
INSERT INTO Transcripts (`transcript_id`, `transcript_date`, `other_details`) VALUES (5, '2013-06-30 13:01:40', NULL);
SELECT MIN(transcript_date) AS earliest_date FROM Transcripts;
SELECT COUNT(*) AS total_transcripts FROM Transcripts;
SELECT COUNT(*) AS total_transcripts FROM Transcripts;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;
SELECT student_course_id, COUNT(*) as transcript_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY transcript_count DESC LIMIT 1;
SELECT student_course_id, COUNT(transcript_id) AS count_of_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY count_of_transcripts DESC;
SELECT T.transcript_id, T.transcript_date FROM Transcripts T LEFT JOIN ( SELECT transcript_id, COUNT(*) AS count FROM Transcript_Contents GROUP BY transcript_id ) TC ON T.transcript_id = TC.transcript_id ORDER BY TC.count ASC LIMIT 1;
SELECT T.`transcript_id`, T.`transcript_date` FROM Transcripts AS T JOIN ( SELECT TC.`transcript_id`, COUNT(*) as num_results FROM Transcript_Contents AS TC GROUP BY TC.`transcript_id` ) AS TC_COUNT ON T.`transcript_id` = TC_COUNT.`transcript_id` ORDER BY TC_COUNT.num_results ASC, T.`transcript_date` ASC LIMIT 1;
SELECT tc.transcript_id, s.semester FROM Transcript_Contents tc JOIN Students s ON tc.student_course_id = s.student_id WHERE s.degree IN ('Master', 'Bachelor') GROUP BY s.semester, tc.transcript_id HAVING COUNT(DISTINCT s.degree) = 2;
SELECT DISTINCT t1.transcript_id FROM Transcripts t1 JOIN Students s ON t1.student_course_id = s.student_id WHERE s.degree_level IN ('Bachelor', 'Master') GROUP BY t1.transcript_id, s.degree_level HAVING COUNT(DISTINCT s.degree_level) > 1;
SELECT COUNT(DISTINCT address) AS number_of_different_addresses FROM Students s JOIN Addresses a ON s.student_id = a.address_id;
SELECT DISTINCT a.address_id, a.street, a.city, a.state, a.zipcode FROM Addresses a JOIN Students s ON a.address_id = s.address_id;
SELECT * FROM Students ORDER BY name DESC;
SELECT * FROM Students ORDER BY last_name DESC;
INSERT INTO Transcripts (`transcript_id`, `transcript_date`, `other_details`) VALUES (1, '2023-04-15 10:20:30', NULL); ... INSERT INTO Transcripts (`transcript_id`, `transcript_date`, `other_details`) VALUES (15, '1998-11-22 12:18:29', NULL);
SELECT description FROM Sections WHERE name = 'h';
SELECT DISTINCT s.first_name FROM Students s JOIN Addresses a ON s.student_id = a.student_id JOIN Countries c ON a.country_code = c.country_code WHERE c.country_name = 'Haiti' OR s.phone_number = '09700166582';
SELECT DISTINCT s.first_name FROM Students s JOIN Addresses a ON s.student_id = a.student_id LEFT JOIN Phone_Numbers pn ON s.student_id = pn.student_id WHERE a.Address = 'Haiti' OR pn.Phone_number = '09700166582';
SELECT title FROM Cartoon ORDER BY title ASC;
SELECT title FROM Cartoon ORDER BY title ASC;
SELECT * FROM Cartoon WHERE Director = 'Ben Jones';
SELECT name FROM Cartoon WHERE director = 'Ben Jones';
SELECT COUNT(*) AS NumberOfCartoonsByJosephKuhr FROM Cartoon WHERE Writer = 'Joseph Kuhr';
SELECT COUNT(*) AS NumberOfCartoonsByKuhr FROM Cartoon WHERE Writer = 'Joseph Kuhr';
SELECT title, director FROM Cartoon ORDER BY air_date;
SELECT Name, Director FROM Cartoon ORDER BY Air_Date;
SELECT title FROM Cartoon WHERE director IN ('Ben Jones', 'Brandon Vietti');
SELECT title FROM Cartoon WHERE director IN ('Ben Jones', 'Brandon Vietti');
SELECT country, COUNT(*) AS number_of_channels FROM TV_series GROUP BY country ORDER BY number_of_channels DESC LIMIT 1;
SELECT country, COUNT(*) AS num_channels FROM TV_channels GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT COUNT(DISTINCT name) AS NumberOfSeriesNames, COUNT(DISTINCT content) AS NumberOfContents FROM TV_series;
-- Count unique series in TV_series SELECT COUNT(*) AS UniqueTVSeries FROM (SELECT DISTINCT SeriesID FROM TV_series) AS DistinctTVSeries; -- Count unique cartoon names in Cartoon SELECT COUNT(*) AS UniqueCartoons FROM (SELECT DISTINCT Name FROM Cartoon) AS DistinctCartoons; -- Sum the counts to get total unique series and contents SELECT (SELECT COUNT(*) FROM (SELECT DISTINCT SeriesID FROM TV_series) AS DistinctTVSeries) + (SELECT COUNT(*) FROM (SELECT DISTINCT Name FROM Cartoon) AS DistinctCartoons) AS TotalUniqueItems;
SELECT;
CREATE TABLE TV_series ( Rating REAL, Title TEXT, ReleaseDate TEXT, Season INTEGER, Episode INTEGER, Duration TEXT, Viewers INTEGER, NetworkRating INTEGER, NetworkPopularity INTEGER );
SELECT Package_Option FROM TV_channels WHERE Channel_Name = 'Sky Network';
SELECT DISTINCT c.package_option FROM Channel c JOIN TV_series t ON c.channel_id = t.channel_id WHERE t.series_name = 'Sky Radio';
SELECT COUNT(DISTINCT channel) AS NumberOfChannelsUsingEnglish FROM TV_series WHERE language = 'English';
SELECT COUNT(DISTINCT channel) AS EnglishChannelsCount FROM TV_series WHERE language = 'English';
SELECT Language, COUNT(DISTINCT Channel) AS NumberOfChannels FROM TV_series GROUP BY Language ORDER BY NumberOfChannels ASC LIMIT 1;
SELECT Language, COUNT(*) AS NumberOfChannels FROM TV_series GROUP BY Language ORDER BY NumberOfChannels ASC LIMIT 1;
SELECT Language, COUNT(*) AS NumberOfChannels FROM TV_series GROUP BY Language;
SELECT 'English' AS Language, COUNT(DISTINCT channel_id) AS NumberOfChannels FROM TV_series UNION ALL SELECT 'OtherLanguage', COUNT(DISTINCT channel_id) FROM TV_series;
SELECT t.Name, c.Title FROM Cartoon c JOIN TV_series t ON c.Series_Name = t.Name WHERE c.Title = 'The Rise of the Blue Beetle!';
SELECT t.name AS SeriesName FROM TV_series t JOIN Cartoon c ON t.episode = c.episode WHERE c.title = 'The Rise of the Blue Beetle!';
SELECT Cartoon.title FROM Cartoon JOIN TV_series ON Cartoon.series_name = TV_series.series_name WHERE TV_series.series_name = 'Sky Radio';
SELECT Cartoon.title FROM Cartoon JOIN TV_series ON Cartoon.channel = TV_series.channel_id WHERE TV_series.series_name = 'Sky Radio';
SELECT * FROM TV_series ORDER BY rating;
SELECT episode_number, title, rating FROM TV_series ORDER BY rating ASC;
SELECT "Episode", "Rating" FROM TV_series ORDER BY "Rating" DESC LIMIT 3;
SELECT episode_number, title, rating FROM TV_series ORDER BY rating DESC LIMIT 3;
SELECT MIN(share) AS MinShare, MAX(share) AS MaxShare FROM TV_series;
SELECT MAX(share) AS MaxShare, MIN(share) AS MinShare FROM TV_series;
SELECT air_date FROM TV_series WHERE title = 'A Love of a Lifetime'; SELECT air_date FROM Cartoon WHERE title = 'A Love of a Lifetime';
SELECT "Air_Date" FROM TV_series WHERE "Title" = 'A Love of a Lifetime';
-- Assuming there is an episode titled "A Love of a Lifetime" and we want to find its weekly rank SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT;
SELECT ts.TV_Channel AS TVChannel, ts."Name" AS SeriesName FROM TV_series ts JOIN Cartoon c ON ts.Episode = c.Episode WHERE c."Title" = 'A Love of a Lifetime';
SELECT;
SELECT TS.name AS SeriesName, TS.episode_number AS EpisodeNumber FROM TV_series TS WHERE TS.channel_id IN ( SELECT channel_id FROM TV_channel WHERE name = 'Sky Radio' );
SELECT;
SELECT Director, COUNT(DISTINCT Title) AS NumberOfCartoons FROM Cartoon GROUP BY Director;
SELECT Director, COUNT(*) AS NumberOfCartoons FROM Cartoon GROUP BY Director;
SELECT c.production_code, c.channel FROM Cartoon c ORDER BY c.air_date DESC LIMIT 1;
SELECT "Production Code" AS Channel, "Title", "Director", "Release Date", "Episode Number", "Series Order" FROM Cartoon ORDER BY STR_TO_DATE("Release Date", '%m-%d-%Y') DESC LIMIT 1;
SELECT DISTINCT tc.package_choice, ts.series_name FROM TV_channels AS tc JOIN TV_series AS ts ON tc.channel_id = ts.channel_id WHERE tc.hd_tv = 'Yes';
SELECT;
SELECT DISTINCT c.country FROM TV_channels tc JOIN Cartoon ca ON tc.cartoon_id = ca.id WHERE ca.writer = 'Todd Casey';
SELECT DISTINCT c.country_name FROM Cartoon AS ca JOIN Country AS c ON ca.country_id = c.country_id WHERE ca.writer = 'Todd Casey';
SELECT DISTINCT tvs.Country_code FROM TV_series AS tvs LEFT JOIN Cartoon AS ctn ON tvs.TV_seriesID = ctn.CartoonID AND ctn.Writer = 'Todd Casey' WHERE ctn.CartoonID IS NULL;
SELECT DISTINCT Country FROM TV_series WHERE ID IN ( SELECT SeriesID FROM Cartoon WHERE Writer = 'Todd Casey' );
SELECT DISTINCT tvs.name, tvs.country FROM TV_series tvs JOIN Cartoon c ON tvs.season_number = c.episode_num WHERE c.director IN ('Ben Jones', 'Michael Chang');
SELECT DISTINCT TV_series.name, TV_series.country FROM TV_series JOIN Cartoon ON TV_series.showID = Cartoon.cartoonID WHERE Cartoon.director IN ('Ben Jones', 'Michael Chang');
SELECT DISTINCT nation, pixel_aspect_ratio FROM TV_series WHERE language != 'English';
SELECT pixel_aspect_ratio, country_of_origin FROM TV_channels WHERE language != 'English';
SELECT country_id FROM ( SELECT country_id, COUNT(*) AS channel_count FROM tv_channels GROUP BY country_id ) AS subquery WHERE channel_count > 2;
SELECT channel_id FROM TV_series GROUP BY channel_id HAVING COUNT(channel_id) > 2;
SELECT DISTINCT t.Channel_ID FROM TV_channels t LEFT JOIN Cartoon c ON t.Channel_ID = c.Director_ID AND c.Director = 'Ben Jones' WHERE c.Cartoon_Title IS NULL;
SELECT DISTINCT c.id FROM Cartoon c LEFT JOIN TV_series t ON c.channelID = t.id WHERE t.id IS NULL OR NOT EXISTS ( SELECT 1 FROM TV_series ts WHERE ts.id = c.channelID AND ts.director = 'Ben Jones' );
SELECT DISTINCT t.package_option FROM TV_series t WHERE NOT EXISTS ( SELECT 1 FROM Cartoon c WHERE c.director = 'Ben Jones' AND c.tv_id = t.tv_id );
SELECT DISTINCT ts.Package_Options FROM TV_series ts LEFT JOIN Cartoon c ON ts.Channel_ID = c.Series_ID AND c.Director = 'Ben Jones' WHERE c.Director IS NULL;
SELECT COUNT(*) AS NumberOfPokerPlayers FROM poker_player;
SELECT COUNT(*) AS NumberOfPokerPlayers FROM poker_player;
SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC;
SELECT "Earnings" FROM "poker_player" ORDER BY "Earnings" DESC;
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player";
SELECT "Final_Table_Made", "Best_Finish" FROM "poker_player";
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player;
SELECT "Money_Rank" FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1;
SELECT "Money_Rank" FROM "poker_player" ORDER BY "Earnings" DESC LIMIT 1;
SELECT MAX(Final_Table_Made) AS Max_Final_Tables FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) AS Max_Final_Tables FROM poker_player WHERE Earnings < 200000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID;
SELECT p.Name FROM people p JOIN poker_player ps ON p.People_ID = ps.People_ID;
SELECT p.Name FROM poker_player AS po JOIN people AS p ON po.People_ID = p.People_ID WHERE po.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM poker_player AS po JOIN people AS p ON po.People_ID = p.People_ID ORDER BY po.Final_Table_Made ASC;
SELECT p.Birth_Date FROM poker_player AS p JOIN people AS pe ON p.People_ID = pe.People_ID ORDER BY p.Earnings ASC LIMIT 1;
SELECT p.Birth_Date FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY p.Earnings ASC LIMIT 1;
SELECT pp.Money_Rank FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY p.Height DESC LIMIT 1;
SELECT p."Money_Rank" FROM "poker_player" p JOIN "people" pe ON p."People_ID" = pe."People_ID" ORDER BY pe."Height" DESC LIMIT 1;
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT AVG(p.Earnings) AS Average_Earnings FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS NumberOfPeople FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2;
SELECT "Name", "Birth_Date" FROM "people" ORDER BY "Name" ASC;
SELECT "Name", "Birth_Date" FROM "people" ORDER BY "Name" ASC;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT p."Name" FROM "people" p LEFT JOIN "poker_player" pp ON p."People_ID" = pp."People_ID" WHERE pp."Poker_Player_ID" IS NULL;
SELECT p."Name" FROM people p LEFT JOIN poker_player pp ON p."People_ID" = pp."People_ID" WHERE pp."Poker_Player_ID" IS NULL;
SELECT COUNT(DISTINCT Nationality) AS Distinct_Nationalities FROM people;
SELECT COUNT(DISTINCT Nationality) AS NumberOfDifferentNationalities FROM people;
SELECT;
SELECT id, name FROM contestants ORDER BY name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT;
CREATE TABLE votes ( id INT PRIMARY KEY, date_created DATE, state VARCHAR(2), ... );
SELECT name FROM contestants WHERE name != 'Jessie Alloway';
SELECT DISTINCT state, create_time FROM votes;
SELECT c.contestant_id, c.name FROM contestants c JOIN votes v ON c.contestant_id = v.contestant_id GROUP BY c.contestant_id, c.name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_id, c.name FROM contestants c LEFT JOIN votes v ON c.contestant_id = v.contestant_id GROUP BY c.contestant_id, c.name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
SELECT COUNT(*) AS NumberOfVotes FROM your_table_name WHERE state IN ('NY', 'CA');
SELECT COUNT(*) AS number_of_unvoted_contestants FROM contestants c LEFT JOIN votes v ON c.contestant_id = v.contestant_id WHERE v.vote_id IS NULL;
SELECT;
SELECT c.create_date, c.state, v.phone_number FROM contestants c JOIN votes v ON c.id = v.contestant_id WHERE c.name = 'Tabatha Gehling';
SELECT DISTINCT v1.area_code FROM voters v1 JOIN votes v2 ON v1.voter_id = v2.voter_id AND v2.contestant_name = 'Tabatha Gehling' JOIN votes v3 ON v1.voter_id = v3.voter_id AND v3.contestant_name = 'Kelly Clauss' WHERE v2.contestant_name = 'Tabatha Gehling' AND v3.contestant_name = 'Kelly Clauss';
SELECT name FROM contestants WHERE name LIKE '%Al%';
SELECT name FROM countries WHERE independence_year > 1950;
SELECT name FROM nations WHERE founded_year > 1950;
SELECT COUNT(*) AS number_of_republics FROM countries WHERE government_type = 'republic';
SELECT;
SELECT SUM(surface_area) AS total_surface_area FROM country WHERE region = 'Caribbean';
SELECT;
SELECT;
SELECT;
SELECT r.region_name FROM City c JOIN Region r ON c.region_id = r.region_id WHERE c.city_name = 'Kabul';
SELECT;
SELECT;
SELECT;
SELECT;
SELECT;
INSERT INTO countries (country_name, region, population) VALUES ('Angola', 'Africa', 328662);
SELECT;
SELECT AVG(life_expectancy) AS avg_life_exp FROM countries WHERE region = 'Central Africa';
SELECT;
SELECT country_name FROM countries WHERE continent = 'Asia' ORDER BY life_expectancy ASC LIMIT 1;
SELECT Name FROM Country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
-- Assuming 'Asia' is represented by a constant or lookup value in the database SELECT SUM(c.population) AS total_population, MAX(c.gnp) AS max_gnp FROM countries c JOIN continents con ON c.continent_id = con.continent_id WHERE con.name = 'Asia';
-- Assuming we have tables Country_Population and Country_GNP SELECT SUM(cp.population) AS total_population, MAX(cg.GNP) AS largest_gnp FROM Country_Population cp JOIN Country_GNP cg ON cp.CountryName = cg.CountryName WHERE cp.CountryName IN ('Japan', 'India', 'China', 'South Korea', ...); -- List all Asian countries
Table countries: - country_id (PK) - country_name - continent - is_republic (boolean flag, e.g., 0 for monarchy, 1 for republic) Table country_info: - country_id (FK to countries.country_id) - life_expectancy
SELECT AVG(LifeExpectancy) AS AverageLifeExp FROM Country WHERE Continent = 'Africa' AND IsRepublic = 1;
INSERT INTO continents (continent_id, continent_name, surface_area) VALUES (1, 'Asia', 44579000), (2, 'Europe', 10180000);
SELECT SUM(surface_area) AS total_surface_area FROM countries WHERE continent IN ('Asia', 'Europe');
SELECT;
SELECT SUM(population) AS total_population FROM population WHERE district = 'Gelderland';
SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM Nations WHERE GovernmentType = 'US territory';
SELECT AVG(gnp) AS mean_gnp, SUM(population) AS total_population FROM nations WHERE is_territory = TRUE;
SELECT COUNT(DISTINCT language_name) AS unique_languages FROM languages;
SELECT COUNT(DISTINCT Language) AS NumberOfDistinctLanguages FROM YourTableName;
SELECT;
SELECT COUNT(DISTINCT government_type) AS unique_governments FROM countries WHERE continent = 'Africa';
SELECT;
SELECT;
SELECT;
SELECT;
SELECT country_name FROM countries ORDER BY LENGTH(languages) DESC LIMIT 1;
SELECT n.Name FROM Nations n JOIN NationLanguage nl ON n.NationID = nl.NationID GROUP BY n.Name ORDER BY COUNT(DISTINCT nl.LanguageID) DESC LIMIT 1;
SELECT Continent, COUNT(DISTINCT Language) AS NumLanguages FROM CountryLanguage GROUP BY Continent ORDER BY NumLanguages DESC LIMIT 1;
SELECT;
SELECT;
CREATE TABLE nations ( id INT PRIMARY KEY, name VARCHAR(255), languages_spoken TEXT );
SELECT DISTINCT c.country_name FROM countries c JOIN languages l1 ON c.country_id = l1.country_id AND l1.language = 'English' JOIN languages l2 ON c.country_id = l2.country_id AND l2.language = 'French';
SELECT c.name FROM countries c JOIN languages l ON c.code = l.country_code WHERE l.language IN ('English', 'French') GROUP BY c.name HAVING COUNT(DISTINCT l.language) = 2;
SELECT;
SELECT;
SELECT COUNT(DISTINCT continent) AS NumberOfDistinctContinents FROM countries c JOIN country_language cl ON c.country_id = cl.country_id WHERE cl.language = 'Chinese';
SELECT;
SELECT DISTINCT region_name FROM regions WHERE languages IN ('English', 'Dutch');
SELECT DISTINCT r.RegionName FROM Regions r JOIN Languages l ON r.CountryCode = l.CountryCode WHERE l.LanguageName IN ('Dutch', 'English') ORDER BY r.RegionName;
SELECT country_name FROM countries WHERE official_language IN ('English', 'Dutch');
SELECT DISTINCT c.name FROM countries c JOIN languages l ON c.code = l.country_code WHERE l.official = 'true' AND (l.language IN ('English', 'Dutch'));
SELECT;
SELECT;
SELECT cl.country_code, COUNT(DISTINCT cl.language) AS num_languages FROM country_languages cl JOIN country_government cg ON cl.country_code = cg.country_code WHERE cg.government_type = 'republic' GROUP BY cl.country_code HAVING COUNT(DISTINCT cl.language) = 1;
SELECT DISTINCT l.language FROM Languages l JOIN Countries c ON l.country_id = c.id WHERE c.government_type = 'republic';
SELECT city_name FROM cities WHERE language = 'English' ORDER BY population DESC LIMIT 1;
SELECT;
SELECT c.name, c.population, c.life_expectancy FROM countries c JOIN continents co ON c.continent_id = co.id WHERE co.name = 'Asia' ORDER BY c.area DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM Countries WHERE Continent = 'Asia' ORDER BY Area DESC LIMIT 1;
SELECT AVG(c.life_expectancy) AS avg_life_exp FROM countries c JOIN country_languages cl ON c.country_id = cl.country_id JOIN languages l ON cl.language_id = l.language_id WHERE l.official_status = 'not official';
SELECT AVG(life_expectancy) AS mean_life_exp FROM countries WHERE NOT (official_languages LIKE '%English%');
SELECT SUM(c.population) AS total_pop_non_english FROM countries c JOIN languages l ON c.country_id = l.country_id WHERE l.official = 'No';
SELECT COUNT(*) FROM people p JOIN countries c ON p.country_id = c.id WHERE c.language != 'English';
SELECT;
SELECT;
SELECT COUNT(DISTINCT language) AS unique_languages_count FROM ( SELECT DISTINCT l.language_id, l.official_status FROM languages l JOIN countries c ON l.country_id = c.country_id WHERE c.foundation_year < 1930 AND l.official_status = 'official' ) AS filtered_languages;
SELECT COUNT(DISTINCT ol.language) AS total_distinct_languages FROM countries c JOIN official_languages ol ON c.country_name = ol.country_name WHERE c.founded_year < 1930;
SELECT DISTINCT name FROM countries WHERE continent != 'Europe' AND surface_area > (SELECT MAX(surface_area) FROM countries WHERE continent = 'Europe');
SELECT name FROM countries WHERE area > (SELECT MAX(area) FROM countries WHERE continent = 'Europe');
-- Step 1: Find the minimum population in Asia SELECT MIN(population) AS min_asia_population FROM asia_countries; -- Let's assume the result of the above query is stored in a variable or directly used here. -- For demonstration, let's call this value 'asia_min_pop'. SET @asia_min_pop = (SELECT MIN(population) FROM asia_countries); -- Step 2: Select African countries with population less than the minimum Asia population SELECT DISTINCT name FROM countries WHERE continent = 'Africa' AND population < @asia_min_pop;
SELECT name FROM countries WHERE continent = 'Africa';
SELECT name FROM countries WHERE continent = 'Asia' AND population > ( SELECT MIN(population) FROM countries WHERE continent = 'Africa' );
SELECT name FROM countries WHERE continent = 'Asia' AND population > (SELECT MAX(population) FROM countries WHERE continent = 'Africa');
SELECT country_code FROM country_languages WHERE language != 'English';
SELECT c.country_code FROM countries c LEFT JOIN languages l ON c.country_code = l.country_code AND l.language = 'English' WHERE l.language IS NULL;
SELECT DISTINCT c.country_code FROM countries c JOIN languages l ON c.country_code = l.country_code WHERE l.is_official = 'false' AND l.language != 'English';
SELECT DISTINCT c.country_code FROM countries c LEFT JOIN country_language cl ON c.country_code = cl.country_code LEFT JOIN languages l ON cl.language_id = l.language_id WHERE l.language_name != 'English';
SELECT DISTINCT c.country_code FROM countries c LEFT JOIN speakers s ON c.country_code = s.country_code AND s.language = 'English' WHERE s.country_code IS NULL AND c.government_form != 'Republic';
SELECT DISTINCT c.country_code FROM countries c LEFT JOIN languages l ON c.country_code = l.country_code AND l.language = 'English' WHERE l.country_code IS NULL AND c.government_form <> 'Republic';
SELECT DISTINCT city_name FROM cities WHERE country IN ( SELECT country_code FROM countries WHERE region = 'Europe' AND NOT EXISTS ( SELECT 1 FROM official_languages WHERE country_code = countries.country_code AND language = 'English' ) );
SELECT DISTINCT c.city_name FROM cities c JOIN countries co ON c.country_name = co.country_name WHERE co.continent = 'Europe' AND c.is_official_language = 0;
SELECT DISTINCT Cities.name AS CityName FROM Cities JOIN Countries ON Cities.country_id = Countries.id JOIN Languages ON Countries.code = Languages.country_code WHERE Countries.continent = 'Asia' AND Languages.language = 'Chinese' AND Languages.official = 'True';
SELECT DISTINCT c.city_name FROM cities c JOIN countries cnt ON c.country_id = cnt.country_id JOIN languages l ON cnt.country_id = l.country_id WHERE cnt.continent = 'Asia' AND l.language_name = 'Chinese';
SELECT c.name, c.independence_year, c.surface_area FROM country c JOIN population p ON c.country_id = p.country_id ORDER BY p.population ASC LIMIT 1;
SELECT name, year_of_independence, surface_area FROM countries ORDER BY population ASC LIMIT 1;
SELECT c.population, c.name, l.leader FROM Countries c JOIN Populations p ON c.id = p.country_id JOIN Leaders l ON c.id = l.country_id JOIN Areas a ON c.id = a.country_id ORDER BY a.area DESC LIMIT 1;
SELECT name, population, head_of_state FROM countries ORDER BY area DESC LIMIT 1;
SELECT c.country_name, COUNT(l.language) AS num_languages FROM countries c JOIN languages l ON c.country_id = l.country_id GROUP BY c.country_name HAVING COUNT(l.language) >= 3;
SELECT country_name, COUNT(language) AS num_languages FROM countries GROUP BY country_name HAVING COUNT(language) > 2;
SELECT district, COUNT(city_name) AS number_of_cities FROM cities WHERE population > (SELECT AVG(population) FROM cities) GROUP BY district;
SELECT District, COUNT(*) AS NumberOfCitiesAboveAveragePopulation FROM ( SELECT City.*, AVG(City.Population) OVER () AS AveragePopulation FROM City ) AS AvgPopulatedCities WHERE Population > AveragePopulation GROUP BY District;
SELECT gf.name AS government_form_name, c.population FROM countries c JOIN government_forms gf ON c.gov_form_id = gf.id WHERE c.life_exp > 72;
CREATE TABLE Country ( CountryID INT PRIMARY KEY, GovernmentFormID INT, Population BIGINT, FOREIGN KEY (GovernmentFormID) REFERENCES GovernmentForm(GovernmentFormID), FOREIGN KEY (CountryID) REFERENCES LifeExpectancy(CountryID) ); CREATE TABLE GovernmentForm ( GovernmentFormID INT PRIMARY KEY, FormName VARCHAR(255) ); CREATE TABLE LifeExpectancy ( CountryID INT PRIMARY KEY, LifeExpectancy FLOAT, FOREIGN KEY (CountryID) REFERENCES Country(CountryID) );
SELECT continent, AVG(life_expectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country_data GROUP BY continent HAVING AVG(life_expectancy) < 72;
SELECT continent, SUM(population) AS total_population, AVG(life_expectancy) AS average_life_expectancy FROM countries c JOIN continents con ON c.continent_id = con.continent_id WHERE life_expectancy < 72 GROUP BY continent;
SELECT name, area FROM countries ORDER BY area DESC LIMIT 5;
SELECT name, surface_area FROM countries ORDER BY surface_area DESC LIMIT 5;
SELECT name FROM countries ORDER BY population DESC LIMIT 3;
SELECT name FROM countries ORDER BY population DESC LIMIT 3;
SELECT name FROM nations ORDER BY population ASC LIMIT 3;
SELECT name FROM country ORDER BY population ASC LIMIT 3;
SELECT;
SELECT * FROM countries WHERE continent = 'Asia';
SELECT c.CountryName FROM Countries c JOIN Continents con ON c.ContinentID = con.ContinentID JOIN Populations p ON c.CountryID = p.CountryID WHERE con.ContinentName = 'Europe' AND p.Population = 80000;
SELECT name FROM countries WHERE continent = 'Europe' AND population = 80000;
SELECT SUM(population) AS TotalPopulation, AVG(area) AS AverageArea FROM countries WHERE continent = 'North America' AND area > 3000;
SELECT SUM(population) AS total_population, AVG(surface_area) AS avg_surface_area FROM countries WHERE continent = 'North America' AND surface_area > 3000;
SELECT city_name FROM cities WHERE population BETWEEN 160000 AND 900000;
SELECT name FROM cities WHERE population BETWEEN 160000 AND 900000;
SELECT;
SELECT Language, COUNT(Country) AS NumberOfCountries FROM language_data GROUP BY Language ORDER BY NumberOfCountries DESC;
SELECT;
SELECT c.country_code, l.language, l.percentage_spoken FROM countries c JOIN languages l ON c.country_id = l.country_id;
SELECT;
SELECT COUNT(DISTINCT country_id) AS num_countries_spanish FROM languages WHERE language = 'Spanish' AND percentage > 50;
SELECT country_code FROM language_data WHERE language = 'Spanish' ORDER BY percentage_spoken DESC LIMIT 10; -- Assuming we want the top 10, you can adjust this number as needed.
SELECT DISTINCT country_code FROM countries WHERE language = 'Spanish' AND percentage_spoken > 50;
SELECT COUNT(*) AS NumberOfConductors FROM conductor;
SELECT COUNT(*) AS NumberOfConductors FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT "Record_Company" FROM "orchestra" ORDER BY "Year_of_Founded" DESC;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT AVG(Attendance) AS Average_Attendance FROM show;
SELECT MAX(share) AS Max_Share, MIN(share) AS Min_Share FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) AS NumberOfDifferentNationalities FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS NumberOfDifferentNationalities FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC;
SELECT c."Name" FROM "conductor" c WHERE c."Year_of_Work" = ( SELECT MAX("Year_of_Work") FROM "conductor" );
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT c."Name" AS Conductor_Name, o."Orchestra" AS Orchestra_Conducted FROM conductor c JOIN orchestra o ON c."Conductor_ID" = o."Conductor_ID";
SELECT c."Name" AS Conductor_Name, o."Orchestra" FROM conductor c JOIN orchestra o ON c."Conductor_ID" = o."Conductor_ID";
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT DISTINCT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT DISTINCT c."Name" FROM conductor c JOIN orchestra o ON c."Conductor_ID" = o."Conductor_ID" WHERE o."Year_of_Founded" > 2008;
SELECT "Record_Company", COUNT(*) AS NumberOfOrchestras FROM orchestra GROUP BY "Record_Company" ORDER BY NumberOfOrchestras DESC;
SELECT Record_Company, COUNT(Orchestra) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company;
SELECT "Record_Company", COUNT(*) AS FormatCount FROM orchestra GROUP BY "Record_Company" ORDER BY FormatCount ASC;
SELECT "Major_Record_Format", COUNT(*) AS Frequency FROM orchestra GROUP BY "Major_Record_Format" ORDER BY Frequency DESC;
SELECT Record_Company, COUNT(*) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumberOfOrchestras DESC LIMIT 1;
SELECT "Record_Company", COUNT(Orchestra_ID) AS NumberOfOrchestras FROM orchestra GROUP BY "Record_Company" ORDER BY NumberOfOrchestras DESC LIMIT 1;
SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT o.* FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 OR Year_of_Founded > 2003;
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;
SELECT COUNT(*) AS NumberOfOrchestras FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT COUNT(*) AS NumberOfOrchestrasWithCDorDVD FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(DISTINCT p.Performance_ID) > 1;
SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT COUNT(*) AS NumberOfHighSchoolers FROM Highschooler;
SELECT COUNT(*) AS NumberOfHighSchoolers FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) AS NumberOfHighSchoolers FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) AS NumberOfHighSchoolers FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT grade, COUNT(*) AS NumberOfHighSchoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS number_of_students FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS NumberOfHighSchoolers FROM Highschooler GROUP BY grade ORDER BY NumberOfHighSchoolers DESC LIMIT 1;
SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4;
SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT Highschooler.ID AS Student_ID, COUNT(Friend.friend_id) AS Number_of_Friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT Highschooler.ID, Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID, Highschooler.name;
SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;
SELECT H.name, COUNT(F.friend_id) AS friend_count FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID ORDER BY H.name;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID ORDER BY COUNT(F.friend_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID ORDER BY COUNT(*) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.friend_id) >= 3;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id WHERE f.student_id IN ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );
SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.friend_id WHERE F.student_id IN ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );
SELECT COUNT(*) AS NumberOfFriends FROM Friend WHERE friend_id = 1911;
SELECT COUNT(DISTINCT friend_id) AS NumberOfFriends FROM Friend WHERE friend_id IN ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );
SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT DISTINCT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL;
SELECT h.name FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.friend_id IS NULL;
SELECT h.name FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.friend_id IS NULL;
SELECT DISTINCT hs1.ID FROM Highschooler hs1 JOIN Friend f ON hs1.ID = f.student_id JOIN Likes l ON hs1.ID = l.liked_id;
SELECT DISTINCT f.student_id AS id FROM Friend f JOIN Likes l ON f.student_id = l.liked_id WHERE EXISTS ( SELECT 1 FROM Highschooler h WHERE h.ID = f.student_id ) AND EXISTS ( SELECT 1 FROM Highschooler h WHERE h.ID = l.student_id );
SELECT DISTINCT h.name FROM Highschooler h WHERE h.ID IN ( SELECT f.student_id FROM Friend f ) AND h.ID IN ( SELECT l.liked_id FROM Likes l );
SELECT DISTINCT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Likes l ON h1.ID = l.liked_id;
SELECT L.student_id, H.name, COUNT(L.liked_id) AS num_likes FROM Likes L JOIN Highschooler H ON L.liked_id = H.ID GROUP BY L.student_id;
SELECT L.student_id, H.name, COUNT(L.liked_id) AS likes_count FROM Likes L JOIN Highschooler H ON L.student_id = H.ID GROUP BY L.student_id;
SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H LEFT JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID ORDER BY H.name;
SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.liked_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(DISTINCT L.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID HAVING COUNT(f.friend_id) >= 2;
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 2;
-- Correcting the mistake: Kyle liking 1247 is not valid as it represents a self-like. Let's correct this by deleting the invalid entry from the Likes table. delete from Likes where liked_id = 1247;
SELECT COUNT(*) AS NumberOfLikesKyleHas FROM Likes WHERE liked_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' );
SELECT AVG(h.grade) AS avg_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT AVG(h.grade) AS avg_grade FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;
SELECT DISTINCT h.grade FROM Highschooler h WHERE NOT EXISTS ( SELECT 1 FROM Friend f WHERE f.student_id = h.ID ) ORDER BY h.grade ASC;
SELECT h.grade FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f) ORDER BY h.grade ASC LIMIT 1;
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT AVG(d.age) AS average_age_of_treated_dogs FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id;
SELECT AVG(d.age) AS average_age_of_treated_dogs FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT p.professional_id, p.last_name, p.cell_phone FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' OR (p.professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2 )) GROUP BY p.professional_id, p.last_name, p.cell_phone;
SELECT p.professional_id, p.last_name, p.cell_phone FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'IN' OR (p.professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2 ))
SELECT DISTINCT Dogs.name AS DogName FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Treatments.cost_of_treatment <= 1000;
SELECT DISTINCT d.name AS DogName FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000 GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000;
-- Step 1: Find all unique first names from treatments (which indirectly helps to find unused names) SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(date_of_treatment, ' ', -2), ':', 1) AS time_part FROM Treatments; -- This subquery will help in identifying times used in the dataset but doesn't directly solve our problem. -- Step 2: Find all unique first names from owners and professionals (hypothetical tables not provided here) SELECT DISTINCT first_name FROM Owners; UNION SELECT DISTINCT first_name FROM Professionals; -- Step 3: Compare these names against known dog names to find unused ones (SELECT DISTINCT first_name FROM Owners) UNION (SELECT DISTINCT first_name FROM Professionals) EXCEPT SELECT DISTINCT name FROM Dogs; -- Assuming there's a table named Dogs with a column `name`
-- Step 1: List all unique professional first names from the Professionals table SELECT DISTINCT p.first_name FROM Professionals p; -- Step 2: List all unique owner first names from the Owners table SELECT DISTINCT o.first_name FROM Owners o; -- Step 3: List all unique dog names from the Dogs table SELECT d.name FROM Dogs d; -- Step 4: Find the intersection of professionals and owners who are not in dogs (SELECT p.first_name FROM Professionals p) UNION (SELECT o.first_name FROM Owners o) EXCEPT (SELECT d.name FROM Dogs d);
SELECT p.professional_id, p.role, p.email FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT p.professional_id, p.role, p.email FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT p.professional_id, p.role, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(t.treatment_id) >= 2;
SELECT p.professional_id, p.role, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role, p.first_name HAVING COUNT(t.treatment_id) >= 2;
SELECT B.breed_name FROM Breeds B JOIN Dogs D ON B.breed_code = D.breed_code GROUP BY B.breed_name ORDER BY COUNT(D.dog_id) DESC LIMIT 1;
SELECT breed, COUNT(*) AS count FROM Dogs GROUP BY breed ORDER BY count DESC LIMIT 1;
SELECT o.owner_id, o.last_name, SUM(t.cost_of_treatment) AS total_cost_of_treatments FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY total_cost_of_treatments DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT t.treatment_type_code, SUM(t.cost_of_treatment) AS TotalCost, tt.description FROM Treatments t JOIN TreatmentTypes tt ON t.treatment_type_code = tt.treatment_type_code GROUP BY t.treatment_type_code, tt.description ORDER BY TotalCost ASC LIMIT 1;
SELECT t.treatment_type_code, SUM(t.cost_of_treatment) AS total_cost FROM Treatments t GROUP BY t.treatment_type_code ORDER BY total_cost ASC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT p.professional_id, p.cell_phone FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_phone HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT p.professional_id, p.cell_phone FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_phone HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
-- Calculate the average cost of all treatments SELECT AVG(cost_of_treatment) AS avg_cost FROM Treatments; -- Join with Professionals table to get professional names and filter by treatment costs below average SELECT p.first_name, p.last_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT AVG(cost_of_treatment) AS average_cost FROM Treatments;
SELECT T.date_of_treatment, P.first_name AS professional_first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT T.date_of_treatment, P.first_name AS professional_first_name FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id;
SELECT T.cost_of_treatment, TT.description AS treatment_type_description FROM Treatments T JOIN TreatmentTypes TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT T.treatment_id, T.cost_of_treatment, TT.description AS treatment_type_description FROM Treatments T JOIN Treatment_types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT o.first_name, o.last_name, d.size FROM Owners o JOIN Dogs d ON o.dog_id = d.dog_id;
SELECT o.first_name, o.last_name, d.size FROM Owners o JOIN Dogs d ON o.dog_id = d.dog_id;
SELECT Owners.first_name, Dogs.dog_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Ownership INNER JOIN Owners ON Ownership.owner_id = Owners.owner_id INNER JOIN Dogs ON Ownership.dog_id = Dogs.dog_id;
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed IN ( SELECT breed FROM Dogs GROUP BY breed ORDER BY COUNT(*) ASC LIMIT 1 ) ORDER BY t.date_of_treatment;
SELECT d.name AS DogName, t.date_of_treatment AS TreatmentDate FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed IN ( SELECT breed FROM Dogs GROUP BY breed HAVING COUNT(DISTINCT dog_id) = 1 ) ORDER BY t.date_of_treatment;
SELECT o.first_name AS OwnerFirstName, d.dog_name AS DogName FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'VA';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'VA';
SELECT dog_id, date_of_treatment AS treatment_date FROM Treatments WHERE treatment_type_code IN ('VAC', 'WALK') ORDER BY dog_id, treatment_date;
SELECT D.arrival_date, D.departure_date FROM Treatments T JOIN Dogs D ON T.dog_id = D.dog_id;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;
SELECT o.last_name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id ORDER BY d.birth_date DESC LIMIT 1;
SELECT email FROM Professionals WHERE state_residence IN ('HI', 'WI');
SELECT email FROM Professionals WHERE state IN ('HI', 'WI');
SELECT arriving_date, departing_date FROM dog_stay;
SELECT DogID, ArrivalDate, DepartureDate FROM Dogs;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_treated FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS NumberOfProfessionals FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS NumberOfProfessionals FROM Treatments;
SELECT Role, Street, City, State FROM Professionals WHERE City LIKE '%West%';
SELECT role, street, city, state FROM Professionals WHERE city LIKE '%West%' OR state LIKE '%West%';
SELECT Owners.first_name, Owners.last_name, Owners.email FROM Owners JOIN Addresses ON Owners.address_id = Addresses.address_id WHERE Addresses.state LIKE '%North%';
SELECT o.first_name, o.last_name, o.email FROM Owners o JOIN Addresses a ON o.address_id = a.address_id WHERE a.state LIKE '%North%';
SELECT COUNT(*) AS number_of_dogs_below_average_age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) AS NumberOfDogsBelowAverageAge FROM Dogs WHERE Age < (SELECT AVG(Age) FROM Dogs);
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT MAX(cost_of_treatment) AS MostRecentTreatmentCost FROM Treatments;
SELECT COUNT(*) AS NumberOfDogsWithoutTreatments FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL;
SELECT COUNT(*) AS NumberOfDogsWithoutTreatments FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;
SELECT COUNT(*) AS NumberOfMissingOwners FROM ( SELECT DISTINCT dog_id FROM Dogs ) AS DogsTable LEFT JOIN Owners ON DogsTable.dog_id = Owners.owner_id WHERE Owners.owner_id IS NULL;
SELECT COUNT(DISTINCT o.owner_id) AS number_of_owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;
SELECT DISTINCT professional_id FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS number_of_unassigned_professionals FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;
SELECT d.name, d.age, d.weight FROM Dogs d JOIN Abandoned a ON d.dog_id = a.dog_id WHERE a.abandoned = 1;
SELECT d.name, d.age, d.weight FROM Dogs d JOIN Abandoned_dogs ad ON d.dog_id = ad.dog_id WHERE d.abandoned = 1;
SELECT AVG(age) AS average_age FROM dogs;
SELECT AVG(age) AS average_age FROM dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dog;
SELECT MAX(age) AS oldest_dog_age FROM dogs;
SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code;
SELECT treatment_type_code, SUM(cost_of_treatment) AS total_amount FROM Treatments GROUP BY treatment_type_code;
SELECT MAX(cost_of_treatment) AS most_expensive_cost FROM Treatments;
SELECT MAX(cost_of_treatment) AS most_expensive_charge FROM Treatments;
SELECT Email, Cell_Phone, Home_Phone FROM Professionals;
SELECT p.professional_id, pc.email, pn.home_phone, pn.cell_phone FROM Professionals p JOIN Professional_contacts pc ON p.professional_id = pc.professional_id JOIN Phone_numbers pn ON p.professional_id = pn.professional_id;
SELECT DISTINCT b.breed_type, s.size_type FROM Breeds b CROSS JOIN Sizes s;
SELECT DISTINCT d.breed_type, s.size_type FROM Dogs d JOIN Breeds b ON d.breed_type_id = b.breed_type_id JOIN Sizes s ON d.size_type_id = s.size_type_id;
SELECT p.first_name, t.treatment_type_code, t.description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id;
SELECT Professionals.first_name, Treatments.treatment_type_code AS treatment_description FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT COUNT(*) AS NumberOfSingers FROM singer;
SELECT COUNT(*) AS CountOfSingers FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT "Birth_Year", "Citizenship" FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT "Name" FROM "singer" ORDER BY "Net_Worth_Millions" DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title AS Song_Title, singer.Name AS Singer_Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT s.Title AS Song_Title, si.Name AS Singer_Name FROM song s JOIN singer si ON s.Singer_ID = si.Singer_ID;
SELECT DISTINCT s."Name" FROM "singer" s JOIN "song" so ON s."Singer_ID" = so."Singer_ID" WHERE so."Sales" > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT s."Name" FROM "singer" s JOIN "song" so ON s."Singer_ID" = so."Song_ID" GROUP BY s."Singer_ID" HAVING COUNT(so."Song_ID") > 1;
SELECT s."Name" FROM "singer" AS s JOIN "song" AS so ON s."Singer_ID" = so."Singer_ID" GROUP BY s."Name" HAVING COUNT(so."Song_ID") > 1;
SELECT s."Name", SUM(so."Sales") AS Total_Sales FROM "singer" s JOIN "song" so ON s."Singer_ID" = so."Song_ID" GROUP BY s."Name";
SELECT s."Name", SUM(so."Sales") AS Total_Sales FROM "singer" s JOIN "song" so ON s."Singer_ID" = so."Song_ID" GROUP BY s."Name";
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL;
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Song_ID IS NULL;
SELECT DISTINCT s1.Citizenship FROM singer s1 WHERE s1.Birth_Year < 1945 AND s1.Birth_Year > 1955;
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;
SELECT COUNT(DISTINCT feature_id) AS total_features FROM Other_Property_Features;
SELECT;
SELECT pt.property_type_description FROM Properties p JOIN Property_Types pt ON p.property_type_code = pt.property_type_code WHERE p.property_type_code = 'your_specific_code'; -- Replace with the actual property type code you are interested in
SELECT property_name FROM Properties WHERE property_type_code IN ('House', 'Apartment') AND room_count > 1;
