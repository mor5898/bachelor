SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';
SELECT T2.Song_Name, T2.Song_release_year FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID ORDER BY T2.Age LIMIT 1;
SELECT T2.Song_Name, T2.Song_release_year FROM singer AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age = ( SELECT MIN(Age) FROM singer );
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer );
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer );
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 ORDER BY T1.Average DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 ORDER BY T1.Average DESC LIMIT 1;
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name;
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE CAST(SUBSTR(T2.Year, 1, 4) AS INTEGER) >= 2014 GROUP BY T1.Name, T1.Capacity ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE CAST(T2.Year AS INTEGER) > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year ORDER BY ConcertCount DESC LIMIT 1;
SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year ORDER BY ConcertCount DESC LIMIT 1;
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS( SELECT 1 FROM concert AS T2 WHERE T1.Stadium_ID = T2.Stadium_ID );
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL;
SELECT DISTINCT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > 40 INTERSECT SELECT DISTINCT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age < 30;
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS( SELECT 1 FROM concert AS T2 WHERE T2.Stadium_ID = T1.Stadium_ID AND T2.Year = '2014' );
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year != '2014' GROUP BY T1.Name
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID;
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) AS Number_of_Singers FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_Name, T1.Theme;
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID;
SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID, s.Name;
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014';
SELECT T2.Name FROM concert AS T1 INNER JOIN singer AS T2 ON T1.concert_ID = T2.Singer_ID WHERE T1.Year = '2014';
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%';
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%';
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' AND T2.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' AND T2.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );
SELECT COUNT(DISTINCT T1.concert_ID) AS "Number of Concerts" FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(T1.concert_ID) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(*) AS "Number of Pets" FROM Pets WHERE weight > 10;
SELECT COUNT(*) AS "Number of Pets" FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(DISTINCT PetID) FROM Has_Pet AS HP JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT PetID) FROM Has_Pet AS HP JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT HP.PetID) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F';
SELECT COUNT(DISTINCT S.StuID) FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) AS "Number of Distinct Pet Types" FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
SELECT DISTINCT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog');
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog';
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog';
SELECT DISTINCT Major, Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) );
SELECT DISTINCT S.Major, S.Age FROM Student AS S LEFT JOIN Has_Pet AS HP ON S.StuID = HP.StuID LEFT JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType <> 'cat' OR P.PetType IS NULL;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT DISTINCT S.Fname, S.Age FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND NOT EXISTS ( SELECT 1 FROM Has_Pet AS HP2 JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE HP2.StuID = S.StuID AND P2.PetType = 'cat' );
SELECT DISTINCT Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN ( SELECT DISTINCT StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT p.PetType, AVG(p.pet_age) AS AverageAge, MAX(p.pet_age) AS MaxAge FROM Pets AS p GROUP BY p.PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID;
SELECT StuID, COUNT(*) AS NumberOfPets FROM Has_Pet GROUP BY StuID;
SELECT DISTINCT S.Fname, S.Sex FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT DISTINCT S.Fname, S.Sex FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT DISTINCT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT DISTINCT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, c.Continent, COUNT(DISTINCT co.CountryId) AS NumberOfCountries FROM continents AS c JOIN countries AS co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent ORDER BY c.ContId;
SELECT c.ContId, c.Continent, COUNT(DISTINCT co.CountryId) AS NumberOfCountries FROM continents AS c JOIN countries AS co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(DISTINCT CountryId) AS "Number of Countries" FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.FullName, cm.Id, COUNT(DISTINCT ml.Model) AS NumberOfModels FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id ORDER BY cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(DISTINCT ml.Model) AS NumberOfModels FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Horsepower LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY CAST(REPLACE(T1.Horsepower, '?', '') AS REAL) LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data );
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data );
SELECT DISTINCT T2.Maker FROM car_names AS T1 INNER JOIN car_makers AS T2 ON T1.Make = T2.FullName INNER JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Year = 1970;
SELECT DISTINCT T2.Maker FROM car_names AS T1 INNER JOIN car_makers AS T2 ON T1.Make = T2.FullName INNER JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Year = 1970;
SELECT c.Make, MIN(cd.Year) AS EarliestYear FROM car_names AS c JOIN cars_data AS cd ON c.MakeId = cd.Id GROUP BY c.Make;
SELECT c.Maker, MIN(cd.Year) AS EarliestYear FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS c ON ml.Maker = c.Id GROUP BY c.Maker;
SELECT DISTINCT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980;
SELECT DISTINCT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Year > 1980;
SELECT c.Continent, COUNT(DISTINCT cm.Maker) AS "Number of Car Makers" FROM continents AS c JOIN countries AS co ON c.ContId = co.Continent JOIN car_makers AS cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.Continent, COUNT(DISTINCT cm.Maker) AS NumberOfCarMakers FROM continents AS c JOIN countries AS co ON c.ContId = co.Continent JOIN car_makers AS cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryName ORDER BY COUNT(T1.Id) DESC LIMIT 1;
SELECT COUNT(DISTINCT ml.Model), cm.FullName FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id GROUP BY cm.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(DISTINCT model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = 'amc' AND T1.Model = 'hornet sportabout (sw)';
SELECT T2.Accelerate FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = 'amc' AND T1.Model = 'hornet sportabout (sw)';
SELECT COUNT(DISTINCT T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';
SELECT COUNT(DISTINCT T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France';
SELECT COUNT(DISTINCT T2.Model) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryName = 'USA';
SELECT COUNT(DISTINCT T2.Model) FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country INNER JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryName = 'USA';
SELECT AVG(CAST(REPLACE(MPG, ',', '') AS REAL)) AS average_mpg FROM cars_data WHERE Cylinders = 4;
SELECT AVG(CAST(REPLACE(MPG, ',', '') AS REAL)) AS average_mpg FROM cars_data WHERE Cylinders = 4;
SELECT MIN(T2.Weight) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 8 AND T2.Year = 1974;
SELECT MIN(T2.Weight) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 8 AND T2.Year = 1974;
SELECT T2.Maker, T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id;
SELECT T2.Maker, T1.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model;
SELECT DISTINCT c.CountryName, c.CountryId FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country;
SELECT DISTINCT c.CountryName, c.CountryId FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(DISTINCT T1.Id) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > 150;
SELECT cars_data.Year, AVG(cars_data.Weight) AS AverageWeight FROM cars_data GROUP BY cars_data.Year ORDER BY cars_data.Year;
SELECT AVG(cars_data.Weight) AS average_weight, cars_data.Year FROM cars_data GROUP BY cars_data.Year;
SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country JOIN continents AS con ON c.Continent = con.ContId WHERE con.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3;
SELECT DISTINCT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId INNER JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING COUNT(DISTINCT T1.Maker) >= 3;
SELECT MAX(T2.Horsepower), T1.Make FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3 GROUP BY T1.Make;
SELECT MAX(T2.Horsepower), T1.Make FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 3;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY CAST(REPLACE(T1.MPG, ',', '') AS REAL) DESC LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY CAST(REPLACE(T1.MPG, ',', '') AS REAL) DESC LIMIT 1;
SELECT AVG(CAST(Horsepower AS REAL)) AS average_horsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(CAST(Horsepower AS REAL)) AS average_horsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(T2.Edispl) FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T1.Model = 'volvo';
SELECT AVG(T2.Edispl) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Make = 'volvo';
SELECT MAX(cars_data.Accelerate), cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders;
SELECT MAX(cars_data.Accelerate) AS "Max Accelerate", cars_data.Cylinders FROM cars_data GROUP BY cars_data.Cylinders;
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1;
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(DISTINCT T1.MakeId) FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = 1980;
SELECT COUNT(DISTINCT T2.MakeId) FROM countries AS T1 INNER JOIN car_names AS T2 ON T1.CountryId = T2.MakeId INNER JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = 1980;
SELECT COUNT(DISTINCT T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motors Corporation';
SELECT COUNT(DISTINCT T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motors Corporation';
SELECT cm.FullName, cm.Id FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id HAVING COUNT(DISTINCT ml.Model) > 3;
SELECT c.Maker, c.Id FROM car_makers AS c JOIN model_list AS m ON c.Id = m.Maker GROUP BY c.Maker, c.Id HAVING COUNT(DISTINCT m.Model) > 3;
SELECT DISTINCT T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN car_names AS T3 ON T2.Model = T3.Model INNER JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = 'General Motors' OR T4.Weight > 3500;
SELECT DISTINCT T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN car_names AS T3 ON T2.Model = T3.Model INNER JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = 'General Motors' OR T4.Weight > 3500;
SELECT DISTINCT "Year" FROM cars_data WHERE "Weight" BETWEEN 3000 AND 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;
SELECT T2.Horsepower FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Accelerate DESC LIMIT 1;
SELECT T2.Horsepower FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Accelerate DESC LIMIT 1;
SELECT T2.Cylinders FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T1.Model = 'volvo' ORDER BY T2.Accelerate LIMIT 1;
SELECT T2.Cylinders FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T1.Model = 'volvo' ORDER BY T2.Accelerate LIMIT 1;
-- Find the maximum horsepower value SELECT MAX(CAST(Horsepower AS REAL)) AS max_horsepower FROM cars_data; -- Find the car with the largest horsepower SELECT Id FROM cars_data WHERE Horsepower = ( SELECT MAX(CAST(Horsepower AS REAL)) FROM cars_data ); -- Count the cars with a larger accelerate than the car with the largest horsepower SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT Accelerate FROM cars_data WHERE Id = ( SELECT Id FROM cars_data WHERE Horsepower = ( SELECT MAX(CAST(Horsepower AS REAL)) FROM cars_data ) ) );
-- Find the maximum horsepower SELECT MAX(Horsepower) AS max_horsepower FROM cars_data; -- Find the number of cars with an accelerate greater than the car with the maximum horsepower SELECT COUNT(*) FROM cars_data WHERE Accelerate > ( SELECT Accelerate FROM cars_data WHERE Horsepower = ( SELECT MAX(Horsepower) FROM cars_data ) );
SELECT COUNT(DISTINCT Country) AS "Number of Countries" FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 2;
SELECT COUNT(DISTINCT T1.Country) AS "Number of Countries" FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country HAVING COUNT(DISTINCT T1.Maker) > 2;
SELECT COUNT(DISTINCT T1.Id) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;
SELECT T1.MakeId, T1.Make FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders <= 3 AND T2.Horsepower > ( SELECT MIN(Horsepower) FROM cars_data );
SELECT c.MakeId, c.Make FROM car_names AS c JOIN cars_data AS cd ON c.MakeId = cd.Id WHERE cd.Cylinders < 4 AND cd.Horsepower <> ( SELECT MIN(Horsepower) FROM cars_data );
SELECT MAX(CAST(REPLACE(MPG, ',', '') AS REAL)) AS "Max MPG" FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(CAST(REPLACE(T1.MPG, ',', '') AS REAL)) AS "Max MPG" FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 8 OR T1.Year < 1980;
SELECT DISTINCT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN cars_data AS T3 ON T1.MakeId = T3.Id INNER JOIN car_makers AS T4 ON T2.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.FullName != 'Ford Motor Company';
SELECT DISTINCT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Model = T2.Model INNER JOIN car_makers AS T3 ON T2.Maker = T3.Id INNER JOIN cars_data AS T4 ON T1.MakeId = T4.Id WHERE T4.Weight < 3500 AND T3.FullName != 'Ford Motor Company';
SELECT T1.CountryName FROM countries AS T1 LEFT JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Country IS NULL;
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT DISTINCT Country FROM car_makers);
SELECT DISTINCT cm.Id, cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND ( SELECT COUNT(*) FROM car_makers ) > 3;
WITH MakerModelCount AS ( SELECT c.Maker, COUNT(DISTINCT m.Model) AS model_count, COUNT(DISTINCT cd.Id) AS car_count FROM car_makers AS c JOIN model_list AS m ON c.Id = m.Maker JOIN car_names AS cn ON m.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id GROUP BY c.Maker HAVING COUNT(DISTINCT m.Model) >= 2 ), MakerCarCount AS ( SELECT Maker, COUNT(DISTINCT Id) AS car_count FROM cars_data GROUP BY Maker HAVING COUNT(DISTINCT Id) > 3 ) SELECT c.Id, c.Maker FROM car_makers AS c JOIN MakerModelCount AS mmc ON c.Maker = mmc.Maker JOIN MakerCarCount AS mcc ON c.Maker = mcc.Maker;
SELECT DISTINCT c.CountryId, c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryId, c.CountryName HAVING COUNT(DISTINCT cm.Id) > 3 UNION SELECT DISTINCT c.CountryId, c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country JOIN model_list AS ml ON cm.Id = ml.Maker WHERE ml.Model = 'fiat';
SELECT DISTINCT c.CountryId, c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE c.CountryId IN ( SELECT cm.Country FROM car_makers AS cm GROUP BY cm.Country HAVING COUNT(DISTINCT cm.Maker) > 3 ) OR c.CountryId IN ( SELECT cm.Country FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker WHERE ml.Model = 'fiat' );
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT a.Airline, a.Abbreviation FROM airlines a JOIN airports ap ON a.Country = ap.Country WHERE ap.Country = 'USA';
SELECT a.Airline, a.Abbreviation FROM airlines a JOIN airports ap ON a.Country = ap.Country WHERE ap.Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(DISTINCT Airline) AS NumberOfAirlines FROM airlines;
SELECT COUNT(DISTINCT Airline) AS TotalAirlines FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) AS "Number of Flights" FROM flights;
SELECT COUNT(*) AS "Number of Flights" FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(DISTINCT uid) AS "Number of Airlines" FROM airlines WHERE Country = 'USA';
SELECT COUNT(DISTINCT uid) AS "Number of Airlines" FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = 'Alton Airport';
SELECT City, Country FROM airports WHERE AirportName = 'Alton Airport';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights AS f JOIN airports AS s ON f.SourceAirport = s.AirportCode JOIN airports AS d ON f.DestAirport = d.AirportCode WHERE s.City = 'Aberdeen' AND d.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportCode = 'ASY';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.SourceAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.AirportCode = 'AHD';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(DISTINCT f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';
SELECT DestAirport, COUNT(*) AS TotalArrivingFlights FROM flights GROUP BY DestAirport ORDER BY TotalArrivingFlights DESC LIMIT 1;
SELECT DestAirport, COUNT(*) AS FlightCount FROM flights GROUP BY DestAirport ORDER BY FlightCount DESC LIMIT 1;
SELECT City FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT City FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN ( SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1 ) UNION SELECT AirportCode FROM airports WHERE AirportCode IN ( SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT a.Airline, COUNT(*) AS FlightCount FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Airline ORDER BY COUNT(f.FlightNo) DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
WITH FlightCounts AS ( SELECT a.Abbreviation, a.Country, COUNT(f.FlightNo) AS FlightCount FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ) SELECT Abbreviation, Country FROM FlightCounts ORDER BY FlightCount LIMIT 1;
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' INTERSECT SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'APG' INTERSECT SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND NOT EXISTS ( SELECT 1 FROM flights WHERE Airline = a.uid AND SourceAirport = 'APG' );
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND NOT EXISTS ( SELECT 1 FROM flights AS f2 WHERE f2.Airline = f.Airline AND f2.SourceAirport = 'APG' );
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(DISTINCT f.FlightNo) >= 10;
SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(DISTINCT f.FlightNo) >= 10;
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(DISTINCT f.FlightNo) < 200;
SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(DISTINCT f.FlightNo) < 200;
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT DISTINCT f.FlightNo FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT DISTINCT f.FlightNo FROM flights AS f JOIN airports AS a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT DISTINCT f.FlightNo FROM flights AS f JOIN airports AS a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';
SELECT DISTINCT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE DestAirport IN ( SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene' );
SELECT COUNT(*) FROM flights WHERE DestAirport IN ( SELECT AirportCode FROM airports WHERE City = 'Aberdeen' OR City = 'Abilene' );
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT AirportCode FROM airports EXCEPT SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(*) AS EmployeeCount FROM employee GROUP BY City;
SELECT City, COUNT(*) AS EmployeeCount FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT T1.Manager_name, T1.District FROM shop AS T1 ORDER BY T1.Number_products DESC LIMIT 1;
SELECT T1.Manager_name, T1.District FROM shop AS T1 WHERE T1.Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT MIN(Number_products), MAX(Number_products) FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > ( SELECT AVG(Number_products) FROM shop );
SELECT T1.Name FROM shop AS T1 JOIN (SELECT AVG(Number_products) AS avg_products FROM shop) AS T2 ON T1.Number_products > T2.avg_products
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1;
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1;
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Bonus = ( SELECT MAX(Bonus) FROM evaluation );
SELECT T1.Name FROM employee AS T1 EXCEPT SELECT T2.Name FROM employee AS T2 INNER JOIN evaluation AS T3 ON T2.Employee_ID = T3.Employee_ID
SELECT T1.Name FROM employee AS T1 EXCEPT SELECT T2.Name FROM employee AS T2 INNER JOIN evaluation AS T3 ON T2.Employee_ID = T3.Employee_ID
SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1;
SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1;
SELECT Name FROM shop EXCEPT SELECT T1.Name FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL
SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_Employees FROM shop AS s JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT s.Name, COUNT(DISTINCT h.Employee_ID) AS Number_of_Employees FROM shop AS s LEFT JOIN hiring AS h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID, s.Name;
SELECT SUM(Bonus) AS "Total Bonus" FROM evaluation;
SELECT SUM(Bonus) AS "Total Bonus" FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000;
SELECT DISTINCT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT DISTINCT District FROM shop WHERE Number_products > 10000;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) AS "Number of Templates" FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS "Number of Templates" FROM Documents;
SELECT COUNT(DISTINCT D.Document_ID) FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Code = 'PPT';
SELECT COUNT(DISTINCT D.Document_ID) FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'Presentation';
SELECT T.Template_ID, COUNT(D.Document_ID) AS Number_of_Documents FROM Templates AS T LEFT JOIN Documents AS D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT Template_ID, COUNT(*) AS UsageCount FROM Documents GROUP BY Template_ID;
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1;
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1;
SELECT Template_ID FROM Templates EXCEPT SELECT DISTINCT Template_ID FROM Documents;
SELECT Template_ID FROM Templates EXCEPT SELECT DISTINCT Template_ID FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS Number_of_Templates FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT COUNT(*) AS "Number of CV Templates" FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(DISTINCT T.Template_ID) AS "Number of CV Templates" FROM Templates AS T JOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'CV';
SELECT T.Version_Number, T.Template_Type_Code FROM Templates AS T WHERE T.Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) AS Number_of_Templates FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code;
SELECT rtt.Template_Type_Code, rtt.Template_Type_Description, COUNT(t.Template_ID) AS TemplateCount FROM Ref_Template_Types AS rtt JOIN Templates AS t ON rtt.Template_Type_Code = t.Template_Type_Code GROUP BY rtt.Template_Type_Code, rtt.Template_Type_Description ORDER BY rtt.Template_Type_Code;
SELECT Template_Type_Code, COUNT(*) AS TemplateCount FROM Templates GROUP BY Template_Type_Code ORDER BY TemplateCount DESC LIMIT 1;
SELECT T2.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T2.Template_Type_Code ORDER BY COUNT(T1.Template_ID) DESC LIMIT 1;
SELECT `Template_Type_Code` FROM `Ref_Template_Types` WHERE `Template_Type_Code` IN ( SELECT `Template_Type_Code` FROM `Templates` GROUP BY `Template_Type_Code` HAVING COUNT(*) < 3 );
SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY MIN(Version_Number) LIMIT 1;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT T2.Template_Type_Code FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base';
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID WHERE T3.Document_Name = 'Data base';
SELECT T2.Document_Name FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code INNER JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK';
SELECT D.Document_Name FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Code = 'BK';
SELECT rtt.Template_Type_Code, COUNT(DISTINCT d.Document_ID) AS Number_of_Documents FROM Ref_Template_Types AS rtt JOIN Templates AS t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents AS d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code;
SELECT rtt.Template_Type_Code, rtt.Template_Type_Description, COUNT(DISTINCT d.Document_ID) AS DocumentCount FROM Ref_Template_Types AS rtt JOIN Templates AS t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents AS d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code, rtt.Template_Type_Description ORDER BY rtt.Template_Type_Code;
SELECT T.`Template_Type_Code` FROM Ref_Template_Types AS T JOIN Templates AS TE ON T.`Template_Type_Code` = TE.`Template_Type_Code` JOIN Documents AS D ON TE.`Template_ID` = D.`Template_ID` GROUP BY T.`Template_Type_Code` ORDER BY COUNT(D.`Document_ID`) DESC LIMIT 1;
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T3.Document_ID) DESC LIMIT 1;
SELECT DISTINCT T.`Template_Type_Code` FROM Ref_Template_Types AS T LEFT JOIN Templates AS Te ON T.`Template_Type_Code` = Te.`Template_Type_Code` LEFT JOIN Documents AS D ON Te.`Template_ID` = D.`Template_ID` WHERE D.`Document_ID` IS NULL;
SELECT DISTINCT `Template_Type_Code` FROM `Ref_Template_Types` EXCEPT SELECT DISTINCT `Template_Type_Code` FROM `Templates` WHERE `Template_ID` IN (SELECT DISTINCT `Template_ID` FROM `Documents`);
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT T2.Template_Type_Description FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = 'AD';
SELECT T2.Template_Type_Description FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code;
SELECT DISTINCT T2.Template_Type_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code;
SELECT DISTINCT T.Template_ID FROM Templates AS T JOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'Presentation';
SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) AS ParagraphCount FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show');
SELECT COUNT(*) AS ParagraphCount FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';
SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea ';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID IN ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Customer reviews' );
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT D.Document_ID, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents AS D LEFT JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY D.Document_ID;
SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents AS D LEFT JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraph_Count FROM Documents AS D LEFT JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents AS d JOIN Paragraphs AS p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT D.Document_ID, D.Document_Name FROM Documents AS D JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID ORDER BY COUNT(P.Paragraph_ID) DESC LIMIT 1;
SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1;
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2 );
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2 );
SELECT DISTINCT D.Document_ID FROM Documents AS D JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID WHERE P.Paragraph_Text = 'Brazil' INTERSECT SELECT DISTINCT D.Document_ID FROM Documents AS D JOIN Paragraphs AS P ON D.Document_ID = P.Document_ID WHERE P.Paragraph_Text = 'Ireland';
SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Brazil' INTERSECT SELECT DISTINCT Document_ID FROM Paragraphs WHERE Paragraph_Text = 'Ireland';
SELECT COUNT(DISTINCT Teacher_ID) AS "Number of Teachers" FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age;
SELECT Name FROM teacher ORDER BY Age;
SELECT Age, Hometown FROM teacher;
SELECT T1.Age, T1.Hometown FROM teacher AS T1;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT T2.Hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Age LIMIT 1;
SELECT Hometown FROM teacher ORDER BY Age LIMIT 1;
SELECT Hometown, COUNT(*) AS TeacherCount FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(Teacher_ID) AS TeacherCount FROM teacher GROUP BY Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID INNER JOIN course AS T2 ON T3.Course_ID = T2.Course_ID;
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID INNER JOIN course AS T2 ON T3.Course_ID = T2.Course_ID;
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID INNER JOIN course AS T2 ON T3.Course_ID = T2.Course_ID ORDER BY T1.Name;
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID INNER JOIN course AS T2 ON T3.Course_ID = T2.Course_ID ORDER BY T1.Name;
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'Math';
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'Math';
SELECT T1.Name, COUNT(T2.Course_ID) AS Number_of_Courses FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name;
SELECT T1.Name, COUNT(T2.Course_ID) AS Number_of_Courses FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name;
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(T2.Course_ID) >= 2
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(T2.Course_ID) >= 2
SELECT T1.Name FROM teacher AS T1 EXCEPT SELECT T2.Name FROM teacher AS T2 INNER JOIN course_arrange AS T3 ON T2.Teacher_ID = T3.Teacher_ID
SELECT T1.Name FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Teacher_ID IS NULL;
SELECT COUNT(ID) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) AS AverageAge FROM visitor WHERE Level_of_membership <= 4;
SELECT T1.Name, T1.Level_of_membership FROM visitor AS T1 WHERE T1.Level_of_membership > 4 ORDER BY T1.Age DESC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(Num_of_Staff) AS Average_Staff FROM museum WHERE CAST(SUBSTR(Open_Year, 1, 4) AS INTEGER) < 2009;
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT T1.Name FROM museum AS T1 INNER JOIN ( SELECT MIN(Num_of_Staff) AS min_staff FROM museum WHERE CAST(SUBSTR(Open_Year, 1, 4) AS INTEGER) > 2010 ) AS T2 ON T1.Num_of_Staff > T2.min_staff;
SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID HAVING COUNT(DISTINCT T2.Museum_ID) > 1;
SELECT V.ID, V.Name, V.Level_of_membership FROM visitor AS V JOIN visit AS VI ON V.ID = VI.visitor_ID GROUP BY V.ID, V.Name, V.Level_of_membership ORDER BY SUM(VI.Total_spent) DESC LIMIT 1;
SELECT T1.Museum_ID, T1.Name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY COUNT(T2.visitor_ID) DESC LIMIT 1;
SELECT T1.Name FROM museum AS T1 LEFT JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.visitor_ID IS NULL
SELECT T2.Name, T2.Age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID ORDER BY T1.Num_of_Ticket DESC LIMIT 1;
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;
SELECT SUM(T2.Total_spent) AS "Total Ticket Expense" FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership = 1;
SELECT T2.Name FROM museum AS T1 INNER JOIN visitor AS T2 ON T1.Museum_ID = T2.ID WHERE T1.Open_Year < '2009' INTERSECT SELECT T2.Name FROM museum AS T1 INNER JOIN visitor AS T2 ON T1.Museum_ID = T2.ID WHERE T1.Open_Year > '2011'
SELECT COUNT(DISTINCT V.ID) AS "Number of Visitors" FROM visitor AS V LEFT JOIN visit AS VI ON V.ID = VI.visitor_ID LEFT JOIN museum AS M ON VI.Museum_ID = M.Museum_ID WHERE M.Open_Year <= '2010' OR M.Open_Year IS NULL;
SELECT COUNT(Museum_ID) FROM museum WHERE CAST(SUBSTR(Open_Year, 1, 4) AS INTEGER) > 2013 OR CAST(SUBSTR(Open_Year, 1, 4) AS INTEGER) < 2008;
SELECT COUNT(DISTINCT player_id) AS total_players FROM players;
SELECT COUNT(DISTINCT player_id) AS "Number of Players" FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) AS "Number of Matches" FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MAX(loser_rank) AS highest_loser_rank FROM matches;
SELECT MIN(loser_rank) AS best_loser_rank FROM matches;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
