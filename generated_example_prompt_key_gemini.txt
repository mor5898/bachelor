SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';
SELECT T2.Song_Name, T2.Song_release_year FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID ORDER BY T2.Age LIMIT 1;
SELECT T2.Song_Name, T2.Song_release_year FROM singer AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age = ( SELECT MIN(Age) FROM singer );
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer );
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer );
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 ORDER BY T1.Average DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 ORDER BY T1.Average DESC LIMIT 1;
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name;
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE CAST(SUBSTR(T2.Year, 1, 4) AS INTEGER) >= 2014 GROUP BY T1.Name, T1.Capacity ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE CAST(T2.Year AS INTEGER) > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year ORDER BY ConcertCount DESC LIMIT 1;
SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year ORDER BY ConcertCount DESC LIMIT 1;
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS( SELECT 1 FROM concert AS T2 WHERE T1.Stadium_ID = T2.Stadium_ID );
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL;
SELECT DISTINCT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > 40 INTERSECT SELECT DISTINCT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age < 30;
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS( SELECT 1 FROM concert AS T2 WHERE T2.Stadium_ID = T1.Stadium_ID AND T2.Year = '2014' );
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year != '2014' GROUP BY T1.Name
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID;
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) AS Number_of_Singers FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_Name, T1.Theme;
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID;
SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID, s.Name;
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014';
SELECT T2.Name FROM concert AS T1 INNER JOIN singer AS T2 ON T1.concert_ID = T2.Singer_ID WHERE T1.Year = '2014';
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%';
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%';
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' AND T2.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' AND T2.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );
SELECT COUNT(DISTINCT T1.concert_ID) AS "Number of Concerts" FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(T1.concert_ID) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(*) AS "Number of Pets" FROM Pets WHERE weight > 10;
SELECT COUNT(*) AS "Number of Pets" FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(DISTINCT PetID) FROM Has_Pet AS HP JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT PetID) FROM Has_Pet AS HP JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT HP.PetID) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F';
SELECT COUNT(DISTINCT S.StuID) FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) AS "Number of Distinct Pet Types" FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
SELECT DISTINCT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog');
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog';
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog';
SELECT DISTINCT Major, Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) );
SELECT DISTINCT S.Major, S.Age FROM Student AS S LEFT JOIN Has_Pet AS HP ON S.StuID = HP.StuID LEFT JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType <> 'cat' OR P.PetType IS NULL;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT DISTINCT S.Fname, S.Age FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND NOT EXISTS ( SELECT 1 FROM Has_Pet AS HP2 JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE HP2.StuID = S.StuID AND P2.PetType = 'cat' );
SELECT DISTINCT Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN ( SELECT DISTINCT StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT p.PetType, AVG(p.pet_age) AS AverageAge, MAX(p.pet_age) AS MaxAge FROM Pets AS p GROUP BY p.PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID;
SELECT StuID, COUNT(*) AS NumberOfPets FROM Has_Pet GROUP BY StuID;
SELECT DISTINCT S.Fname, S.Sex FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT DISTINCT S.Fname, S.Sex FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT DISTINCT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT DISTINCT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT COUNT(DISTINCT Singer_ID) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';
SELECT T2.Song_Name, T2.Song_release_year FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID ORDER BY T2.Age LIMIT 1;
SELECT T2.Song_Name, T2.Song_release_year FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Age = ( SELECT MIN(Age) FROM singer );
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(Singer_ID) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Number_of_Singers FROM singer GROUP BY Country;
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer );
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T3 ON T1.Singer_ID = T3.Singer_ID INNER JOIN concert AS T4 ON T3.concert_ID = T4.concert_ID INNER JOIN stadium AS T5 ON T4.Stadium_ID = T5.Stadium_ID INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > ( SELECT AVG(Age) FROM singer );
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 ORDER BY T1.Average DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 ORDER BY T1.Average DESC LIMIT 1;
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(DISTINCT concert_ID) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name;
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE CAST(SUBSTR(T2.Year, 1, 4) AS INTEGER) >= 2014 GROUP BY T1.Name, T1.Capacity ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1;
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE CAST(T2.Year AS INTEGER) > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year ORDER BY ConcertCount DESC LIMIT 1;
SELECT Year, COUNT(*) AS ConcertCount FROM concert GROUP BY Year ORDER BY ConcertCount DESC LIMIT 1;
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS( SELECT 1 FROM concert AS T2 WHERE T1.Stadium_ID = T2.Stadium_ID );
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL;
SELECT DISTINCT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > 40 INTERSECT SELECT DISTINCT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age < 30;
SELECT T1.Name FROM stadium AS T1 WHERE NOT EXISTS( SELECT 1 FROM concert AS T2 WHERE T2.Stadium_ID = T1.Stadium_ID AND T2.Year = '2014' );
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year != '2014' GROUP BY T1.Name
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS Number_of_Singers FROM concert AS c JOIN singer_in_concert AS sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_ID;
SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID) AS Number_of_Singers FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_Name, T1.Theme;
SELECT T1.Name, COUNT(T2.concert_ID) AS Number_of_Concerts FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID;
SELECT s.Name, COUNT(sic.concert_ID) AS Number_of_Concerts FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID GROUP BY s.Singer_ID, s.Name;
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014';
SELECT T2.Name FROM concert AS T1 INNER JOIN singer AS T2 ON T1.concert_ID = T2.Singer_ID WHERE T1.Year = '2014';
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%';
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name LIKE '%Hey%';
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' AND T2.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );
SELECT DISTINCT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' AND T2.Stadium_ID IN ( SELECT Stadium_ID FROM concert WHERE Year = '2015' );
SELECT COUNT(DISTINCT T1.concert_ID) AS "Number of Concerts" FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(T1.concert_ID) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(*) AS "Number of Pets" FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1;
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(DISTINCT PetID) FROM Has_Pet AS HP JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT PetID) FROM Has_Pet AS HP JOIN Student AS S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT HP.PetID) FROM Has_Pet HP JOIN Pets P ON HP.PetID = P.PetID JOIN Student S ON HP.StuID = S.StuID WHERE P.PetType = 'dog' AND S.Sex = 'F';
SELECT COUNT(DISTINCT S.StuID) FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) AS "Number of Distinct Pet Types" FROM Pets;
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')));
SELECT DISTINCT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog');
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog';
SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' INTERSECT SELECT DISTINCT S.Fname FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog';
SELECT DISTINCT Major, Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) );
SELECT DISTINCT S.Major, S.Age FROM Student AS S LEFT JOIN Has_Pet AS HP ON S.StuID = HP.StuID LEFT JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType <> 'cat' OR P.PetType IS NULL;
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')
SELECT DISTINCT S.Fname, S.Age FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND NOT EXISTS ( SELECT 1 FROM Has_Pet AS HP2 JOIN Pets AS P2 ON HP2.PetID = P2.PetID WHERE HP2.StuID = S.StuID AND P2.PetType = 'cat' );
SELECT DISTINCT Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN ( SELECT DISTINCT StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT p.PetType, AVG(p.pet_age) AS AverageAge, MAX(p.pet_age) AS MaxAge FROM Pets AS p GROUP BY p.PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT DISTINCT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT s.StuID, COUNT(hp.PetID) AS NumberOfPets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID;
SELECT StuID, COUNT(*) AS NumberOfPets FROM Has_Pet GROUP BY StuID;
SELECT DISTINCT S.Fname, S.Sex FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT DISTINCT S.Fname, S.Sex FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID GROUP BY S.StuID HAVING COUNT(HP.PetID) > 1;
SELECT DISTINCT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT DISTINCT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
-- This query assumes you have a table named "continents" with a column named "continent_name". -- Please adjust the table and column names to match your actual database schema. SELECT COUNT(DISTINCT continent_name) AS number_of_continents FROM continents;
-- Unable to provide an SQL query without a database schema. -- Please provide the table names and columns relevant to continents. -- For example: -- SELECT COUNT(DISTINCT continent) FROM countries; -- This query assumes a table named 'countries' with a 'continent' column. Please provide the database schema so I can generate a correct SQL query.
-- The provided database schema is missing. -- Please provide the schema for a more accurate query. -- This query assumes tables named "continents" and "countries" with a foreign key relationship. SELECT c.continent_id, c.continent_name, COUNT(DISTINCT co.country_id) AS number_of_countries FROM continents c JOIN countries co ON c.continent_id = co.continent_id GROUP BY c.continent_id, c.continent_name ORDER BY c.continent_id; **Explanation:** 1. **SELECT**: This clause selects the continent ID, continent name, and the count of distinct country IDs. 2. **FROM**: This clause specifies the tables involved: `continents` and `countries`. 3. **JOIN**: This clause joins the two tables based on the `continent_id` foreign key relationship. 4. **GROUP BY**: This clause groups the results by continent ID and continent name. 5. **COUNT(DISTINCT co.country_id)**: This function counts the number of distinct country IDs within each continent group. 6. **ORDER BY**: This clause orders the results by continent ID. **Note:** This query assumes the following: * There are two tables named `continents` and `countries`. * The `continents` table has columns `continent_id` and `continent_name`. * The `countries` table has a column `continent_id` that references the `continent_id` in the `continents` table. Please provide the actual database schema for a more accurate and tailored query.
-- The provided database schema does not include information about continents and countries. -- Please provide the schema for a more accurate query. -- The following query assumes a table named "continents" with columns "id", "name", and a table named "countries" with a column "continent_id" referencing the "continents" table. -- Please adjust the table and column names accordingly. SELECT c.id, c.name, COUNT(co.continent_id) AS country_count FROM continents c LEFT JOIN countries co ON c.id = co.continent_id GROUP BY c.id, c.name ORDER BY c.id;
-- Unable to provide a query without a database schema. -- Please provide the table names and column names relevant to countries. -- For example: -- SELECT COUNT(DISTINCT country_name) FROM countries; Please provide the database schema so I can generate a correct SQL query.
-- This query assumes you have a table named "countries" with a column named "country_name". -- Please replace "countries" and "country_name" with the actual table and column names in your database. SELECT COUNT(DISTINCT country_name) AS number_of_countries FROM countries;
-- The provided database schema is missing. -- Please provide the schema for a more accurate query. -- This query assumes tables named "car_makers" and "models" with a foreign key relationship. -- Adjust table and column names as needed. SELECT cm.full_name, cm.id, COUNT(m.id) AS model_count FROM car_makers cm LEFT JOIN models m ON cm.id = m.maker_id GROUP BY cm.full_name, cm.id ORDER BY cm.full_name; **Explanation:** 1. **`SELECT` Clause:** - `cm.full_name`: Selects the full name of the car maker. - `cm.id`: Selects the ID of the car maker. - `COUNT(m.id) AS model_count`: Counts the number of models associated with each maker and aliases it as `model_count`. 2. **`FROM` Clause:** - `car_makers cm`: Selects data from the `car_makers` table, aliasing it as `cm`. 3. **`LEFT JOIN` Clause:** - `models m ON cm.id = m.maker_id`: Joins the `car_makers` and `models` tables based on the `maker_id` foreign key relationship. This ensures that all car makers are included, even if they have no models. 4. **`GROUP BY` Clause:** - `cm.full_name, cm.id`: Groups the results by car maker full name and ID to count models for each maker. 5. **`ORDER BY` Clause:** - `cm.full_name`: Orders the results alphabetically by car maker full name. **Remember to replace the table and column names with the actual names from your database schema.**
-- The provided database schema is missing. -- Please provide the schema for a more accurate query. -- This query assumes a table named "car_makers" with columns "id", "name", and a table named "models" with a foreign key "maker_id" referencing "car_makers". -- Adjust the table and column names accordingly. SELECT cm.id, cm.name AS car_maker_name, COUNT(DISTINCT m.id) AS number_of_models FROM car_makers cm LEFT JOIN models m ON cm.id = m.maker_id GROUP BY cm.id, cm.name ORDER BY cm.name;
-- The database schema is missing, so this query is a placeholder. -- Please provide the database schema for a more accurate query. SELECT Model FROM Cars ORDER BY Horsepower ASC LIMIT 1; **Explanation:** * **SELECT Model:** This selects the 'Model' column, which we assume contains the car model names. * **FROM Cars:** This specifies the table containing the car data. * **ORDER BY Horsepower ASC:** This sorts the results in ascending order based on the 'Horsepower' column. * **LIMIT 1:** This limits the result set to the first row, which will be the car with the minimum horsepower. **Please note:** This query assumes the existence of a table named 'Cars' with columns 'Model' and 'Horsepower'. You will need to adjust the table and column names to match your actual database schema.
-- The database schema is missing, so this query is a placeholder. -- Please provide the database schema for a more accurate query. SELECT Model FROM Cars ORDER BY Horsepower ASC LIMIT 1; **Explanation:** * **SELECT Model:** This selects the "Model" column from the table. * **FROM Cars:** This specifies the table to query. * **ORDER BY Horsepower ASC:** This sorts the results in ascending order based on the "Horsepower" column. * **LIMIT 1:** This limits the results to the first row, which will be the car with the smallest horsepower. **Please note:** This query assumes a table named "Cars" with columns "Model" and "Horsepower". You will need to adjust the table and column names to match your actual database schema.
-- The provided database schema does not include information about cars or their weights. -- Please provide the database schema for a more accurate query. -- The following query assumes a table named "cars" with columns "model" and "weight". -- Replace "cars" with the actual table name and "model" and "weight" with the actual column names. SELECT model FROM cars WHERE weight < (SELECT AVG(weight) FROM cars);
-- The provided database schema does not contain information about cars or their weights. -- Please provide the database schema for a more accurate query. -- The following query assumes a table named "cars" with columns "model" and "weight". -- Replace "cars" with the actual table name and "model", "weight" with the actual column names. SELECT model FROM cars WHERE weight < (SELECT AVG(weight) FROM cars);
-- The schema is missing, so this query is a placeholder. -- Please provide the schema for a more accurate query. -- Assuming a table named "cars" with columns "maker" and "year" SELECT DISTINCT maker FROM cars WHERE year = 1970; **Explanation:** * **SELECT DISTINCT maker:** This selects the unique names of the makers from the `cars` table. * **FROM cars:** This specifies the table to query. * **WHERE year = 1970:** This filters the results to only include cars produced in the year 1970. **Please note:** This query assumes a table named `cars` with columns `maker` and `year`. You will need to adjust the query based on your actual database schema.
-- The schema is missing, so this query is a placeholder. -- Please provide the schema for a more accurate query. -- Assuming a table named "cars" with columns "make" and "year" SELECT DISTINCT make FROM cars WHERE year = 1970; **Explanation:** * **SELECT DISTINCT make:** This selects the unique car maker names from the `cars` table. * **FROM cars:** This specifies the table to query. * **WHERE year = 1970:** This filters the results to only include cars produced in 1970. **Please note:** This query assumes a table named `cars` with columns `make` and `year`. You will need to adjust the query based on your actual database schema.
