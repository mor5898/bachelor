SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France';
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id, p.first_name, p.last_name HAVING COUNT(DISTINCT m.year) = 2;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id, p.first_name, p.last_name HAVING COUNT(DISTINCT m.year) = 2;
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);
SELECT DISTINCT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2;
SELECT DISTINCT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') AND EXISTS ( SELECT 1 FROM matches m2 WHERE m2.winner_id = p.player_id AND m2.tourney_name = 'WTA Championships' ) AND EXISTS ( SELECT 1 FROM matches m3 WHERE m3.winner_id = p.player_id AND m3.tourney_name = 'Australian Open' );
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY SUM(r.tours) DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, m.winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT p.first_name, p.last_name, r.ranking_points FROM players p JOIN matches m ON p.player_id = m.winner_id JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(m.winner_id) DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
SELECT p1.first_name, p1.last_name, p2.first_name, p2.last_name FROM matches m JOIN players p1 ON m.winner_id = p1.player_id JOIN players p2 ON m.loser_id = p2.player_id ORDER BY m.minutes DESC LIMIT 1;
SELECT p.player_id, p.first_name, AVG(r.ranking) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, AVG(r.ranking_points) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.player_id, p.first_name, SUM(r.ranking_points) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, SUM(r.ranking_points) FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name ORDER BY p.first_name;
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code;
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC;
SELECT country_code, COUNT(player_id) FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT year, COUNT(*) FROM matches GROUP BY year ORDER BY year;
SELECT year, COUNT(*) FROM matches GROUP BY year;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT p.first_name, p.last_name, m.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT mm.winner_id) FROM matches mm JOIN players p ON mm.winner_id = p.player_id WHERE mm.tourney_name = 'WTA Championships' AND p.hand = 'L';
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_level = 'WTA' AND p.hand = 'L';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON m.winner_id = p.player_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT "hand", COUNT(DISTINCT "player_id") FROM players GROUP BY "hand";
SELECT hand, COUNT(DISTINCT player_id) FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT "name", "tonnage" FROM "ship" ORDER BY "name" DESC;
SELECT name, date, result FROM battle;
SELECT b.name, SUM(d.killed), MAX(SUM(d.killed)) OVER (), MIN(SUM(d.killed)) OVER () FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.name;
SELECT AVG(injured) FROM death;
SELECT d.id, d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id;
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed + d.injured) > 10;
SELECT s."id", s."name", SUM(d."injured") FROM "ship" s JOIN "death" d ON s."id" = d."caused_by_ship_id" GROUP BY s."id", s."name" ORDER BY SUM(d."injured") DESC;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage != '225' OR s.tonnage IS NULL;
SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name IN ('Lettice', 'HMS Atalanta');
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s."lost_in_battle" AND s.location = 'English Channel' WHERE s."lost_in_battle" IS NULL;
SELECT "note" FROM "death" WHERE "note" LIKE '%East%';
SELECT line1, line2 FROM Addresses;
SELECT address_line1, address_line2 FROM Addresses;
SELECT COUNT(DISTINCT `student_course_id`) FROM Transcript_Contents;
SELECT COUNT(*) FROM Transcript_Contents;
SELECT `description` FROM Courses WHERE `course_id` = 'MathCourseID'; -- Replace MathCourseID with the actual ID of the math course if known.
SELECT description FROM Courses WHERE subject = 'Math';
SELECT;
INSERT INTO Locations (`location_id`, `zip_code`, `address`) VALUES (..., ..., 'Port Chelsea');
SELECT d.department_name, d.department_id, COUNT(c.course_id) FROM Departments d JOIN Courses c ON d.department_id = c.department_id JOIN Transcript_Contents t ON c.course_id = t.student_course_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(c.course_id) DESC LIMIT 1;
SELECT d.department_id, d.name, COUNT(d.degree_id) FROM Departments d JOIN Degrees deg ON d.department_id = deg.department_id GROUP BY d.department_id, d.name ORDER BY COUNT(d.degree_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT dept_id) FROM Courses;
SELECT COUNT(DISTINCT department_name) FROM Departments;
SELECT COUNT(DISTINCT course_name) FROM Courses;
SELECT COUNT(DISTINCT degree_name) FROM Degrees;
SELECT COUNT(DISTINCT d.degree_type) FROM Degrees d JOIN Courses c ON d.course_id = c.course_id WHERE c.department = 'Engineering';
SELECT COUNT(DISTINCT degree) FROM Courses WHERE department = 'Engineering';
SELECT Sections.section_id, Courses.course_name, Courses.description FROM Sections INNER JOIN Courses ON Sections.course_id = Courses.course_id;
SELECT name, description FROM Sections;
SELECT c.course_id, c.name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) <= 2;
SELECT cs.course_id FROM Course_Sections cs GROUP BY cs.course_id HAVING COUNT(cs.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT DISTINCT section_name FROM Sections ORDER BY section_name DESC;
SELECT student_course_id FROM Transcript_Contents;
SELECT t.transcript_id, t.transcript_date, COUNT(tc.student_course_id) FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY DATE_FORMAT(t.transcript_date, '%Y-%m') -- Assuming the date represents a semester or term ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT description FROM Departments WHERE department_name LIKE '%computer%';
SELECT DISTINCT c.department_id FROM Courses c WHERE c.course_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id HAVING COUNT(DISTINCT tc.transcript_id) >= 2;
SELECT DISTINCT se1.student_id FROM Student_Enrollments se1 JOIN Student_Enrollments se2 ON se1.student_id = se2.student_id AND se1.course_id <> se2.course_id;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id WHERE tc.transcript_id IN ( SELECT transcript_id FROM Transcripts WHERE other_details LIKE '%Bachelor%' );
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Programs p ON e.program_id = p.program_id WHERE p.degree_level = 'Bachelor's';
SELECT c.program_id, COUNT(tc.student_course_id) FROM Transcript_Contents tc JOIN Courses c ON tc.student_course_id = c.course_id GROUP BY c.program_id ORDER BY COUNT(tc.student_course_id) DESC LIMIT 1;
SELECT DS.name, COUNT(SC.student_course_id) FROM Student_Courses SC JOIN Degree_Summary DS ON SC.degree_summary_id = DS.degree_summary_id GROUP BY DS.name ORDER BY COUNT(SC.student_course_id) DESC LIMIT 1;
SELECT t.transcript_id, COUNT(DISTINCT tc.student_course_id) FROM Transcript_Contents tc JOIN Transcripts t ON tc.transcript_id = t.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(DISTINCT tc.student_course_id) DESC LIMIT 1;
SELECT d.degree_id, d.summary, COUNT(DISTINCT sc.student_id) FROM Transcript_Contents tc JOIN Student_Courses sc ON tc.student_course_id = sc.student_course_id JOIN Degree d ON sc.degree_id = d.degree_id GROUP BY d.degree_id, d.summary ORDER BY COUNT(DISTINCT sc.student_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id ORDER BY SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id GROUP BY s.student_id ORDER BY SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(tc.transcript_id) DESC LIMIT 1;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t WHERE t.transcript_id NOT IN (SELECT tc.transcript_id FROM Transcript_Contents tc) ORDER BY t.transcript_id;
SELECT t.transcript_id, t.transcript_date FROM Transcripts t LEFT JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id WHERE tc.student_course_id IS NULL;
SELECT DISTINCT c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id ORDER BY c.course_name;
SELECT DISTINCT c.course_name FROM Courses c JOIN Transcript_Contents tc ON c.course_id = tc.student_course_id;
SELECT c.course_name FROM Courses c JOIN Transcripts t ON c.transcript_id = t.transcript_id GROUP BY c.course_name ORDER BY COUNT(t.transcript_id) DESC LIMIT 1;
SELECT C.course_name FROM Courses C JOIN Transcript_Contents TC ON C.course_id = TC.student_course_id GROUP BY C.course_name ORDER BY COUNT(DISTINCT TC.transcript_id) DESC LIMIT 1;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.address_id = a.address_id LEFT JOIN Student_Courses sc ON s.student_id = sc.student_course_id WHERE a.state = 'NC' AND sc.student_course_id IS NULL;
SELECT DISTINCT s.last_name FROM Students s JOIN Addresses a ON s.address_id = a.address_id LEFT JOIN Student_Courses sc ON s.student_id = sc.student_id WHERE a.state = 'North Carolina' AND sc.student_course_id IS NULL;
SELECT T.transcript_date, T.transcript_id FROM Transcripts T JOIN Transcript_Contents TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(TC.student_course_id) >= 2;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
SELECT phone_number FROM People WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT s.mobile_number FROM Students s JOIN Transcript_Contents tc ON s.student_id = tc.student_course_id WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Courses sc ON s.student_id = sc.student_id WHERE sc.student_course_id = 0;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Transcripts t ON s.student_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;
CREATE TABLE Students ( student_id INT PRIMARY KEY, first_name VARCHAR(255), middle_name VARCHAR(255), last_name VARCHAR(255), -- other fields as necessary );
SELECT s.first_name FROM Students s JOIN Addresses ca ON s.current_address = ca.address_id JOIN Addresses pa ON s.permanent_address = pa.address_id WHERE ca.address <> pa.address;
SELECT s.first_name FROM Students s JOIN Addresses a1 ON s.permanent_address_id = a1.address_id JOIN Addresses a2 ON s.current_address_id = a2.address_id WHERE a1.street_address <> a2.street_address OR a1.city <> a2.city OR a1.state <> a2.state OR a1.zipcode <> a2.zipcode;
SELECT a.address_id, a.line1, a.city, a.postal_code, COUNT(s.student_id) FROM Addresses a JOIN Students s ON a.address_id = s.address_id GROUP BY a.address_id, a.line1, a.city, a.postal_code ORDER BY SELECT a.address_id, a.line1, a.city, a.postal_code, COUNT(s.student_id) DESC LIMIT 1;
SELECT A.address_id, A.line1, A.line2 FROM Addresses AS A JOIN Students AS S ON A.address_id = S.address_id GROUP BY A.address_id, A.line1, A.line2 ORDER BY COUNT(S.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_id = 5;
SELECT MIN(transcript_date) , transcript_id, other_details FROM Transcripts WHERE transcript_date IS NOT NULL;
SELECT;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT student_course_id, COUNT(DISTINCT transcript_id) FROM Transcript_Contents GROUP BY student_course_id;
SELECT student_course_id, COUNT(*) FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1;
